
FMmodulator-STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004820  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  080049b8  080049b8  000149b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a68  08004a68  00020020  2**0
                  CONTENTS
  4 .ARM          00000008  08004a68  08004a68  00014a68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a70  08004a70  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a70  08004a70  00014a70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a74  08004a74  00014a74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08004a78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011d8  20000020  08004a98  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200011f8  08004a98  000211f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010d47  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024e1  00000000  00000000  00030d97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d18  00000000  00000000  00033278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c20  00000000  00000000  00033f90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016bfb  00000000  00000000  00034bb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011771  00000000  00000000  0004b7ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d5b4  00000000  00000000  0005cf1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ea4d0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035b4  00000000  00000000  000ea524  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000020 	.word	0x20000020
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080049a0 	.word	0x080049a0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000024 	.word	0x20000024
 80001d4:	080049a0 	.word	0x080049a0

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_uldivmod>:
 80001e8:	b953      	cbnz	r3, 8000200 <__aeabi_uldivmod+0x18>
 80001ea:	b94a      	cbnz	r2, 8000200 <__aeabi_uldivmod+0x18>
 80001ec:	2900      	cmp	r1, #0
 80001ee:	bf08      	it	eq
 80001f0:	2800      	cmpeq	r0, #0
 80001f2:	bf1c      	itt	ne
 80001f4:	f04f 31ff 	movne.w	r1, #4294967295
 80001f8:	f04f 30ff 	movne.w	r0, #4294967295
 80001fc:	f000 b96e 	b.w	80004dc <__aeabi_idiv0>
 8000200:	f1ad 0c08 	sub.w	ip, sp, #8
 8000204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000208:	f000 f806 	bl	8000218 <__udivmoddi4>
 800020c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000214:	b004      	add	sp, #16
 8000216:	4770      	bx	lr

08000218 <__udivmoddi4>:
 8000218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800021c:	9d08      	ldr	r5, [sp, #32]
 800021e:	4604      	mov	r4, r0
 8000220:	468c      	mov	ip, r1
 8000222:	2b00      	cmp	r3, #0
 8000224:	f040 8083 	bne.w	800032e <__udivmoddi4+0x116>
 8000228:	428a      	cmp	r2, r1
 800022a:	4617      	mov	r7, r2
 800022c:	d947      	bls.n	80002be <__udivmoddi4+0xa6>
 800022e:	fab2 f282 	clz	r2, r2
 8000232:	b142      	cbz	r2, 8000246 <__udivmoddi4+0x2e>
 8000234:	f1c2 0020 	rsb	r0, r2, #32
 8000238:	fa24 f000 	lsr.w	r0, r4, r0
 800023c:	4091      	lsls	r1, r2
 800023e:	4097      	lsls	r7, r2
 8000240:	ea40 0c01 	orr.w	ip, r0, r1
 8000244:	4094      	lsls	r4, r2
 8000246:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800024a:	0c23      	lsrs	r3, r4, #16
 800024c:	fbbc f6f8 	udiv	r6, ip, r8
 8000250:	fa1f fe87 	uxth.w	lr, r7
 8000254:	fb08 c116 	mls	r1, r8, r6, ip
 8000258:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800025c:	fb06 f10e 	mul.w	r1, r6, lr
 8000260:	4299      	cmp	r1, r3
 8000262:	d909      	bls.n	8000278 <__udivmoddi4+0x60>
 8000264:	18fb      	adds	r3, r7, r3
 8000266:	f106 30ff 	add.w	r0, r6, #4294967295
 800026a:	f080 8119 	bcs.w	80004a0 <__udivmoddi4+0x288>
 800026e:	4299      	cmp	r1, r3
 8000270:	f240 8116 	bls.w	80004a0 <__udivmoddi4+0x288>
 8000274:	3e02      	subs	r6, #2
 8000276:	443b      	add	r3, r7
 8000278:	1a5b      	subs	r3, r3, r1
 800027a:	b2a4      	uxth	r4, r4
 800027c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000280:	fb08 3310 	mls	r3, r8, r0, r3
 8000284:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000288:	fb00 fe0e 	mul.w	lr, r0, lr
 800028c:	45a6      	cmp	lr, r4
 800028e:	d909      	bls.n	80002a4 <__udivmoddi4+0x8c>
 8000290:	193c      	adds	r4, r7, r4
 8000292:	f100 33ff 	add.w	r3, r0, #4294967295
 8000296:	f080 8105 	bcs.w	80004a4 <__udivmoddi4+0x28c>
 800029a:	45a6      	cmp	lr, r4
 800029c:	f240 8102 	bls.w	80004a4 <__udivmoddi4+0x28c>
 80002a0:	3802      	subs	r0, #2
 80002a2:	443c      	add	r4, r7
 80002a4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a8:	eba4 040e 	sub.w	r4, r4, lr
 80002ac:	2600      	movs	r6, #0
 80002ae:	b11d      	cbz	r5, 80002b8 <__udivmoddi4+0xa0>
 80002b0:	40d4      	lsrs	r4, r2
 80002b2:	2300      	movs	r3, #0
 80002b4:	e9c5 4300 	strd	r4, r3, [r5]
 80002b8:	4631      	mov	r1, r6
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	b902      	cbnz	r2, 80002c2 <__udivmoddi4+0xaa>
 80002c0:	deff      	udf	#255	; 0xff
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d150      	bne.n	800036c <__udivmoddi4+0x154>
 80002ca:	1bcb      	subs	r3, r1, r7
 80002cc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d0:	fa1f f887 	uxth.w	r8, r7
 80002d4:	2601      	movs	r6, #1
 80002d6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002da:	0c21      	lsrs	r1, r4, #16
 80002dc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002e0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002e4:	fb08 f30c 	mul.w	r3, r8, ip
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d907      	bls.n	80002fc <__udivmoddi4+0xe4>
 80002ec:	1879      	adds	r1, r7, r1
 80002ee:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002f2:	d202      	bcs.n	80002fa <__udivmoddi4+0xe2>
 80002f4:	428b      	cmp	r3, r1
 80002f6:	f200 80e9 	bhi.w	80004cc <__udivmoddi4+0x2b4>
 80002fa:	4684      	mov	ip, r0
 80002fc:	1ac9      	subs	r1, r1, r3
 80002fe:	b2a3      	uxth	r3, r4
 8000300:	fbb1 f0fe 	udiv	r0, r1, lr
 8000304:	fb0e 1110 	mls	r1, lr, r0, r1
 8000308:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800030c:	fb08 f800 	mul.w	r8, r8, r0
 8000310:	45a0      	cmp	r8, r4
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0x10c>
 8000314:	193c      	adds	r4, r7, r4
 8000316:	f100 33ff 	add.w	r3, r0, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x10a>
 800031c:	45a0      	cmp	r8, r4
 800031e:	f200 80d9 	bhi.w	80004d4 <__udivmoddi4+0x2bc>
 8000322:	4618      	mov	r0, r3
 8000324:	eba4 0408 	sub.w	r4, r4, r8
 8000328:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800032c:	e7bf      	b.n	80002ae <__udivmoddi4+0x96>
 800032e:	428b      	cmp	r3, r1
 8000330:	d909      	bls.n	8000346 <__udivmoddi4+0x12e>
 8000332:	2d00      	cmp	r5, #0
 8000334:	f000 80b1 	beq.w	800049a <__udivmoddi4+0x282>
 8000338:	2600      	movs	r6, #0
 800033a:	e9c5 0100 	strd	r0, r1, [r5]
 800033e:	4630      	mov	r0, r6
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	fab3 f683 	clz	r6, r3
 800034a:	2e00      	cmp	r6, #0
 800034c:	d14a      	bne.n	80003e4 <__udivmoddi4+0x1cc>
 800034e:	428b      	cmp	r3, r1
 8000350:	d302      	bcc.n	8000358 <__udivmoddi4+0x140>
 8000352:	4282      	cmp	r2, r0
 8000354:	f200 80b8 	bhi.w	80004c8 <__udivmoddi4+0x2b0>
 8000358:	1a84      	subs	r4, r0, r2
 800035a:	eb61 0103 	sbc.w	r1, r1, r3
 800035e:	2001      	movs	r0, #1
 8000360:	468c      	mov	ip, r1
 8000362:	2d00      	cmp	r5, #0
 8000364:	d0a8      	beq.n	80002b8 <__udivmoddi4+0xa0>
 8000366:	e9c5 4c00 	strd	r4, ip, [r5]
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0xa0>
 800036c:	f1c2 0320 	rsb	r3, r2, #32
 8000370:	fa20 f603 	lsr.w	r6, r0, r3
 8000374:	4097      	lsls	r7, r2
 8000376:	fa01 f002 	lsl.w	r0, r1, r2
 800037a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800037e:	40d9      	lsrs	r1, r3
 8000380:	4330      	orrs	r0, r6
 8000382:	0c03      	lsrs	r3, r0, #16
 8000384:	fbb1 f6fe 	udiv	r6, r1, lr
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000390:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000394:	fb06 f108 	mul.w	r1, r6, r8
 8000398:	4299      	cmp	r1, r3
 800039a:	fa04 f402 	lsl.w	r4, r4, r2
 800039e:	d909      	bls.n	80003b4 <__udivmoddi4+0x19c>
 80003a0:	18fb      	adds	r3, r7, r3
 80003a2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003a6:	f080 808d 	bcs.w	80004c4 <__udivmoddi4+0x2ac>
 80003aa:	4299      	cmp	r1, r3
 80003ac:	f240 808a 	bls.w	80004c4 <__udivmoddi4+0x2ac>
 80003b0:	3e02      	subs	r6, #2
 80003b2:	443b      	add	r3, r7
 80003b4:	1a5b      	subs	r3, r3, r1
 80003b6:	b281      	uxth	r1, r0
 80003b8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003bc:	fb0e 3310 	mls	r3, lr, r0, r3
 80003c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003c4:	fb00 f308 	mul.w	r3, r0, r8
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x1c4>
 80003cc:	1879      	adds	r1, r7, r1
 80003ce:	f100 3cff 	add.w	ip, r0, #4294967295
 80003d2:	d273      	bcs.n	80004bc <__udivmoddi4+0x2a4>
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d971      	bls.n	80004bc <__udivmoddi4+0x2a4>
 80003d8:	3802      	subs	r0, #2
 80003da:	4439      	add	r1, r7
 80003dc:	1acb      	subs	r3, r1, r3
 80003de:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003e2:	e778      	b.n	80002d6 <__udivmoddi4+0xbe>
 80003e4:	f1c6 0c20 	rsb	ip, r6, #32
 80003e8:	fa03 f406 	lsl.w	r4, r3, r6
 80003ec:	fa22 f30c 	lsr.w	r3, r2, ip
 80003f0:	431c      	orrs	r4, r3
 80003f2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003f6:	fa01 f306 	lsl.w	r3, r1, r6
 80003fa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003fe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000402:	431f      	orrs	r7, r3
 8000404:	0c3b      	lsrs	r3, r7, #16
 8000406:	fbb1 f9fe 	udiv	r9, r1, lr
 800040a:	fa1f f884 	uxth.w	r8, r4
 800040e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000412:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000416:	fb09 fa08 	mul.w	sl, r9, r8
 800041a:	458a      	cmp	sl, r1
 800041c:	fa02 f206 	lsl.w	r2, r2, r6
 8000420:	fa00 f306 	lsl.w	r3, r0, r6
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x220>
 8000426:	1861      	adds	r1, r4, r1
 8000428:	f109 30ff 	add.w	r0, r9, #4294967295
 800042c:	d248      	bcs.n	80004c0 <__udivmoddi4+0x2a8>
 800042e:	458a      	cmp	sl, r1
 8000430:	d946      	bls.n	80004c0 <__udivmoddi4+0x2a8>
 8000432:	f1a9 0902 	sub.w	r9, r9, #2
 8000436:	4421      	add	r1, r4
 8000438:	eba1 010a 	sub.w	r1, r1, sl
 800043c:	b2bf      	uxth	r7, r7
 800043e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000442:	fb0e 1110 	mls	r1, lr, r0, r1
 8000446:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800044a:	fb00 f808 	mul.w	r8, r0, r8
 800044e:	45b8      	cmp	r8, r7
 8000450:	d907      	bls.n	8000462 <__udivmoddi4+0x24a>
 8000452:	19e7      	adds	r7, r4, r7
 8000454:	f100 31ff 	add.w	r1, r0, #4294967295
 8000458:	d22e      	bcs.n	80004b8 <__udivmoddi4+0x2a0>
 800045a:	45b8      	cmp	r8, r7
 800045c:	d92c      	bls.n	80004b8 <__udivmoddi4+0x2a0>
 800045e:	3802      	subs	r0, #2
 8000460:	4427      	add	r7, r4
 8000462:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000466:	eba7 0708 	sub.w	r7, r7, r8
 800046a:	fba0 8902 	umull	r8, r9, r0, r2
 800046e:	454f      	cmp	r7, r9
 8000470:	46c6      	mov	lr, r8
 8000472:	4649      	mov	r1, r9
 8000474:	d31a      	bcc.n	80004ac <__udivmoddi4+0x294>
 8000476:	d017      	beq.n	80004a8 <__udivmoddi4+0x290>
 8000478:	b15d      	cbz	r5, 8000492 <__udivmoddi4+0x27a>
 800047a:	ebb3 020e 	subs.w	r2, r3, lr
 800047e:	eb67 0701 	sbc.w	r7, r7, r1
 8000482:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000486:	40f2      	lsrs	r2, r6
 8000488:	ea4c 0202 	orr.w	r2, ip, r2
 800048c:	40f7      	lsrs	r7, r6
 800048e:	e9c5 2700 	strd	r2, r7, [r5]
 8000492:	2600      	movs	r6, #0
 8000494:	4631      	mov	r1, r6
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e70b      	b.n	80002b8 <__udivmoddi4+0xa0>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e9      	b.n	8000278 <__udivmoddi4+0x60>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6fd      	b.n	80002a4 <__udivmoddi4+0x8c>
 80004a8:	4543      	cmp	r3, r8
 80004aa:	d2e5      	bcs.n	8000478 <__udivmoddi4+0x260>
 80004ac:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b0:	eb69 0104 	sbc.w	r1, r9, r4
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7df      	b.n	8000478 <__udivmoddi4+0x260>
 80004b8:	4608      	mov	r0, r1
 80004ba:	e7d2      	b.n	8000462 <__udivmoddi4+0x24a>
 80004bc:	4660      	mov	r0, ip
 80004be:	e78d      	b.n	80003dc <__udivmoddi4+0x1c4>
 80004c0:	4681      	mov	r9, r0
 80004c2:	e7b9      	b.n	8000438 <__udivmoddi4+0x220>
 80004c4:	4666      	mov	r6, ip
 80004c6:	e775      	b.n	80003b4 <__udivmoddi4+0x19c>
 80004c8:	4630      	mov	r0, r6
 80004ca:	e74a      	b.n	8000362 <__udivmoddi4+0x14a>
 80004cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d0:	4439      	add	r1, r7
 80004d2:	e713      	b.n	80002fc <__udivmoddi4+0xe4>
 80004d4:	3802      	subs	r0, #2
 80004d6:	443c      	add	r4, r7
 80004d8:	e724      	b.n	8000324 <__udivmoddi4+0x10c>
 80004da:	bf00      	nop

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <messageRoutine>:
const char *msgInit = "FM Modulator\n";
const char *msgFreq = "Insert the signal frequency (in Hz): ";
const char *msgCarr = "Insert the carrier central frequency (in kHz): ";
const char *msgRange = "Insert the frequency range(in kHz): ";

void messageRoutine(Signal *sig, uint8_t *rxBuff){
 80004e0:	b590      	push	{r4, r7, lr}
 80004e2:	b085      	sub	sp, #20
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
 80004e8:	6039      	str	r1, [r7, #0]
	static uint8_t state = 0;
	uint32_t value = 0;
 80004ea:	2300      	movs	r3, #0
 80004ec:	60bb      	str	r3, [r7, #8]
	uint32_t valMult = 1;
 80004ee:	2301      	movs	r3, #1
 80004f0:	60fb      	str	r3, [r7, #12]

	switch(state){
 80004f2:	4b59      	ldr	r3, [pc, #356]	; (8000658 <messageRoutine+0x178>)
 80004f4:	781b      	ldrb	r3, [r3, #0]
 80004f6:	2b07      	cmp	r3, #7
 80004f8:	f200 80aa 	bhi.w	8000650 <messageRoutine+0x170>
 80004fc:	a201      	add	r2, pc, #4	; (adr r2, 8000504 <messageRoutine+0x24>)
 80004fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000502:	bf00      	nop
 8000504:	08000525 	.word	0x08000525
 8000508:	08000647 	.word	0x08000647
 800050c:	0800056f 	.word	0x0800056f
 8000510:	0800059b 	.word	0x0800059b
 8000514:	080005db 	.word	0x080005db
 8000518:	08000607 	.word	0x08000607
 800051c:	08000647 	.word	0x08000647
 8000520:	08000647 	.word	0x08000647
		case 0: // Init & frequency message
			HAL_UART_Transmit(&huart2, (uint8_t *)msgInit, strlen(msgInit), UART_TIMEOUT);
 8000524:	4b4d      	ldr	r3, [pc, #308]	; (800065c <messageRoutine+0x17c>)
 8000526:	681c      	ldr	r4, [r3, #0]
 8000528:	4b4c      	ldr	r3, [pc, #304]	; (800065c <messageRoutine+0x17c>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	4618      	mov	r0, r3
 800052e:	f7ff fe53 	bl	80001d8 <strlen>
 8000532:	4603      	mov	r3, r0
 8000534:	b29a      	uxth	r2, r3
 8000536:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800053a:	4621      	mov	r1, r4
 800053c:	4848      	ldr	r0, [pc, #288]	; (8000660 <messageRoutine+0x180>)
 800053e:	f003 f9d8 	bl	80038f2 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, (uint8_t *)msgFreq, strlen(msgFreq), UART_TIMEOUT);
 8000542:	4b48      	ldr	r3, [pc, #288]	; (8000664 <messageRoutine+0x184>)
 8000544:	681c      	ldr	r4, [r3, #0]
 8000546:	4b47      	ldr	r3, [pc, #284]	; (8000664 <messageRoutine+0x184>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	4618      	mov	r0, r3
 800054c:	f7ff fe44 	bl	80001d8 <strlen>
 8000550:	4603      	mov	r3, r0
 8000552:	b29a      	uxth	r2, r3
 8000554:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000558:	4621      	mov	r1, r4
 800055a:	4841      	ldr	r0, [pc, #260]	; (8000660 <messageRoutine+0x180>)
 800055c:	f003 f9c9 	bl	80038f2 <HAL_UART_Transmit>
			state++;
 8000560:	4b3d      	ldr	r3, [pc, #244]	; (8000658 <messageRoutine+0x178>)
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	3301      	adds	r3, #1
 8000566:	b2da      	uxtb	r2, r3
 8000568:	4b3b      	ldr	r3, [pc, #236]	; (8000658 <messageRoutine+0x178>)
 800056a:	701a      	strb	r2, [r3, #0]
			break;
 800056c:	e070      	b.n	8000650 <messageRoutine+0x170>
		case 1: //
			break;
		case 2:
			HAL_UART_Transmit(&huart2, (uint8_t *)msgCarr, strlen(msgCarr), UART_TIMEOUT);
 800056e:	4b3e      	ldr	r3, [pc, #248]	; (8000668 <messageRoutine+0x188>)
 8000570:	681c      	ldr	r4, [r3, #0]
 8000572:	4b3d      	ldr	r3, [pc, #244]	; (8000668 <messageRoutine+0x188>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	4618      	mov	r0, r3
 8000578:	f7ff fe2e 	bl	80001d8 <strlen>
 800057c:	4603      	mov	r3, r0
 800057e:	b29a      	uxth	r2, r3
 8000580:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000584:	4621      	mov	r1, r4
 8000586:	4836      	ldr	r0, [pc, #216]	; (8000660 <messageRoutine+0x180>)
 8000588:	f003 f9b3 	bl	80038f2 <HAL_UART_Transmit>
			state++;
 800058c:	4b32      	ldr	r3, [pc, #200]	; (8000658 <messageRoutine+0x178>)
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	3301      	adds	r3, #1
 8000592:	b2da      	uxtb	r2, r3
 8000594:	4b30      	ldr	r3, [pc, #192]	; (8000658 <messageRoutine+0x178>)
 8000596:	701a      	strb	r2, [r3, #0]
			break;
 8000598:	e05a      	b.n	8000650 <messageRoutine+0x170>
		case 3:
			HAL_UART_Receive(&huart2, (uint8_t *)&value, 4, UART_TIMEOUT);
 800059a:	f107 0108 	add.w	r1, r7, #8
 800059e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005a2:	2204      	movs	r2, #4
 80005a4:	482e      	ldr	r0, [pc, #184]	; (8000660 <messageRoutine+0x180>)
 80005a6:	f003 fa36 	bl	8003a16 <HAL_UART_Receive>
			if(value != 0){
 80005aa:	68bb      	ldr	r3, [r7, #8]
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d04c      	beq.n	800064a <messageRoutine+0x16a>
				if(value < MIN_FREQ || value > MAX_FREQ){
 80005b0:	68bb      	ldr	r3, [r7, #8]
 80005b2:	2b13      	cmp	r3, #19
 80005b4:	d904      	bls.n	80005c0 <messageRoutine+0xe0>
 80005b6:	68bb      	ldr	r3, [r7, #8]
 80005b8:	f644 6220 	movw	r2, #20000	; 0x4e20
 80005bc:	4293      	cmp	r3, r2
 80005be:	d902      	bls.n	80005c6 <messageRoutine+0xe6>
					state = 7; // Wrong value inserted, go to...
 80005c0:	4b25      	ldr	r3, [pc, #148]	; (8000658 <messageRoutine+0x178>)
 80005c2:	2207      	movs	r2, #7
 80005c4:	701a      	strb	r2, [r3, #0]
				}
				sig->fCentral = value;
 80005c6:	68ba      	ldr	r2, [r7, #8]
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	601a      	str	r2, [r3, #0]
				state++;
 80005cc:	4b22      	ldr	r3, [pc, #136]	; (8000658 <messageRoutine+0x178>)
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	3301      	adds	r3, #1
 80005d2:	b2da      	uxtb	r2, r3
 80005d4:	4b20      	ldr	r3, [pc, #128]	; (8000658 <messageRoutine+0x178>)
 80005d6:	701a      	strb	r2, [r3, #0]
			}
		  break;
 80005d8:	e037      	b.n	800064a <messageRoutine+0x16a>
		case 4:
			HAL_UART_Transmit(&huart2, (uint8_t *)msgRange, strlen(msgRange), UART_TIMEOUT);
 80005da:	4b24      	ldr	r3, [pc, #144]	; (800066c <messageRoutine+0x18c>)
 80005dc:	681c      	ldr	r4, [r3, #0]
 80005de:	4b23      	ldr	r3, [pc, #140]	; (800066c <messageRoutine+0x18c>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	4618      	mov	r0, r3
 80005e4:	f7ff fdf8 	bl	80001d8 <strlen>
 80005e8:	4603      	mov	r3, r0
 80005ea:	b29a      	uxth	r2, r3
 80005ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005f0:	4621      	mov	r1, r4
 80005f2:	481b      	ldr	r0, [pc, #108]	; (8000660 <messageRoutine+0x180>)
 80005f4:	f003 f97d 	bl	80038f2 <HAL_UART_Transmit>
			state++;
 80005f8:	4b17      	ldr	r3, [pc, #92]	; (8000658 <messageRoutine+0x178>)
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	3301      	adds	r3, #1
 80005fe:	b2da      	uxtb	r2, r3
 8000600:	4b15      	ldr	r3, [pc, #84]	; (8000658 <messageRoutine+0x178>)
 8000602:	701a      	strb	r2, [r3, #0]
			break;
 8000604:	e024      	b.n	8000650 <messageRoutine+0x170>
		case 5:
			HAL_UART_Receive(&huart2, (uint8_t *)&value, 4, UART_TIMEOUT);
 8000606:	f107 0108 	add.w	r1, r7, #8
 800060a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800060e:	2204      	movs	r2, #4
 8000610:	4813      	ldr	r0, [pc, #76]	; (8000660 <messageRoutine+0x180>)
 8000612:	f003 fa00 	bl	8003a16 <HAL_UART_Receive>
			if(value != 0){
 8000616:	68bb      	ldr	r3, [r7, #8]
 8000618:	2b00      	cmp	r3, #0
 800061a:	d018      	beq.n	800064e <messageRoutine+0x16e>
				if(value < MIN_FREQ || value > MAX_FREQ){
 800061c:	68bb      	ldr	r3, [r7, #8]
 800061e:	2b13      	cmp	r3, #19
 8000620:	d904      	bls.n	800062c <messageRoutine+0x14c>
 8000622:	68bb      	ldr	r3, [r7, #8]
 8000624:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000628:	4293      	cmp	r3, r2
 800062a:	d902      	bls.n	8000632 <messageRoutine+0x152>
					state = 8; // Wrong value inserted, go to...
 800062c:	4b0a      	ldr	r3, [pc, #40]	; (8000658 <messageRoutine+0x178>)
 800062e:	2208      	movs	r2, #8
 8000630:	701a      	strb	r2, [r3, #0]
				}
				sig->fRange = value;
 8000632:	68ba      	ldr	r2, [r7, #8]
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	605a      	str	r2, [r3, #4]
				state++;
 8000638:	4b07      	ldr	r3, [pc, #28]	; (8000658 <messageRoutine+0x178>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	3301      	adds	r3, #1
 800063e:	b2da      	uxtb	r2, r3
 8000640:	4b05      	ldr	r3, [pc, #20]	; (8000658 <messageRoutine+0x178>)
 8000642:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000644:	e003      	b.n	800064e <messageRoutine+0x16e>
			break;
 8000646:	bf00      	nop
 8000648:	e002      	b.n	8000650 <messageRoutine+0x170>
		  break;
 800064a:	bf00      	nop
 800064c:	e000      	b.n	8000650 <messageRoutine+0x170>
			break;
 800064e:	bf00      	nop
			break;

	}


}
 8000650:	bf00      	nop
 8000652:	3714      	adds	r7, #20
 8000654:	46bd      	mov	sp, r7
 8000656:	bd90      	pop	{r4, r7, pc}
 8000658:	2000003c 	.word	0x2000003c
 800065c:	20000000 	.word	0x20000000
 8000660:	200011b0 	.word	0x200011b0
 8000664:	20000004 	.word	0x20000004
 8000668:	20000008 	.word	0x20000008
 800066c:	2000000c 	.word	0x2000000c

08000670 <normalizeOverHalfPi>:
static const float b3 =  0.456159;
static const float b5 = -0.053910;

static const float pi =  3.141593;

static float normalizeOverHalfPi(float x){
 8000670:	b480      	push	{r7}
 8000672:	b085      	sub	sp, #20
 8000674:	af00      	add	r7, sp, #0
 8000676:	ed87 0a01 	vstr	s0, [r7, #4]
	float retVal = (float)-1/2 + 2*x/pi;
 800067a:	edd7 7a01 	vldr	s15, [r7, #4]
 800067e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8000682:	eddf 6a0a 	vldr	s13, [pc, #40]	; 80006ac <normalizeOverHalfPi+0x3c>
 8000686:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800068a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800068e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000692:	edc7 7a03 	vstr	s15, [r7, #12]
	return retVal;
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	ee07 3a90 	vmov	s15, r3
}
 800069c:	eeb0 0a67 	vmov.f32	s0, s15
 80006a0:	3714      	adds	r7, #20
 80006a2:	46bd      	mov	sp, r7
 80006a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop
 80006ac:	40490fdc 	.word	0x40490fdc

080006b0 <formatTime>:

static void formatTime(float *tArray, const float period, const int nPoints){
 80006b0:	b480      	push	{r7}
 80006b2:	b087      	sub	sp, #28
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	60f8      	str	r0, [r7, #12]
 80006b8:	ed87 0a02 	vstr	s0, [r7, #8]
 80006bc:	6079      	str	r1, [r7, #4]
	//@TODO: check if the size is equivalent to nPoints...
	// if not, return something...
	tArray[0] = 0;
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	f04f 0200 	mov.w	r2, #0
 80006c4:	601a      	str	r2, [r3, #0]
	float sampleSpace = (float)(period/(nPoints-1));
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	3b01      	subs	r3, #1
 80006ca:	ee07 3a90 	vmov	s15, r3
 80006ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80006d2:	edd7 6a02 	vldr	s13, [r7, #8]
 80006d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80006da:	edc7 7a04 	vstr	s15, [r7, #16]
	for(int i=0; i<nPoints-1; i++){
 80006de:	2300      	movs	r3, #0
 80006e0:	617b      	str	r3, [r7, #20]
 80006e2:	e013      	b.n	800070c <formatTime+0x5c>
		tArray[i+1] = tArray[i]+sampleSpace;
 80006e4:	697b      	ldr	r3, [r7, #20]
 80006e6:	009b      	lsls	r3, r3, #2
 80006e8:	68fa      	ldr	r2, [r7, #12]
 80006ea:	4413      	add	r3, r2
 80006ec:	ed93 7a00 	vldr	s14, [r3]
 80006f0:	697b      	ldr	r3, [r7, #20]
 80006f2:	3301      	adds	r3, #1
 80006f4:	009b      	lsls	r3, r3, #2
 80006f6:	68fa      	ldr	r2, [r7, #12]
 80006f8:	4413      	add	r3, r2
 80006fa:	edd7 7a04 	vldr	s15, [r7, #16]
 80006fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000702:	edc3 7a00 	vstr	s15, [r3]
	for(int i=0; i<nPoints-1; i++){
 8000706:	697b      	ldr	r3, [r7, #20]
 8000708:	3301      	adds	r3, #1
 800070a:	617b      	str	r3, [r7, #20]
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	3b01      	subs	r3, #1
 8000710:	697a      	ldr	r2, [r7, #20]
 8000712:	429a      	cmp	r2, r3
 8000714:	dbe6      	blt.n	80006e4 <formatTime+0x34>
	}
}
 8000716:	bf00      	nop
 8000718:	bf00      	nop
 800071a:	371c      	adds	r7, #28
 800071c:	46bd      	mov	sp, r7
 800071e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000722:	4770      	bx	lr

08000724 <negateArray>:

static void negateArray(float *arrayToNegate, const float *array, uint32_t size){
 8000724:	b5b0      	push	{r4, r5, r7, lr}
 8000726:	b088      	sub	sp, #32
 8000728:	af00      	add	r7, sp, #0
 800072a:	60f8      	str	r0, [r7, #12]
 800072c:	60b9      	str	r1, [r7, #8]
 800072e:	607a      	str	r2, [r7, #4]
 8000730:	466b      	mov	r3, sp
 8000732:	461d      	mov	r5, r3
	float tempArray[size];
 8000734:	687c      	ldr	r4, [r7, #4]
 8000736:	4623      	mov	r3, r4
 8000738:	3b01      	subs	r3, #1
 800073a:	61bb      	str	r3, [r7, #24]
 800073c:	4620      	mov	r0, r4
 800073e:	f04f 0100 	mov.w	r1, #0
 8000742:	f04f 0200 	mov.w	r2, #0
 8000746:	f04f 0300 	mov.w	r3, #0
 800074a:	014b      	lsls	r3, r1, #5
 800074c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8000750:	0142      	lsls	r2, r0, #5
 8000752:	4620      	mov	r0, r4
 8000754:	f04f 0100 	mov.w	r1, #0
 8000758:	f04f 0200 	mov.w	r2, #0
 800075c:	f04f 0300 	mov.w	r3, #0
 8000760:	014b      	lsls	r3, r1, #5
 8000762:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8000766:	0142      	lsls	r2, r0, #5
 8000768:	00a3      	lsls	r3, r4, #2
 800076a:	3307      	adds	r3, #7
 800076c:	08db      	lsrs	r3, r3, #3
 800076e:	00db      	lsls	r3, r3, #3
 8000770:	ebad 0d03 	sub.w	sp, sp, r3
 8000774:	466b      	mov	r3, sp
 8000776:	3303      	adds	r3, #3
 8000778:	089b      	lsrs	r3, r3, #2
 800077a:	009b      	lsls	r3, r3, #2
 800077c:	617b      	str	r3, [r7, #20]
	memcpy(tempArray, array, sizeof(float)*size);
 800077e:	6978      	ldr	r0, [r7, #20]
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	009b      	lsls	r3, r3, #2
 8000784:	461a      	mov	r2, r3
 8000786:	68b9      	ldr	r1, [r7, #8]
 8000788:	f004 f8f4 	bl	8004974 <memcpy>

	for(int i=0; i<size; i++){
 800078c:	2300      	movs	r3, #0
 800078e:	61fb      	str	r3, [r7, #28]
 8000790:	e01d      	b.n	80007ce <negateArray+0xaa>
		if(tempArray[i] == 0)
 8000792:	697a      	ldr	r2, [r7, #20]
 8000794:	69fb      	ldr	r3, [r7, #28]
 8000796:	009b      	lsls	r3, r3, #2
 8000798:	4413      	add	r3, r2
 800079a:	edd3 7a00 	vldr	s15, [r3]
 800079e:	eef5 7a40 	vcmp.f32	s15, #0.0
 80007a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007a6:	d00e      	beq.n	80007c6 <negateArray+0xa2>
			continue;

		tempArray[i] = -tempArray[i];
 80007a8:	697a      	ldr	r2, [r7, #20]
 80007aa:	69fb      	ldr	r3, [r7, #28]
 80007ac:	009b      	lsls	r3, r3, #2
 80007ae:	4413      	add	r3, r2
 80007b0:	edd3 7a00 	vldr	s15, [r3]
 80007b4:	eef1 7a67 	vneg.f32	s15, s15
 80007b8:	697a      	ldr	r2, [r7, #20]
 80007ba:	69fb      	ldr	r3, [r7, #28]
 80007bc:	009b      	lsls	r3, r3, #2
 80007be:	4413      	add	r3, r2
 80007c0:	edc3 7a00 	vstr	s15, [r3]
 80007c4:	e000      	b.n	80007c8 <negateArray+0xa4>
			continue;
 80007c6:	bf00      	nop
	for(int i=0; i<size; i++){
 80007c8:	69fb      	ldr	r3, [r7, #28]
 80007ca:	3301      	adds	r3, #1
 80007cc:	61fb      	str	r3, [r7, #28]
 80007ce:	69fb      	ldr	r3, [r7, #28]
 80007d0:	687a      	ldr	r2, [r7, #4]
 80007d2:	429a      	cmp	r2, r3
 80007d4:	d8dd      	bhi.n	8000792 <negateArray+0x6e>
	}

	memcpy(arrayToNegate, tempArray, sizeof(float) * size);
 80007d6:	6979      	ldr	r1, [r7, #20]
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	009b      	lsls	r3, r3, #2
 80007dc:	461a      	mov	r2, r3
 80007de:	68f8      	ldr	r0, [r7, #12]
 80007e0:	f004 f8c8 	bl	8004974 <memcpy>
 80007e4:	46ad      	mov	sp, r5
}
 80007e6:	bf00      	nop
 80007e8:	3720      	adds	r7, #32
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bdb0      	pop	{r4, r5, r7, pc}
	...

080007f0 <computeSinCos>:

void computeSinCos(float *sin, float *cos, const int nPoints){
 80007f0:	b590      	push	{r4, r7, lr}
 80007f2:	b08f      	sub	sp, #60	; 0x3c
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	60f8      	str	r0, [r7, #12]
 80007f8:	60b9      	str	r1, [r7, #8]
 80007fa:	607a      	str	r2, [r7, #4]
 80007fc:	466b      	mov	r3, sp
 80007fe:	461c      	mov	r4, r3
	const uint16_t normNPoints = nPoints/4; // i need "nPoints" points over a period, but here i compute only a quarter of a period
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	2b00      	cmp	r3, #0
 8000804:	da00      	bge.n	8000808 <computeSinCos+0x18>
 8000806:	3303      	adds	r3, #3
 8000808:	109b      	asrs	r3, r3, #2
 800080a:	857b      	strh	r3, [r7, #42]	; 0x2a
	float t[normNPoints];
 800080c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800080e:	3b01      	subs	r3, #1
 8000810:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000812:	8d78      	ldrh	r0, [r7, #42]	; 0x2a
 8000814:	f04f 0100 	mov.w	r1, #0
 8000818:	f04f 0200 	mov.w	r2, #0
 800081c:	f04f 0300 	mov.w	r3, #0
 8000820:	014b      	lsls	r3, r1, #5
 8000822:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8000826:	0142      	lsls	r2, r0, #5
 8000828:	8d78      	ldrh	r0, [r7, #42]	; 0x2a
 800082a:	f04f 0100 	mov.w	r1, #0
 800082e:	f04f 0200 	mov.w	r2, #0
 8000832:	f04f 0300 	mov.w	r3, #0
 8000836:	014b      	lsls	r3, r1, #5
 8000838:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800083c:	0142      	lsls	r2, r0, #5
 800083e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000840:	009b      	lsls	r3, r3, #2
 8000842:	3307      	adds	r3, #7
 8000844:	08db      	lsrs	r3, r3, #3
 8000846:	00db      	lsls	r3, r3, #3
 8000848:	ebad 0d03 	sub.w	sp, sp, r3
 800084c:	466b      	mov	r3, sp
 800084e:	3303      	adds	r3, #3
 8000850:	089b      	lsrs	r3, r3, #2
 8000852:	009b      	lsls	r3, r3, #2
 8000854:	633b      	str	r3, [r7, #48]	; 0x30
	static float s;
	float tempSin[normNPoints];
 8000856:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000858:	3b01      	subs	r3, #1
 800085a:	637b      	str	r3, [r7, #52]	; 0x34
 800085c:	8d78      	ldrh	r0, [r7, #42]	; 0x2a
 800085e:	f04f 0100 	mov.w	r1, #0
 8000862:	f04f 0200 	mov.w	r2, #0
 8000866:	f04f 0300 	mov.w	r3, #0
 800086a:	014b      	lsls	r3, r1, #5
 800086c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8000870:	0142      	lsls	r2, r0, #5
 8000872:	8d78      	ldrh	r0, [r7, #42]	; 0x2a
 8000874:	f04f 0100 	mov.w	r1, #0
 8000878:	f04f 0200 	mov.w	r2, #0
 800087c:	f04f 0300 	mov.w	r3, #0
 8000880:	014b      	lsls	r3, r1, #5
 8000882:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8000886:	0142      	lsls	r2, r0, #5
 8000888:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800088a:	009b      	lsls	r3, r3, #2
 800088c:	3307      	adds	r3, #7
 800088e:	08db      	lsrs	r3, r3, #3
 8000890:	00db      	lsls	r3, r3, #3
 8000892:	ebad 0d03 	sub.w	sp, sp, r3
 8000896:	466b      	mov	r3, sp
 8000898:	3303      	adds	r3, #3
 800089a:	089b      	lsrs	r3, r3, #2
 800089c:	009b      	lsls	r3, r3, #2
 800089e:	623b      	str	r3, [r7, #32]
	float tempCos[normNPoints];
 80008a0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80008a2:	3b01      	subs	r3, #1
 80008a4:	61fb      	str	r3, [r7, #28]
 80008a6:	8d78      	ldrh	r0, [r7, #42]	; 0x2a
 80008a8:	f04f 0100 	mov.w	r1, #0
 80008ac:	f04f 0200 	mov.w	r2, #0
 80008b0:	f04f 0300 	mov.w	r3, #0
 80008b4:	014b      	lsls	r3, r1, #5
 80008b6:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80008ba:	0142      	lsls	r2, r0, #5
 80008bc:	8d78      	ldrh	r0, [r7, #42]	; 0x2a
 80008be:	f04f 0100 	mov.w	r1, #0
 80008c2:	f04f 0200 	mov.w	r2, #0
 80008c6:	f04f 0300 	mov.w	r3, #0
 80008ca:	014b      	lsls	r3, r1, #5
 80008cc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80008d0:	0142      	lsls	r2, r0, #5
 80008d2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80008d4:	009b      	lsls	r3, r3, #2
 80008d6:	3307      	adds	r3, #7
 80008d8:	08db      	lsrs	r3, r3, #3
 80008da:	00db      	lsls	r3, r3, #3
 80008dc:	ebad 0d03 	sub.w	sp, sp, r3
 80008e0:	466b      	mov	r3, sp
 80008e2:	3303      	adds	r3, #3
 80008e4:	089b      	lsrs	r3, r3, #2
 80008e6:	009b      	lsls	r3, r3, #2
 80008e8:	61bb      	str	r3, [r7, #24]
	const float period = pi/2;
 80008ea:	eddf 6a5c 	vldr	s13, [pc, #368]	; 8000a5c <computeSinCos+0x26c>
 80008ee:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80008f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80008f6:	edc7 7a05 	vstr	s15, [r7, #20]
    // Build the time array from 0 to pi/2
	formatTime(t, period, normNPoints);
 80008fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80008fc:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80008fe:	4611      	mov	r1, r2
 8000900:	ed97 0a05 	vldr	s0, [r7, #20]
 8000904:	4618      	mov	r0, r3
 8000906:	f7ff fed3 	bl	80006b0 <formatTime>
	for(int i=0; i<normNPoints; i++){
 800090a:	2300      	movs	r3, #0
 800090c:	627b      	str	r3, [r7, #36]	; 0x24
 800090e:	e08d      	b.n	8000a2c <computeSinCos+0x23c>
		s = normalizeOverHalfPi(t[i]);
 8000910:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000914:	009b      	lsls	r3, r3, #2
 8000916:	4413      	add	r3, r2
 8000918:	edd3 7a00 	vldr	s15, [r3]
 800091c:	eeb0 0a67 	vmov.f32	s0, s15
 8000920:	f7ff fea6 	bl	8000670 <normalizeOverHalfPi>
 8000924:	eef0 7a40 	vmov.f32	s15, s0
 8000928:	4b4d      	ldr	r3, [pc, #308]	; (8000a60 <computeSinCos+0x270>)
 800092a:	edc3 7a00 	vstr	s15, [r3]
		tempSin[i] = a0+s*(-b1 + s*(a2 + s*(-b3 + s*(a4 + s*(-b5 + s*a6)))));
 800092e:	4b4c      	ldr	r3, [pc, #304]	; (8000a60 <computeSinCos+0x270>)
 8000930:	edd3 7a00 	vldr	s15, [r3]
 8000934:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8000a64 <computeSinCos+0x274>
 8000938:	ee67 7a87 	vmul.f32	s15, s15, s14
 800093c:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8000a68 <computeSinCos+0x278>
 8000940:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8000944:	4b46      	ldr	r3, [pc, #280]	; (8000a60 <computeSinCos+0x270>)
 8000946:	edd3 7a00 	vldr	s15, [r3]
 800094a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800094e:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8000a6c <computeSinCos+0x27c>
 8000952:	ee37 7a87 	vadd.f32	s14, s15, s14
 8000956:	4b42      	ldr	r3, [pc, #264]	; (8000a60 <computeSinCos+0x270>)
 8000958:	edd3 7a00 	vldr	s15, [r3]
 800095c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000960:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8000a70 <computeSinCos+0x280>
 8000964:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8000968:	4b3d      	ldr	r3, [pc, #244]	; (8000a60 <computeSinCos+0x270>)
 800096a:	edd3 7a00 	vldr	s15, [r3]
 800096e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000972:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8000a74 <computeSinCos+0x284>
 8000976:	ee37 7a87 	vadd.f32	s14, s15, s14
 800097a:	4b39      	ldr	r3, [pc, #228]	; (8000a60 <computeSinCos+0x270>)
 800097c:	edd3 7a00 	vldr	s15, [r3]
 8000980:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000984:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8000a78 <computeSinCos+0x288>
 8000988:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800098c:	4b34      	ldr	r3, [pc, #208]	; (8000a60 <computeSinCos+0x270>)
 800098e:	edd3 7a00 	vldr	s15, [r3]
 8000992:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000996:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8000a7c <computeSinCos+0x28c>
 800099a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800099e:	6a3a      	ldr	r2, [r7, #32]
 80009a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009a2:	009b      	lsls	r3, r3, #2
 80009a4:	4413      	add	r3, r2
 80009a6:	edc3 7a00 	vstr	s15, [r3]
		tempCos[i] = a0+s*(b1+s*(a2 + s*(b3 + s*(a4 + s*(b5 + s*a6)))));
 80009aa:	4b2d      	ldr	r3, [pc, #180]	; (8000a60 <computeSinCos+0x270>)
 80009ac:	edd3 7a00 	vldr	s15, [r3]
 80009b0:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8000a64 <computeSinCos+0x274>
 80009b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80009b8:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8000a68 <computeSinCos+0x278>
 80009bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80009c0:	4b27      	ldr	r3, [pc, #156]	; (8000a60 <computeSinCos+0x270>)
 80009c2:	edd3 7a00 	vldr	s15, [r3]
 80009c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009ca:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8000a6c <computeSinCos+0x27c>
 80009ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80009d2:	4b23      	ldr	r3, [pc, #140]	; (8000a60 <computeSinCos+0x270>)
 80009d4:	edd3 7a00 	vldr	s15, [r3]
 80009d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009dc:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8000a70 <computeSinCos+0x280>
 80009e0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80009e4:	4b1e      	ldr	r3, [pc, #120]	; (8000a60 <computeSinCos+0x270>)
 80009e6:	edd3 7a00 	vldr	s15, [r3]
 80009ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009ee:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8000a74 <computeSinCos+0x284>
 80009f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80009f6:	4b1a      	ldr	r3, [pc, #104]	; (8000a60 <computeSinCos+0x270>)
 80009f8:	edd3 7a00 	vldr	s15, [r3]
 80009fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a00:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8000a78 <computeSinCos+0x288>
 8000a04:	ee37 7a87 	vadd.f32	s14, s15, s14
 8000a08:	4b15      	ldr	r3, [pc, #84]	; (8000a60 <computeSinCos+0x270>)
 8000a0a:	edd3 7a00 	vldr	s15, [r3]
 8000a0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a12:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8000a7c <computeSinCos+0x28c>
 8000a16:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000a1a:	69ba      	ldr	r2, [r7, #24]
 8000a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a1e:	009b      	lsls	r3, r3, #2
 8000a20:	4413      	add	r3, r2
 8000a22:	edc3 7a00 	vstr	s15, [r3]
	for(int i=0; i<normNPoints; i++){
 8000a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a28:	3301      	adds	r3, #1
 8000a2a:	627b      	str	r3, [r7, #36]	; 0x24
 8000a2c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000a2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a30:	429a      	cmp	r2, r3
 8000a32:	f6ff af6d 	blt.w	8000910 <computeSinCos+0x120>
	}

	memcpy(sin, tempSin, sizeof(float) * normNPoints);
 8000a36:	6a39      	ldr	r1, [r7, #32]
 8000a38:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000a3a:	009b      	lsls	r3, r3, #2
 8000a3c:	461a      	mov	r2, r3
 8000a3e:	68f8      	ldr	r0, [r7, #12]
 8000a40:	f003 ff98 	bl	8004974 <memcpy>
	memcpy(cos, tempCos, sizeof(float) * normNPoints);
 8000a44:	69b9      	ldr	r1, [r7, #24]
 8000a46:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000a48:	009b      	lsls	r3, r3, #2
 8000a4a:	461a      	mov	r2, r3
 8000a4c:	68b8      	ldr	r0, [r7, #8]
 8000a4e:	f003 ff91 	bl	8004974 <memcpy>
 8000a52:	46a5      	mov	sp, r4
}
 8000a54:	bf00      	nop
 8000a56:	373c      	adds	r7, #60	; 0x3c
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd90      	pop	{r4, r7, pc}
 8000a5c:	40490fdc 	.word	0x40490fdc
 8000a60:	20000040 	.word	0x20000040
 8000a64:	bc69d51b 	.word	0xbc69d51b
 8000a68:	bd5cd0bb 	.word	0xbd5cd0bb
 8000a6c:	3e378dd6 	.word	0x3e378dd6
 8000a70:	3ee98dac 	.word	0x3ee98dac
 8000a74:	bf5f5233 	.word	0xbf5f5233
 8000a78:	bf8e2a6f 	.word	0xbf8e2a6f
 8000a7c:	3f3504f7 	.word	0x3f3504f7

08000a80 <formatSin>:

void formatSin(float *signalToFormat, float *sin, float *cos){
 8000a80:	b580      	push	{r7, lr}
 8000a82:	f6ad 0d18 	subw	sp, sp, #2072	; 0x818
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	f107 030c 	add.w	r3, r7, #12
 8000a8c:	6018      	str	r0, [r3, #0]
 8000a8e:	f107 0308 	add.w	r3, r7, #8
 8000a92:	6019      	str	r1, [r3, #0]
 8000a94:	1d3b      	adds	r3, r7, #4
 8000a96:	601a      	str	r2, [r3, #0]
	float nSin[N_POINTS/4];
	float nCos[N_POINTS/4];
	uint32_t size = N_POINTS/4;
 8000a98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a9c:	f8c7 3810 	str.w	r3, [r7, #2064]	; 0x810

	for(int i=0; i<4; i++){
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	f8c7 3814 	str.w	r3, [r7, #2068]	; 0x814
 8000aa6:	e070      	b.n	8000b8a <formatSin+0x10a>
		if(i == 0){
 8000aa8:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d112      	bne.n	8000ad6 <formatSin+0x56>
			// First quadrant
			memcpy(&signalToFormat[i*size], sin, sizeof(float) * size);
 8000ab0:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8000ab4:	f8d7 2810 	ldr.w	r2, [r7, #2064]	; 0x810
 8000ab8:	fb02 f303 	mul.w	r3, r2, r3
 8000abc:	009b      	lsls	r3, r3, #2
 8000abe:	f107 020c 	add.w	r2, r7, #12
 8000ac2:	6812      	ldr	r2, [r2, #0]
 8000ac4:	18d0      	adds	r0, r2, r3
 8000ac6:	f8d7 3810 	ldr.w	r3, [r7, #2064]	; 0x810
 8000aca:	009a      	lsls	r2, r3, #2
 8000acc:	f107 0308 	add.w	r3, r7, #8
 8000ad0:	6819      	ldr	r1, [r3, #0]
 8000ad2:	f003 ff4f 	bl	8004974 <memcpy>
		}

		if(i == 1){
 8000ad6:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8000ada:	2b01      	cmp	r3, #1
 8000adc:	d111      	bne.n	8000b02 <formatSin+0x82>
			// Second quadrant
			memcpy(&signalToFormat[i*size], cos, sizeof(float) * size);
 8000ade:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8000ae2:	f8d7 2810 	ldr.w	r2, [r7, #2064]	; 0x810
 8000ae6:	fb02 f303 	mul.w	r3, r2, r3
 8000aea:	009b      	lsls	r3, r3, #2
 8000aec:	f107 020c 	add.w	r2, r7, #12
 8000af0:	6812      	ldr	r2, [r2, #0]
 8000af2:	18d0      	adds	r0, r2, r3
 8000af4:	f8d7 3810 	ldr.w	r3, [r7, #2064]	; 0x810
 8000af8:	009a      	lsls	r2, r3, #2
 8000afa:	1d3b      	adds	r3, r7, #4
 8000afc:	6819      	ldr	r1, [r3, #0]
 8000afe:	f003 ff39 	bl	8004974 <memcpy>
		}

		if(i == 2){
 8000b02:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8000b06:	2b02      	cmp	r3, #2
 8000b08:	d11b      	bne.n	8000b42 <formatSin+0xc2>
			// Third quadrant
			negateArray(nSin, sin, size);
 8000b0a:	f107 0308 	add.w	r3, r7, #8
 8000b0e:	f507 6082 	add.w	r0, r7, #1040	; 0x410
 8000b12:	f8d7 2810 	ldr.w	r2, [r7, #2064]	; 0x810
 8000b16:	6819      	ldr	r1, [r3, #0]
 8000b18:	f7ff fe04 	bl	8000724 <negateArray>
			memcpy(&signalToFormat[i*size], nSin, sizeof(float) * size);
 8000b1c:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8000b20:	f8d7 2810 	ldr.w	r2, [r7, #2064]	; 0x810
 8000b24:	fb02 f303 	mul.w	r3, r2, r3
 8000b28:	009b      	lsls	r3, r3, #2
 8000b2a:	f107 020c 	add.w	r2, r7, #12
 8000b2e:	6812      	ldr	r2, [r2, #0]
 8000b30:	18d0      	adds	r0, r2, r3
 8000b32:	f8d7 3810 	ldr.w	r3, [r7, #2064]	; 0x810
 8000b36:	009a      	lsls	r2, r3, #2
 8000b38:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	f003 ff19 	bl	8004974 <memcpy>
		}

		if(i == 3){
 8000b42:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8000b46:	2b03      	cmp	r3, #3
 8000b48:	d11a      	bne.n	8000b80 <formatSin+0x100>
			// Forth quadrant
			negateArray(nCos, cos, size);
 8000b4a:	1d3b      	adds	r3, r7, #4
 8000b4c:	f107 0010 	add.w	r0, r7, #16
 8000b50:	f8d7 2810 	ldr.w	r2, [r7, #2064]	; 0x810
 8000b54:	6819      	ldr	r1, [r3, #0]
 8000b56:	f7ff fde5 	bl	8000724 <negateArray>
			memcpy(&signalToFormat[i*size], nCos, sizeof(float) * size);
 8000b5a:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8000b5e:	f8d7 2810 	ldr.w	r2, [r7, #2064]	; 0x810
 8000b62:	fb02 f303 	mul.w	r3, r2, r3
 8000b66:	009b      	lsls	r3, r3, #2
 8000b68:	f107 020c 	add.w	r2, r7, #12
 8000b6c:	6812      	ldr	r2, [r2, #0]
 8000b6e:	18d0      	adds	r0, r2, r3
 8000b70:	f8d7 3810 	ldr.w	r3, [r7, #2064]	; 0x810
 8000b74:	009a      	lsls	r2, r3, #2
 8000b76:	f107 0310 	add.w	r3, r7, #16
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	f003 fefa 	bl	8004974 <memcpy>
	for(int i=0; i<4; i++){
 8000b80:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8000b84:	3301      	adds	r3, #1
 8000b86:	f8c7 3814 	str.w	r3, [r7, #2068]	; 0x814
 8000b8a:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8000b8e:	2b03      	cmp	r3, #3
 8000b90:	dd8a      	ble.n	8000aa8 <formatSin+0x28>
		}
	}
}
 8000b92:	bf00      	nop
 8000b94:	bf00      	nop
 8000b96:	f607 0718 	addw	r7, r7, #2072	; 0x818
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
	...

08000ba0 <convertToPWMlogic>:

void convertToPWMlogic(uint32_t *freqArray, const float *fullSin, Signal sig, uint32_t size){
 8000ba0:	b082      	sub	sp, #8
 8000ba2:	b480      	push	{r7}
 8000ba4:	b085      	sub	sp, #20
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	6078      	str	r0, [r7, #4]
 8000baa:	6039      	str	r1, [r7, #0]
 8000bac:	f107 0118 	add.w	r1, r7, #24
 8000bb0:	e881 000c 	stmia.w	r1, {r2, r3}
	float tempFreq = 0;
 8000bb4:	f04f 0300 	mov.w	r3, #0
 8000bb8:	60bb      	str	r3, [r7, #8]
	for(int i=0;i<size;i++){
 8000bba:	2300      	movs	r3, #0
 8000bbc:	60fb      	str	r3, [r7, #12]
 8000bbe:	e027      	b.n	8000c10 <convertToPWMlogic+0x70>
		tempFreq = sig.fCentral + fullSin[i] * sig.fRange;
 8000bc0:	69bb      	ldr	r3, [r7, #24]
 8000bc2:	ee07 3a90 	vmov	s15, r3
 8000bc6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	009b      	lsls	r3, r3, #2
 8000bce:	683a      	ldr	r2, [r7, #0]
 8000bd0:	4413      	add	r3, r2
 8000bd2:	edd3 6a00 	vldr	s13, [r3]
 8000bd6:	69fb      	ldr	r3, [r7, #28]
 8000bd8:	ee07 3a90 	vmov	s15, r3
 8000bdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000be0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000be4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000be8:	edc7 7a02 	vstr	s15, [r7, #8]
		// Now transform it to the ARR value for timer
		freqArray[i] = F_CLOCK/tempFreq;
 8000bec:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8000c28 <convertToPWMlogic+0x88>
 8000bf0:	ed97 7a02 	vldr	s14, [r7, #8]
 8000bf4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	009b      	lsls	r3, r3, #2
 8000bfc:	687a      	ldr	r2, [r7, #4]
 8000bfe:	4413      	add	r3, r2
 8000c00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c04:	ee17 2a90 	vmov	r2, s15
 8000c08:	601a      	str	r2, [r3, #0]
	for(int i=0;i<size;i++){
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	3301      	adds	r3, #1
 8000c0e:	60fb      	str	r3, [r7, #12]
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c14:	429a      	cmp	r2, r3
 8000c16:	d8d3      	bhi.n	8000bc0 <convertToPWMlogic+0x20>
	}
}
 8000c18:	bf00      	nop
 8000c1a:	bf00      	nop
 8000c1c:	3714      	adds	r7, #20
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	b002      	add	sp, #8
 8000c26:	4770      	bx	lr
 8000c28:	4ca037a0 	.word	0x4ca037a0

08000c2c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	607b      	str	r3, [r7, #4]
 8000c36:	4b10      	ldr	r3, [pc, #64]	; (8000c78 <MX_DMA_Init+0x4c>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	4a0f      	ldr	r2, [pc, #60]	; (8000c78 <MX_DMA_Init+0x4c>)
 8000c3c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c40:	6313      	str	r3, [r2, #48]	; 0x30
 8000c42:	4b0d      	ldr	r3, [pc, #52]	; (8000c78 <MX_DMA_Init+0x4c>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c4a:	607b      	str	r3, [r7, #4]
 8000c4c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000c4e:	2200      	movs	r2, #0
 8000c50:	2100      	movs	r1, #0
 8000c52:	200f      	movs	r0, #15
 8000c54:	f000 feab 	bl	80019ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000c58:	200f      	movs	r0, #15
 8000c5a:	f000 fec4 	bl	80019e6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000c5e:	2200      	movs	r2, #0
 8000c60:	2100      	movs	r1, #0
 8000c62:	2011      	movs	r0, #17
 8000c64:	f000 fea3 	bl	80019ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000c68:	2011      	movs	r0, #17
 8000c6a:	f000 febc 	bl	80019e6 <HAL_NVIC_EnableIRQ>

}
 8000c6e:	bf00      	nop
 8000c70:	3708      	adds	r7, #8
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	40023800 	.word	0x40023800

08000c7c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b08a      	sub	sp, #40	; 0x28
 8000c80:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c82:	f107 0314 	add.w	r3, r7, #20
 8000c86:	2200      	movs	r2, #0
 8000c88:	601a      	str	r2, [r3, #0]
 8000c8a:	605a      	str	r2, [r3, #4]
 8000c8c:	609a      	str	r2, [r3, #8]
 8000c8e:	60da      	str	r2, [r3, #12]
 8000c90:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c92:	2300      	movs	r3, #0
 8000c94:	613b      	str	r3, [r7, #16]
 8000c96:	4b31      	ldr	r3, [pc, #196]	; (8000d5c <MX_GPIO_Init+0xe0>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	4a30      	ldr	r2, [pc, #192]	; (8000d5c <MX_GPIO_Init+0xe0>)
 8000c9c:	f043 0304 	orr.w	r3, r3, #4
 8000ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca2:	4b2e      	ldr	r3, [pc, #184]	; (8000d5c <MX_GPIO_Init+0xe0>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	f003 0304 	and.w	r3, r3, #4
 8000caa:	613b      	str	r3, [r7, #16]
 8000cac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	60fb      	str	r3, [r7, #12]
 8000cb2:	4b2a      	ldr	r3, [pc, #168]	; (8000d5c <MX_GPIO_Init+0xe0>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	4a29      	ldr	r2, [pc, #164]	; (8000d5c <MX_GPIO_Init+0xe0>)
 8000cb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cbe:	4b27      	ldr	r3, [pc, #156]	; (8000d5c <MX_GPIO_Init+0xe0>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cc6:	60fb      	str	r3, [r7, #12]
 8000cc8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cca:	2300      	movs	r3, #0
 8000ccc:	60bb      	str	r3, [r7, #8]
 8000cce:	4b23      	ldr	r3, [pc, #140]	; (8000d5c <MX_GPIO_Init+0xe0>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd2:	4a22      	ldr	r2, [pc, #136]	; (8000d5c <MX_GPIO_Init+0xe0>)
 8000cd4:	f043 0301 	orr.w	r3, r3, #1
 8000cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cda:	4b20      	ldr	r3, [pc, #128]	; (8000d5c <MX_GPIO_Init+0xe0>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	f003 0301 	and.w	r3, r3, #1
 8000ce2:	60bb      	str	r3, [r7, #8]
 8000ce4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	607b      	str	r3, [r7, #4]
 8000cea:	4b1c      	ldr	r3, [pc, #112]	; (8000d5c <MX_GPIO_Init+0xe0>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	4a1b      	ldr	r2, [pc, #108]	; (8000d5c <MX_GPIO_Init+0xe0>)
 8000cf0:	f043 0302 	orr.w	r3, r3, #2
 8000cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf6:	4b19      	ldr	r3, [pc, #100]	; (8000d5c <MX_GPIO_Init+0xe0>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	f003 0302 	and.w	r3, r3, #2
 8000cfe:	607b      	str	r3, [r7, #4]
 8000d00:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d02:	2200      	movs	r2, #0
 8000d04:	2120      	movs	r1, #32
 8000d06:	4816      	ldr	r0, [pc, #88]	; (8000d60 <MX_GPIO_Init+0xe4>)
 8000d08:	f001 fba0 	bl	800244c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000d12:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000d16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d1c:	f107 0314 	add.w	r3, r7, #20
 8000d20:	4619      	mov	r1, r3
 8000d22:	4810      	ldr	r0, [pc, #64]	; (8000d64 <MX_GPIO_Init+0xe8>)
 8000d24:	f001 f9f6 	bl	8002114 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d28:	2320      	movs	r3, #32
 8000d2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d30:	2300      	movs	r3, #0
 8000d32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d34:	2300      	movs	r3, #0
 8000d36:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d38:	f107 0314 	add.w	r3, r7, #20
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	4808      	ldr	r0, [pc, #32]	; (8000d60 <MX_GPIO_Init+0xe4>)
 8000d40:	f001 f9e8 	bl	8002114 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 1);
 8000d44:	2201      	movs	r2, #1
 8000d46:	2100      	movs	r1, #0
 8000d48:	2028      	movs	r0, #40	; 0x28
 8000d4a:	f000 fe30 	bl	80019ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d4e:	2028      	movs	r0, #40	; 0x28
 8000d50:	f000 fe49 	bl	80019e6 <HAL_NVIC_EnableIRQ>

}
 8000d54:	bf00      	nop
 8000d56:	3728      	adds	r7, #40	; 0x28
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	40023800 	.word	0x40023800
 8000d60:	40020000 	.word	0x40020000
 8000d64:	40020800 	.word	0x40020800

08000d68 <LEDToggling>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void LEDToggling(GPIO_TypeDef *LEDPort, uint16_t LEDPin, uint32_t mstime){
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b086      	sub	sp, #24
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	60f8      	str	r0, [r7, #12]
 8000d70:	460b      	mov	r3, r1
 8000d72:	607a      	str	r2, [r7, #4]
 8000d74:	817b      	strh	r3, [r7, #10]
	static uint32_t sec = 0;
	uint32_t now;
	now = HAL_GetTick();
 8000d76:	f000 fd33 	bl	80017e0 <HAL_GetTick>
 8000d7a:	6178      	str	r0, [r7, #20]

	if((now - sec) > mstime){ //toggle every mstime (expressed in ms)
 8000d7c:	4b09      	ldr	r3, [pc, #36]	; (8000da4 <LEDToggling+0x3c>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	697a      	ldr	r2, [r7, #20]
 8000d82:	1ad3      	subs	r3, r2, r3
 8000d84:	687a      	ldr	r2, [r7, #4]
 8000d86:	429a      	cmp	r2, r3
 8000d88:	d207      	bcs.n	8000d9a <LEDToggling+0x32>
		HAL_GPIO_TogglePin(LEDPort, LEDPin);
 8000d8a:	897b      	ldrh	r3, [r7, #10]
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	68f8      	ldr	r0, [r7, #12]
 8000d90:	f001 fb75 	bl	800247e <HAL_GPIO_TogglePin>
		sec = now;
 8000d94:	4a03      	ldr	r2, [pc, #12]	; (8000da4 <LEDToggling+0x3c>)
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	6013      	str	r3, [r2, #0]
	}
}
 8000d9a:	bf00      	nop
 8000d9c:	3718      	adds	r7, #24
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	20001058 	.word	0x20001058

08000da8 <LEDFixed>:

void LEDFixed(GPIO_TypeDef *LEDPort, uint16_t LEDPin){
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
 8000db0:	460b      	mov	r3, r1
 8000db2:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(LEDPort, LEDPin, GPIO_PIN_SET);
 8000db4:	887b      	ldrh	r3, [r7, #2]
 8000db6:	2201      	movs	r2, #1
 8000db8:	4619      	mov	r1, r3
 8000dba:	6878      	ldr	r0, [r7, #4]
 8000dbc:	f001 fb46 	bl	800244c <HAL_GPIO_WritePin>
}
 8000dc0:	bf00      	nop
 8000dc2:	3708      	adds	r7, #8
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}

08000dc8 <LEDOff>:

void LEDOff(GPIO_TypeDef *LEDPort, uint16_t LEDPin){
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
 8000dd0:	460b      	mov	r3, r1
 8000dd2:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(LEDPort, LEDPin, GPIO_PIN_RESET);
 8000dd4:	887b      	ldrh	r3, [r7, #2]
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	4619      	mov	r1, r3
 8000dda:	6878      	ldr	r0, [r7, #4]
 8000ddc:	f001 fb36 	bl	800244c <HAL_GPIO_WritePin>
}
 8000de0:	bf00      	nop
 8000de2:	3708      	adds	r7, #8
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}

08000de8 <resetSignal>:

static void resetSignal(Signal sig){
 8000de8:	b480      	push	{r7}
 8000dea:	b085      	sub	sp, #20
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	1d3b      	adds	r3, r7, #4
 8000df0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	sig.fCentral = 0;
 8000df4:	2300      	movs	r3, #0
 8000df6:	607b      	str	r3, [r7, #4]
	sig.fRange = 0;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	60bb      	str	r3, [r7, #8]
	sig.fFreq = 0;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	60fb      	str	r3, [r7, #12]
	//sig.fSampling = 0;
}
 8000e00:	bf00      	nop
 8000e02:	3714      	adds	r7, #20
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr

08000e0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	f5ad 5dc0 	sub.w	sp, sp, #6144	; 0x1800
 8000e12:	b086      	sub	sp, #24
 8000e14:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

  Signal sig = {
 8000e16:	2300      	movs	r3, #0
 8000e18:	f507 52c0 	add.w	r2, r7, #6144	; 0x1800
 8000e1c:	f102 0204 	add.w	r2, r2, #4
 8000e20:	6013      	str	r3, [r2, #0]
 8000e22:	2300      	movs	r3, #0
 8000e24:	f507 52c0 	add.w	r2, r7, #6144	; 0x1800
 8000e28:	f102 0208 	add.w	r2, r2, #8
 8000e2c:	6013      	str	r3, [r2, #0]
 8000e2e:	2300      	movs	r3, #0
 8000e30:	f507 52c0 	add.w	r2, r7, #6144	; 0x1800
 8000e34:	f102 020c 	add.w	r2, r2, #12
 8000e38:	6013      	str	r3, [r2, #0]
  float fullSin[N_POINTS]; //1024
  float sin[N_POINTS/4]; // 256
  float cos[N_POINTS/4]; //256


  resetSignal(sig);
 8000e3a:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 8000e3e:	f103 0304 	add.w	r3, r3, #4
 8000e42:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000e46:	f7ff ffcf 	bl	8000de8 <resetSignal>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e4a:	f000 fc63 	bl	8001714 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e4e:	f000 f8bf 	bl	8000fd0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e52:	f7ff ff13 	bl	8000c7c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000e56:	f000 fbb9 	bl	80015cc <MX_USART2_UART_Init>
  MX_DMA_Init();
 8000e5a:	f7ff fee7 	bl	8000c2c <MX_DMA_Init>
  MX_TIM3_Init();
 8000e5e:	f000 fa13 	bl	8001288 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000e62:	f000 fa87 	bl	8001374 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart2, (uint8_t *)&rxBuff, 4);
 8000e66:	2204      	movs	r2, #4
 8000e68:	4951      	ldr	r1, [pc, #324]	; (8000fb0 <main+0x1a4>)
 8000e6a:	4852      	ldr	r0, [pc, #328]	; (8000fb4 <main+0x1a8>)
 8000e6c:	f002 fe75 	bl	8003b5a <HAL_UART_Receive_IT>

  // Format the sin
  computeSinCos(sin, cos, N_POINTS);
 8000e70:	f107 0110 	add.w	r1, r7, #16
 8000e74:	390c      	subs	r1, #12
 8000e76:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8000e7a:	3b0c      	subs	r3, #12
 8000e7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e80:	4618      	mov	r0, r3
 8000e82:	f7ff fcb5 	bl	80007f0 <computeSinCos>
  formatSin(fullSin, sin, cos);
 8000e86:	f107 0210 	add.w	r2, r7, #16
 8000e8a:	3a0c      	subs	r2, #12
 8000e8c:	f507 6182 	add.w	r1, r7, #1040	; 0x410
 8000e90:	390c      	subs	r1, #12
 8000e92:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8000e96:	3b0c      	subs	r3, #12
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f7ff fdf1 	bl	8000a80 <formatSin>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	// FSM management
	switch(appState){
 8000e9e:	4b46      	ldr	r3, [pc, #280]	; (8000fb8 <main+0x1ac>)
 8000ea0:	781b      	ldrb	r3, [r3, #0]
 8000ea2:	2b04      	cmp	r3, #4
 8000ea4:	d8fb      	bhi.n	8000e9e <main+0x92>
 8000ea6:	a201      	add	r2, pc, #4	; (adr r2, 8000eac <main+0xa0>)
 8000ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000eac:	08000ec1 	.word	0x08000ec1
 8000eb0:	08000f0f 	.word	0x08000f0f
 8000eb4:	08000f7f 	.word	0x08000f7f
 8000eb8:	08000f89 	.word	0x08000f89
 8000ebc:	08000f93 	.word	0x08000f93
		case init:
			LEDToggling(LD2_GPIO_Port, LD2_Pin, 500);
 8000ec0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000ec4:	2120      	movs	r1, #32
 8000ec6:	483d      	ldr	r0, [pc, #244]	; (8000fbc <main+0x1b0>)
 8000ec8:	f7ff ff4e 	bl	8000d68 <LEDToggling>
			messageRoutine(&sig, rxBuff);
 8000ecc:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 8000ed0:	f103 0304 	add.w	r3, r3, #4
 8000ed4:	4936      	ldr	r1, [pc, #216]	; (8000fb0 <main+0x1a4>)
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f7ff fb02 	bl	80004e0 <messageRoutine>

			if(sig.fCentral != 0 && sig.fFreq != 0 && sig.fRange != 0)
 8000edc:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 8000ee0:	f103 0304 	add.w	r3, r3, #4
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d05f      	beq.n	8000faa <main+0x19e>
 8000eea:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 8000eee:	f103 030c 	add.w	r3, r3, #12
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d058      	beq.n	8000faa <main+0x19e>
 8000ef8:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 8000efc:	f103 0308 	add.w	r3, r3, #8
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d051      	beq.n	8000faa <main+0x19e>
				appState = setup;
 8000f06:	4b2c      	ldr	r3, [pc, #176]	; (8000fb8 <main+0x1ac>)
 8000f08:	2201      	movs	r2, #1
 8000f0a:	701a      	strb	r2, [r3, #0]
			break;
 8000f0c:	e04d      	b.n	8000faa <main+0x19e>
		case setup:
			// In freqArray are stored all the period values for PWM
			convertToPWMlogic(freqArray, fullSin, sig, N_POINTS);
 8000f0e:	f507 6101 	add.w	r1, r7, #2064	; 0x810
 8000f12:	390c      	subs	r1, #12
 8000f14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f18:	9301      	str	r3, [sp, #4]
 8000f1a:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 8000f1e:	f103 030c 	add.w	r3, r3, #12
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	9300      	str	r3, [sp, #0]
 8000f26:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 8000f2a:	f103 0304 	add.w	r3, r3, #4
 8000f2e:	cb0c      	ldmia	r3, {r2, r3}
 8000f30:	4823      	ldr	r0, [pc, #140]	; (8000fc0 <main+0x1b4>)
 8000f32:	f7ff fe35 	bl	8000ba0 <convertToPWMlogic>

			// Compute refresh rate for sampling timer
			tSample = F_CLOCK/(N_POINTS * sig.fFreq); //20Hz -> 4101 --- 20kHz -> 4 refresh rate
 8000f36:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 8000f3a:	f103 030c 	add.w	r3, r3, #12
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	029b      	lsls	r3, r3, #10
 8000f42:	4a20      	ldr	r2, [pc, #128]	; (8000fc4 <main+0x1b8>)
 8000f44:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f48:	ee07 3a90 	vmov	s15, r3
 8000f4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f50:	4b1d      	ldr	r3, [pc, #116]	; (8000fc8 <main+0x1bc>)
 8000f52:	edc3 7a00 	vstr	s15, [r3]
			// Set this refresh rate to TIMn dedicated to sampling
			__HAL_TIM_SET_AUTORELOAD(&htim4, tSample);
 8000f56:	4b1c      	ldr	r3, [pc, #112]	; (8000fc8 <main+0x1bc>)
 8000f58:	edd3 7a00 	vldr	s15, [r3]
 8000f5c:	4b1b      	ldr	r3, [pc, #108]	; (8000fcc <main+0x1c0>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f64:	ee17 2a90 	vmov	r2, s15
 8000f68:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f6a:	4b17      	ldr	r3, [pc, #92]	; (8000fc8 <main+0x1bc>)
 8000f6c:	edd3 7a00 	vldr	s15, [r3]
 8000f70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f74:	ee17 2a90 	vmov	r2, s15
 8000f78:	4b14      	ldr	r3, [pc, #80]	; (8000fcc <main+0x1c0>)
 8000f7a:	60da      	str	r2, [r3, #12]
				UNUSED(tSample);
			#endif
			// Setup
			//spaceSample = (float)periodFreqMax/periodFreqMin;

			break;
 8000f7c:	e016      	b.n	8000fac <main+0x1a0>
		case run:
			LEDFixed(LD2_GPIO_Port, LD2_Pin);
 8000f7e:	2120      	movs	r1, #32
 8000f80:	480e      	ldr	r0, [pc, #56]	; (8000fbc <main+0x1b0>)
 8000f82:	f7ff ff11 	bl	8000da8 <LEDFixed>

			break;
 8000f86:	e011      	b.n	8000fac <main+0x1a0>
		case stop:
			LEDOff(LD2_GPIO_Port, LD2_Pin);
 8000f88:	2120      	movs	r1, #32
 8000f8a:	480c      	ldr	r0, [pc, #48]	; (8000fbc <main+0x1b0>)
 8000f8c:	f7ff ff1c 	bl	8000dc8 <LEDOff>
			break;
 8000f90:	e00c      	b.n	8000fac <main+0x1a0>
			//if(HAL_TIM_PWM_Stop_IT(&htim3, TIM_CHANNEL_1) != HAL_OK){
				// handle error
			//}

			// Reset signal
			resetSignal(sig);
 8000f92:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 8000f96:	f103 0304 	add.w	r3, r3, #4
 8000f9a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000f9e:	f7ff ff23 	bl	8000de8 <resetSignal>
			appState = init;
 8000fa2:	4b05      	ldr	r3, [pc, #20]	; (8000fb8 <main+0x1ac>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	701a      	strb	r2, [r3, #0]
			break;
 8000fa8:	e000      	b.n	8000fac <main+0x1a0>
			break;
 8000faa:	bf00      	nop
	switch(appState){
 8000fac:	e777      	b.n	8000e9e <main+0x92>
 8000fae:	bf00      	nop
 8000fb0:	20000048 	.word	0x20000048
 8000fb4:	200011b0 	.word	0x200011b0
 8000fb8:	20000044 	.word	0x20000044
 8000fbc:	40020000 	.word	0x40020000
 8000fc0:	20000058 	.word	0x20000058
 8000fc4:	0501bd00 	.word	0x0501bd00
 8000fc8:	20000054 	.word	0x20000054
 8000fcc:	20001060 	.word	0x20001060

08000fd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b094      	sub	sp, #80	; 0x50
 8000fd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fd6:	f107 0320 	add.w	r3, r7, #32
 8000fda:	2230      	movs	r2, #48	; 0x30
 8000fdc:	2100      	movs	r1, #0
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f003 fcd6 	bl	8004990 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fe4:	f107 030c 	add.w	r3, r7, #12
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
 8000fec:	605a      	str	r2, [r3, #4]
 8000fee:	609a      	str	r2, [r3, #8]
 8000ff0:	60da      	str	r2, [r3, #12]
 8000ff2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	60bb      	str	r3, [r7, #8]
 8000ff8:	4b28      	ldr	r3, [pc, #160]	; (800109c <SystemClock_Config+0xcc>)
 8000ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffc:	4a27      	ldr	r2, [pc, #156]	; (800109c <SystemClock_Config+0xcc>)
 8000ffe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001002:	6413      	str	r3, [r2, #64]	; 0x40
 8001004:	4b25      	ldr	r3, [pc, #148]	; (800109c <SystemClock_Config+0xcc>)
 8001006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001008:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800100c:	60bb      	str	r3, [r7, #8]
 800100e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001010:	2300      	movs	r3, #0
 8001012:	607b      	str	r3, [r7, #4]
 8001014:	4b22      	ldr	r3, [pc, #136]	; (80010a0 <SystemClock_Config+0xd0>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a21      	ldr	r2, [pc, #132]	; (80010a0 <SystemClock_Config+0xd0>)
 800101a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800101e:	6013      	str	r3, [r2, #0]
 8001020:	4b1f      	ldr	r3, [pc, #124]	; (80010a0 <SystemClock_Config+0xd0>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001028:	607b      	str	r3, [r7, #4]
 800102a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800102c:	2302      	movs	r3, #2
 800102e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001030:	2301      	movs	r3, #1
 8001032:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001034:	2310      	movs	r3, #16
 8001036:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001038:	2302      	movs	r3, #2
 800103a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800103c:	2300      	movs	r3, #0
 800103e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001040:	2310      	movs	r3, #16
 8001042:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001044:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001048:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800104a:	2304      	movs	r3, #4
 800104c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800104e:	2304      	movs	r3, #4
 8001050:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001052:	f107 0320 	add.w	r3, r7, #32
 8001056:	4618      	mov	r0, r3
 8001058:	f001 fa44 	bl	80024e4 <HAL_RCC_OscConfig>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001062:	f000 f881 	bl	8001168 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001066:	230f      	movs	r3, #15
 8001068:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800106a:	2302      	movs	r3, #2
 800106c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800106e:	2300      	movs	r3, #0
 8001070:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001072:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001076:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001078:	2300      	movs	r3, #0
 800107a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800107c:	f107 030c 	add.w	r3, r7, #12
 8001080:	2102      	movs	r1, #2
 8001082:	4618      	mov	r0, r3
 8001084:	f001 fca6 	bl	80029d4 <HAL_RCC_ClockConfig>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800108e:	f000 f86b 	bl	8001168 <Error_Handler>
  }
}
 8001092:	bf00      	nop
 8001094:	3750      	adds	r7, #80	; 0x50
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	40023800 	.word	0x40023800
 80010a0:	40007000 	.word	0x40007000

080010a4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a05      	ldr	r2, [pc, #20]	; (80010c8 <HAL_UART_RxCpltCallback+0x24>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d104      	bne.n	80010c0 <HAL_UART_RxCpltCallback+0x1c>
		HAL_UART_Receive_IT(huart, (uint8_t *)&rxBuff, 4);
 80010b6:	2204      	movs	r2, #4
 80010b8:	4904      	ldr	r1, [pc, #16]	; (80010cc <HAL_UART_RxCpltCallback+0x28>)
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	f002 fd4d 	bl	8003b5a <HAL_UART_Receive_IT>
}
 80010c0:	bf00      	nop
 80010c2:	3708      	adds	r7, #8
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	40004400 	.word	0x40004400
 80010cc:	20000048 	.word	0x20000048

080010d0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	80fb      	strh	r3, [r7, #6]
  static uint8_t prevState = 1;
  uint8_t newState;
  static uint32_t startTime = 0;
  uint32_t endTime;

  if(GPIO_Pin != B1_Pin)
 80010da:	88fb      	ldrh	r3, [r7, #6]
 80010dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80010e0:	d135      	bne.n	800114e <HAL_GPIO_EXTI_Callback+0x7e>
  	return;

  newState = HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 80010e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010e6:	481c      	ldr	r0, [pc, #112]	; (8001158 <HAL_GPIO_EXTI_Callback+0x88>)
 80010e8:	f001 f998 	bl	800241c <HAL_GPIO_ReadPin>
 80010ec:	4603      	mov	r3, r0
 80010ee:	73fb      	strb	r3, [r7, #15]

  if(newState == 0 && prevState == 1){
 80010f0:	7bfb      	ldrb	r3, [r7, #15]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d109      	bne.n	800110a <HAL_GPIO_EXTI_Callback+0x3a>
 80010f6:	4b19      	ldr	r3, [pc, #100]	; (800115c <HAL_GPIO_EXTI_Callback+0x8c>)
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d105      	bne.n	800110a <HAL_GPIO_EXTI_Callback+0x3a>
	startTime = HAL_GetTick();
 80010fe:	f000 fb6f 	bl	80017e0 <HAL_GetTick>
 8001102:	4603      	mov	r3, r0
 8001104:	4a16      	ldr	r2, [pc, #88]	; (8001160 <HAL_GPIO_EXTI_Callback+0x90>)
 8001106:	6013      	str	r3, [r2, #0]
 8001108:	e01d      	b.n	8001146 <HAL_GPIO_EXTI_Callback+0x76>
  } else if(newState == 1 && prevState == 0) {
 800110a:	7bfb      	ldrb	r3, [r7, #15]
 800110c:	2b01      	cmp	r3, #1
 800110e:	d11a      	bne.n	8001146 <HAL_GPIO_EXTI_Callback+0x76>
 8001110:	4b12      	ldr	r3, [pc, #72]	; (800115c <HAL_GPIO_EXTI_Callback+0x8c>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d116      	bne.n	8001146 <HAL_GPIO_EXTI_Callback+0x76>
	endTime = HAL_GetTick();
 8001118:	f000 fb62 	bl	80017e0 <HAL_GetTick>
 800111c:	60b8      	str	r0, [r7, #8]
	if((endTime - startTime) > 1000) //return to init
 800111e:	4b10      	ldr	r3, [pc, #64]	; (8001160 <HAL_GPIO_EXTI_Callback+0x90>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	68ba      	ldr	r2, [r7, #8]
 8001124:	1ad3      	subs	r3, r2, r3
 8001126:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800112a:	d903      	bls.n	8001134 <HAL_GPIO_EXTI_Callback+0x64>
		appState = reset;
 800112c:	4b0d      	ldr	r3, [pc, #52]	; (8001164 <HAL_GPIO_EXTI_Callback+0x94>)
 800112e:	2204      	movs	r2, #4
 8001130:	701a      	strb	r2, [r3, #0]
 8001132:	e008      	b.n	8001146 <HAL_GPIO_EXTI_Callback+0x76>
	else appState = (appState == stop) ? run:stop;
 8001134:	4b0b      	ldr	r3, [pc, #44]	; (8001164 <HAL_GPIO_EXTI_Callback+0x94>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	2b03      	cmp	r3, #3
 800113a:	d101      	bne.n	8001140 <HAL_GPIO_EXTI_Callback+0x70>
 800113c:	2202      	movs	r2, #2
 800113e:	e000      	b.n	8001142 <HAL_GPIO_EXTI_Callback+0x72>
 8001140:	2203      	movs	r2, #3
 8001142:	4b08      	ldr	r3, [pc, #32]	; (8001164 <HAL_GPIO_EXTI_Callback+0x94>)
 8001144:	701a      	strb	r2, [r3, #0]
  }

  prevState = newState;
 8001146:	4a05      	ldr	r2, [pc, #20]	; (800115c <HAL_GPIO_EXTI_Callback+0x8c>)
 8001148:	7bfb      	ldrb	r3, [r7, #15]
 800114a:	7013      	strb	r3, [r2, #0]
 800114c:	e000      	b.n	8001150 <HAL_GPIO_EXTI_Callback+0x80>
  	return;
 800114e:	bf00      	nop
}
 8001150:	3710      	adds	r7, #16
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	40020800 	.word	0x40020800
 800115c:	20000010 	.word	0x20000010
 8001160:	2000105c 	.word	0x2000105c
 8001164:	20000044 	.word	0x20000044

08001168 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800116c:	b672      	cpsid	i
}
 800116e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001170:	e7fe      	b.n	8001170 <Error_Handler+0x8>
	...

08001174 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800117a:	2300      	movs	r3, #0
 800117c:	607b      	str	r3, [r7, #4]
 800117e:	4b10      	ldr	r3, [pc, #64]	; (80011c0 <HAL_MspInit+0x4c>)
 8001180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001182:	4a0f      	ldr	r2, [pc, #60]	; (80011c0 <HAL_MspInit+0x4c>)
 8001184:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001188:	6453      	str	r3, [r2, #68]	; 0x44
 800118a:	4b0d      	ldr	r3, [pc, #52]	; (80011c0 <HAL_MspInit+0x4c>)
 800118c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800118e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001192:	607b      	str	r3, [r7, #4]
 8001194:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001196:	2300      	movs	r3, #0
 8001198:	603b      	str	r3, [r7, #0]
 800119a:	4b09      	ldr	r3, [pc, #36]	; (80011c0 <HAL_MspInit+0x4c>)
 800119c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119e:	4a08      	ldr	r2, [pc, #32]	; (80011c0 <HAL_MspInit+0x4c>)
 80011a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011a4:	6413      	str	r3, [r2, #64]	; 0x40
 80011a6:	4b06      	ldr	r3, [pc, #24]	; (80011c0 <HAL_MspInit+0x4c>)
 80011a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ae:	603b      	str	r3, [r7, #0]
 80011b0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80011b2:	2007      	movs	r0, #7
 80011b4:	f000 fbf0 	bl	8001998 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011b8:	bf00      	nop
 80011ba:	3708      	adds	r7, #8
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	40023800 	.word	0x40023800

080011c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011c8:	e7fe      	b.n	80011c8 <NMI_Handler+0x4>

080011ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011ca:	b480      	push	{r7}
 80011cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011ce:	e7fe      	b.n	80011ce <HardFault_Handler+0x4>

080011d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011d4:	e7fe      	b.n	80011d4 <MemManage_Handler+0x4>

080011d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011d6:	b480      	push	{r7}
 80011d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011da:	e7fe      	b.n	80011da <BusFault_Handler+0x4>

080011dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011e0:	e7fe      	b.n	80011e0 <UsageFault_Handler+0x4>

080011e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011e2:	b480      	push	{r7}
 80011e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011e6:	bf00      	nop
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr

080011f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011f4:	bf00      	nop
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr

080011fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011fe:	b480      	push	{r7}
 8001200:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001202:	bf00      	nop
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr

0800120c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001210:	f000 fad2 	bl	80017b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001214:	bf00      	nop
 8001216:	bd80      	pop	{r7, pc}

08001218 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 800121c:	4802      	ldr	r0, [pc, #8]	; (8001228 <DMA1_Stream4_IRQHandler+0x10>)
 800121e:	f000 fd3d 	bl	8001c9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001222:	bf00      	nop
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	200010f0 	.word	0x200010f0

0800122c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_up);
 8001230:	4802      	ldr	r0, [pc, #8]	; (800123c <DMA1_Stream6_IRQHandler+0x10>)
 8001232:	f000 fd33 	bl	8001c9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001236:	bf00      	nop
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	20001150 	.word	0x20001150

08001240 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001244:	4802      	ldr	r0, [pc, #8]	; (8001250 <USART2_IRQHandler+0x10>)
 8001246:	f002 fcb9 	bl	8003bbc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800124a:	bf00      	nop
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	200011b0 	.word	0x200011b0

08001254 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001258:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800125c:	f001 f92a 	bl	80024b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001260:	bf00      	nop
 8001262:	bd80      	pop	{r7, pc}

08001264 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001268:	4b06      	ldr	r3, [pc, #24]	; (8001284 <SystemInit+0x20>)
 800126a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800126e:	4a05      	ldr	r2, [pc, #20]	; (8001284 <SystemInit+0x20>)
 8001270:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001274:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001278:	bf00      	nop
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	e000ed00 	.word	0xe000ed00

08001288 <MX_TIM3_Init>:
DMA_HandleTypeDef hdma_tim3_ch1_trig;
DMA_HandleTypeDef hdma_tim4_up;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b08e      	sub	sp, #56	; 0x38
 800128c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800128e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001292:	2200      	movs	r2, #0
 8001294:	601a      	str	r2, [r3, #0]
 8001296:	605a      	str	r2, [r3, #4]
 8001298:	609a      	str	r2, [r3, #8]
 800129a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800129c:	f107 0320 	add.w	r3, r7, #32
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]
 80012a4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012a6:	1d3b      	adds	r3, r7, #4
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	605a      	str	r2, [r3, #4]
 80012ae:	609a      	str	r2, [r3, #8]
 80012b0:	60da      	str	r2, [r3, #12]
 80012b2:	611a      	str	r2, [r3, #16]
 80012b4:	615a      	str	r2, [r3, #20]
 80012b6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012b8:	4b2c      	ldr	r3, [pc, #176]	; (800136c <MX_TIM3_Init+0xe4>)
 80012ba:	4a2d      	ldr	r2, [pc, #180]	; (8001370 <MX_TIM3_Init+0xe8>)
 80012bc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80012be:	4b2b      	ldr	r3, [pc, #172]	; (800136c <MX_TIM3_Init+0xe4>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012c4:	4b29      	ldr	r3, [pc, #164]	; (800136c <MX_TIM3_Init+0xe4>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 800;
 80012ca:	4b28      	ldr	r3, [pc, #160]	; (800136c <MX_TIM3_Init+0xe4>)
 80012cc:	f44f 7248 	mov.w	r2, #800	; 0x320
 80012d0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012d2:	4b26      	ldr	r3, [pc, #152]	; (800136c <MX_TIM3_Init+0xe4>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012d8:	4b24      	ldr	r3, [pc, #144]	; (800136c <MX_TIM3_Init+0xe4>)
 80012da:	2200      	movs	r2, #0
 80012dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80012de:	4823      	ldr	r0, [pc, #140]	; (800136c <MX_TIM3_Init+0xe4>)
 80012e0:	f001 fd74 	bl	8002dcc <HAL_TIM_Base_Init>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80012ea:	f7ff ff3d 	bl	8001168 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012f2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80012f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012f8:	4619      	mov	r1, r3
 80012fa:	481c      	ldr	r0, [pc, #112]	; (800136c <MX_TIM3_Init+0xe4>)
 80012fc:	f001 fed0 	bl	80030a0 <HAL_TIM_ConfigClockSource>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001306:	f7ff ff2f 	bl	8001168 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800130a:	4818      	ldr	r0, [pc, #96]	; (800136c <MX_TIM3_Init+0xe4>)
 800130c:	f001 fdad 	bl	8002e6a <HAL_TIM_PWM_Init>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001316:	f7ff ff27 	bl	8001168 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800131a:	2300      	movs	r3, #0
 800131c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800131e:	2300      	movs	r3, #0
 8001320:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001322:	f107 0320 	add.w	r3, r7, #32
 8001326:	4619      	mov	r1, r3
 8001328:	4810      	ldr	r0, [pc, #64]	; (800136c <MX_TIM3_Init+0xe4>)
 800132a:	f002 fa27 	bl	800377c <HAL_TIMEx_MasterConfigSynchronization>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001334:	f7ff ff18 	bl	8001168 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001338:	2360      	movs	r3, #96	; 0x60
 800133a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800133c:	2300      	movs	r3, #0
 800133e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001340:	2300      	movs	r3, #0
 8001342:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001344:	2300      	movs	r3, #0
 8001346:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001348:	1d3b      	adds	r3, r7, #4
 800134a:	2200      	movs	r2, #0
 800134c:	4619      	mov	r1, r3
 800134e:	4807      	ldr	r0, [pc, #28]	; (800136c <MX_TIM3_Init+0xe4>)
 8001350:	f001 fde4 	bl	8002f1c <HAL_TIM_PWM_ConfigChannel>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800135a:	f7ff ff05 	bl	8001168 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800135e:	4803      	ldr	r0, [pc, #12]	; (800136c <MX_TIM3_Init+0xe4>)
 8001360:	f000 f8fa 	bl	8001558 <HAL_TIM_MspPostInit>

}
 8001364:	bf00      	nop
 8001366:	3738      	adds	r7, #56	; 0x38
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	200010a8 	.word	0x200010a8
 8001370:	40000400 	.word	0x40000400

08001374 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b086      	sub	sp, #24
 8001378:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800137a:	f107 0308 	add.w	r3, r7, #8
 800137e:	2200      	movs	r2, #0
 8001380:	601a      	str	r2, [r3, #0]
 8001382:	605a      	str	r2, [r3, #4]
 8001384:	609a      	str	r2, [r3, #8]
 8001386:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001388:	463b      	mov	r3, r7
 800138a:	2200      	movs	r2, #0
 800138c:	601a      	str	r2, [r3, #0]
 800138e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001390:	4b1c      	ldr	r3, [pc, #112]	; (8001404 <MX_TIM4_Init+0x90>)
 8001392:	4a1d      	ldr	r2, [pc, #116]	; (8001408 <MX_TIM4_Init+0x94>)
 8001394:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001396:	4b1b      	ldr	r3, [pc, #108]	; (8001404 <MX_TIM4_Init+0x90>)
 8001398:	2200      	movs	r2, #0
 800139a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800139c:	4b19      	ldr	r3, [pc, #100]	; (8001404 <MX_TIM4_Init+0x90>)
 800139e:	2200      	movs	r2, #0
 80013a0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 4;
 80013a2:	4b18      	ldr	r3, [pc, #96]	; (8001404 <MX_TIM4_Init+0x90>)
 80013a4:	2204      	movs	r2, #4
 80013a6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013a8:	4b16      	ldr	r3, [pc, #88]	; (8001404 <MX_TIM4_Init+0x90>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ae:	4b15      	ldr	r3, [pc, #84]	; (8001404 <MX_TIM4_Init+0x90>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80013b4:	4813      	ldr	r0, [pc, #76]	; (8001404 <MX_TIM4_Init+0x90>)
 80013b6:	f001 fd09 	bl	8002dcc <HAL_TIM_Base_Init>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <MX_TIM4_Init+0x50>
  {
    Error_Handler();
 80013c0:	f7ff fed2 	bl	8001168 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013c8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80013ca:	f107 0308 	add.w	r3, r7, #8
 80013ce:	4619      	mov	r1, r3
 80013d0:	480c      	ldr	r0, [pc, #48]	; (8001404 <MX_TIM4_Init+0x90>)
 80013d2:	f001 fe65 	bl	80030a0 <HAL_TIM_ConfigClockSource>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 80013dc:	f7ff fec4 	bl	8001168 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013e0:	2300      	movs	r3, #0
 80013e2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013e4:	2300      	movs	r3, #0
 80013e6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80013e8:	463b      	mov	r3, r7
 80013ea:	4619      	mov	r1, r3
 80013ec:	4805      	ldr	r0, [pc, #20]	; (8001404 <MX_TIM4_Init+0x90>)
 80013ee:	f002 f9c5 	bl	800377c <HAL_TIMEx_MasterConfigSynchronization>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 80013f8:	f7ff feb6 	bl	8001168 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80013fc:	bf00      	nop
 80013fe:	3718      	adds	r7, #24
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	20001060 	.word	0x20001060
 8001408:	40000800 	.word	0x40000800

0800140c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a48      	ldr	r2, [pc, #288]	; (800153c <HAL_TIM_Base_MspInit+0x130>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d145      	bne.n	80014aa <HAL_TIM_Base_MspInit+0x9e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800141e:	2300      	movs	r3, #0
 8001420:	60fb      	str	r3, [r7, #12]
 8001422:	4b47      	ldr	r3, [pc, #284]	; (8001540 <HAL_TIM_Base_MspInit+0x134>)
 8001424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001426:	4a46      	ldr	r2, [pc, #280]	; (8001540 <HAL_TIM_Base_MspInit+0x134>)
 8001428:	f043 0302 	orr.w	r3, r3, #2
 800142c:	6413      	str	r3, [r2, #64]	; 0x40
 800142e:	4b44      	ldr	r3, [pc, #272]	; (8001540 <HAL_TIM_Base_MspInit+0x134>)
 8001430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001432:	f003 0302 	and.w	r3, r3, #2
 8001436:	60fb      	str	r3, [r7, #12]
 8001438:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH1_TRIG Init */
    hdma_tim3_ch1_trig.Instance = DMA1_Stream4;
 800143a:	4b42      	ldr	r3, [pc, #264]	; (8001544 <HAL_TIM_Base_MspInit+0x138>)
 800143c:	4a42      	ldr	r2, [pc, #264]	; (8001548 <HAL_TIM_Base_MspInit+0x13c>)
 800143e:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Channel = DMA_CHANNEL_5;
 8001440:	4b40      	ldr	r3, [pc, #256]	; (8001544 <HAL_TIM_Base_MspInit+0x138>)
 8001442:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8001446:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001448:	4b3e      	ldr	r3, [pc, #248]	; (8001544 <HAL_TIM_Base_MspInit+0x138>)
 800144a:	2240      	movs	r2, #64	; 0x40
 800144c:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 800144e:	4b3d      	ldr	r3, [pc, #244]	; (8001544 <HAL_TIM_Base_MspInit+0x138>)
 8001450:	2200      	movs	r2, #0
 8001452:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 8001454:	4b3b      	ldr	r3, [pc, #236]	; (8001544 <HAL_TIM_Base_MspInit+0x138>)
 8001456:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800145a:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800145c:	4b39      	ldr	r3, [pc, #228]	; (8001544 <HAL_TIM_Base_MspInit+0x138>)
 800145e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001462:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001464:	4b37      	ldr	r3, [pc, #220]	; (8001544 <HAL_TIM_Base_MspInit+0x138>)
 8001466:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800146a:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Mode = DMA_CIRCULAR;
 800146c:	4b35      	ldr	r3, [pc, #212]	; (8001544 <HAL_TIM_Base_MspInit+0x138>)
 800146e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001472:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 8001474:	4b33      	ldr	r3, [pc, #204]	; (8001544 <HAL_TIM_Base_MspInit+0x138>)
 8001476:	2200      	movs	r2, #0
 8001478:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1_trig.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800147a:	4b32      	ldr	r3, [pc, #200]	; (8001544 <HAL_TIM_Base_MspInit+0x138>)
 800147c:	2200      	movs	r2, #0
 800147e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 8001480:	4830      	ldr	r0, [pc, #192]	; (8001544 <HAL_TIM_Base_MspInit+0x138>)
 8001482:	f000 facb 	bl	8001a1c <HAL_DMA_Init>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <HAL_TIM_Base_MspInit+0x84>
    {
      Error_Handler();
 800148c:	f7ff fe6c 	bl	8001168 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	4a2c      	ldr	r2, [pc, #176]	; (8001544 <HAL_TIM_Base_MspInit+0x138>)
 8001494:	625a      	str	r2, [r3, #36]	; 0x24
 8001496:	4a2b      	ldr	r2, [pc, #172]	; (8001544 <HAL_TIM_Base_MspInit+0x138>)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	4a29      	ldr	r2, [pc, #164]	; (8001544 <HAL_TIM_Base_MspInit+0x138>)
 80014a0:	639a      	str	r2, [r3, #56]	; 0x38
 80014a2:	4a28      	ldr	r2, [pc, #160]	; (8001544 <HAL_TIM_Base_MspInit+0x138>)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80014a8:	e043      	b.n	8001532 <HAL_TIM_Base_MspInit+0x126>
  else if(tim_baseHandle->Instance==TIM4)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a27      	ldr	r2, [pc, #156]	; (800154c <HAL_TIM_Base_MspInit+0x140>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d13e      	bne.n	8001532 <HAL_TIM_Base_MspInit+0x126>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80014b4:	2300      	movs	r3, #0
 80014b6:	60bb      	str	r3, [r7, #8]
 80014b8:	4b21      	ldr	r3, [pc, #132]	; (8001540 <HAL_TIM_Base_MspInit+0x134>)
 80014ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014bc:	4a20      	ldr	r2, [pc, #128]	; (8001540 <HAL_TIM_Base_MspInit+0x134>)
 80014be:	f043 0304 	orr.w	r3, r3, #4
 80014c2:	6413      	str	r3, [r2, #64]	; 0x40
 80014c4:	4b1e      	ldr	r3, [pc, #120]	; (8001540 <HAL_TIM_Base_MspInit+0x134>)
 80014c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c8:	f003 0304 	and.w	r3, r3, #4
 80014cc:	60bb      	str	r3, [r7, #8]
 80014ce:	68bb      	ldr	r3, [r7, #8]
    hdma_tim4_up.Instance = DMA1_Stream6;
 80014d0:	4b1f      	ldr	r3, [pc, #124]	; (8001550 <HAL_TIM_Base_MspInit+0x144>)
 80014d2:	4a20      	ldr	r2, [pc, #128]	; (8001554 <HAL_TIM_Base_MspInit+0x148>)
 80014d4:	601a      	str	r2, [r3, #0]
    hdma_tim4_up.Init.Channel = DMA_CHANNEL_2;
 80014d6:	4b1e      	ldr	r3, [pc, #120]	; (8001550 <HAL_TIM_Base_MspInit+0x144>)
 80014d8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80014dc:	605a      	str	r2, [r3, #4]
    hdma_tim4_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014de:	4b1c      	ldr	r3, [pc, #112]	; (8001550 <HAL_TIM_Base_MspInit+0x144>)
 80014e0:	2240      	movs	r2, #64	; 0x40
 80014e2:	609a      	str	r2, [r3, #8]
    hdma_tim4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 80014e4:	4b1a      	ldr	r3, [pc, #104]	; (8001550 <HAL_TIM_Base_MspInit+0x144>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	60da      	str	r2, [r3, #12]
    hdma_tim4_up.Init.MemInc = DMA_MINC_ENABLE;
 80014ea:	4b19      	ldr	r3, [pc, #100]	; (8001550 <HAL_TIM_Base_MspInit+0x144>)
 80014ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014f0:	611a      	str	r2, [r3, #16]
    hdma_tim4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80014f2:	4b17      	ldr	r3, [pc, #92]	; (8001550 <HAL_TIM_Base_MspInit+0x144>)
 80014f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80014f8:	615a      	str	r2, [r3, #20]
    hdma_tim4_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80014fa:	4b15      	ldr	r3, [pc, #84]	; (8001550 <HAL_TIM_Base_MspInit+0x144>)
 80014fc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001500:	619a      	str	r2, [r3, #24]
    hdma_tim4_up.Init.Mode = DMA_CIRCULAR;
 8001502:	4b13      	ldr	r3, [pc, #76]	; (8001550 <HAL_TIM_Base_MspInit+0x144>)
 8001504:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001508:	61da      	str	r2, [r3, #28]
    hdma_tim4_up.Init.Priority = DMA_PRIORITY_LOW;
 800150a:	4b11      	ldr	r3, [pc, #68]	; (8001550 <HAL_TIM_Base_MspInit+0x144>)
 800150c:	2200      	movs	r2, #0
 800150e:	621a      	str	r2, [r3, #32]
    hdma_tim4_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001510:	4b0f      	ldr	r3, [pc, #60]	; (8001550 <HAL_TIM_Base_MspInit+0x144>)
 8001512:	2200      	movs	r2, #0
 8001514:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_up) != HAL_OK)
 8001516:	480e      	ldr	r0, [pc, #56]	; (8001550 <HAL_TIM_Base_MspInit+0x144>)
 8001518:	f000 fa80 	bl	8001a1c <HAL_DMA_Init>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <HAL_TIM_Base_MspInit+0x11a>
      Error_Handler();
 8001522:	f7ff fe21 	bl	8001168 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim4_up);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	4a09      	ldr	r2, [pc, #36]	; (8001550 <HAL_TIM_Base_MspInit+0x144>)
 800152a:	621a      	str	r2, [r3, #32]
 800152c:	4a08      	ldr	r2, [pc, #32]	; (8001550 <HAL_TIM_Base_MspInit+0x144>)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001532:	bf00      	nop
 8001534:	3710      	adds	r7, #16
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	40000400 	.word	0x40000400
 8001540:	40023800 	.word	0x40023800
 8001544:	200010f0 	.word	0x200010f0
 8001548:	40026070 	.word	0x40026070
 800154c:	40000800 	.word	0x40000800
 8001550:	20001150 	.word	0x20001150
 8001554:	400260a0 	.word	0x400260a0

08001558 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b088      	sub	sp, #32
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001560:	f107 030c 	add.w	r3, r7, #12
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	605a      	str	r2, [r3, #4]
 800156a:	609a      	str	r2, [r3, #8]
 800156c:	60da      	str	r2, [r3, #12]
 800156e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a12      	ldr	r2, [pc, #72]	; (80015c0 <HAL_TIM_MspPostInit+0x68>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d11d      	bne.n	80015b6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	60bb      	str	r3, [r7, #8]
 800157e:	4b11      	ldr	r3, [pc, #68]	; (80015c4 <HAL_TIM_MspPostInit+0x6c>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001582:	4a10      	ldr	r2, [pc, #64]	; (80015c4 <HAL_TIM_MspPostInit+0x6c>)
 8001584:	f043 0301 	orr.w	r3, r3, #1
 8001588:	6313      	str	r3, [r2, #48]	; 0x30
 800158a:	4b0e      	ldr	r3, [pc, #56]	; (80015c4 <HAL_TIM_MspPostInit+0x6c>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158e:	f003 0301 	and.w	r3, r3, #1
 8001592:	60bb      	str	r3, [r7, #8]
 8001594:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001596:	2340      	movs	r3, #64	; 0x40
 8001598:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159a:	2302      	movs	r3, #2
 800159c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159e:	2300      	movs	r3, #0
 80015a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a2:	2300      	movs	r3, #0
 80015a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80015a6:	2302      	movs	r3, #2
 80015a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015aa:	f107 030c 	add.w	r3, r7, #12
 80015ae:	4619      	mov	r1, r3
 80015b0:	4805      	ldr	r0, [pc, #20]	; (80015c8 <HAL_TIM_MspPostInit+0x70>)
 80015b2:	f000 fdaf 	bl	8002114 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80015b6:	bf00      	nop
 80015b8:	3720      	adds	r7, #32
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	40000400 	.word	0x40000400
 80015c4:	40023800 	.word	0x40023800
 80015c8:	40020000 	.word	0x40020000

080015cc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015d0:	4b11      	ldr	r3, [pc, #68]	; (8001618 <MX_USART2_UART_Init+0x4c>)
 80015d2:	4a12      	ldr	r2, [pc, #72]	; (800161c <MX_USART2_UART_Init+0x50>)
 80015d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80015d6:	4b10      	ldr	r3, [pc, #64]	; (8001618 <MX_USART2_UART_Init+0x4c>)
 80015d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015de:	4b0e      	ldr	r3, [pc, #56]	; (8001618 <MX_USART2_UART_Init+0x4c>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015e4:	4b0c      	ldr	r3, [pc, #48]	; (8001618 <MX_USART2_UART_Init+0x4c>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015ea:	4b0b      	ldr	r3, [pc, #44]	; (8001618 <MX_USART2_UART_Init+0x4c>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015f0:	4b09      	ldr	r3, [pc, #36]	; (8001618 <MX_USART2_UART_Init+0x4c>)
 80015f2:	220c      	movs	r2, #12
 80015f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015f6:	4b08      	ldr	r3, [pc, #32]	; (8001618 <MX_USART2_UART_Init+0x4c>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015fc:	4b06      	ldr	r3, [pc, #24]	; (8001618 <MX_USART2_UART_Init+0x4c>)
 80015fe:	2200      	movs	r2, #0
 8001600:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001602:	4805      	ldr	r0, [pc, #20]	; (8001618 <MX_USART2_UART_Init+0x4c>)
 8001604:	f002 f928 	bl	8003858 <HAL_UART_Init>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800160e:	f7ff fdab 	bl	8001168 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001612:	bf00      	nop
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	200011b0 	.word	0x200011b0
 800161c:	40004400 	.word	0x40004400

08001620 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b08a      	sub	sp, #40	; 0x28
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001628:	f107 0314 	add.w	r3, r7, #20
 800162c:	2200      	movs	r2, #0
 800162e:	601a      	str	r2, [r3, #0]
 8001630:	605a      	str	r2, [r3, #4]
 8001632:	609a      	str	r2, [r3, #8]
 8001634:	60da      	str	r2, [r3, #12]
 8001636:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a1d      	ldr	r2, [pc, #116]	; (80016b4 <HAL_UART_MspInit+0x94>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d133      	bne.n	80016aa <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001642:	2300      	movs	r3, #0
 8001644:	613b      	str	r3, [r7, #16]
 8001646:	4b1c      	ldr	r3, [pc, #112]	; (80016b8 <HAL_UART_MspInit+0x98>)
 8001648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164a:	4a1b      	ldr	r2, [pc, #108]	; (80016b8 <HAL_UART_MspInit+0x98>)
 800164c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001650:	6413      	str	r3, [r2, #64]	; 0x40
 8001652:	4b19      	ldr	r3, [pc, #100]	; (80016b8 <HAL_UART_MspInit+0x98>)
 8001654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800165a:	613b      	str	r3, [r7, #16]
 800165c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800165e:	2300      	movs	r3, #0
 8001660:	60fb      	str	r3, [r7, #12]
 8001662:	4b15      	ldr	r3, [pc, #84]	; (80016b8 <HAL_UART_MspInit+0x98>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001666:	4a14      	ldr	r2, [pc, #80]	; (80016b8 <HAL_UART_MspInit+0x98>)
 8001668:	f043 0301 	orr.w	r3, r3, #1
 800166c:	6313      	str	r3, [r2, #48]	; 0x30
 800166e:	4b12      	ldr	r3, [pc, #72]	; (80016b8 <HAL_UART_MspInit+0x98>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001672:	f003 0301 	and.w	r3, r3, #1
 8001676:	60fb      	str	r3, [r7, #12]
 8001678:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800167a:	230c      	movs	r3, #12
 800167c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800167e:	2302      	movs	r3, #2
 8001680:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001682:	2300      	movs	r3, #0
 8001684:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001686:	2303      	movs	r3, #3
 8001688:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800168a:	2307      	movs	r3, #7
 800168c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800168e:	f107 0314 	add.w	r3, r7, #20
 8001692:	4619      	mov	r1, r3
 8001694:	4809      	ldr	r0, [pc, #36]	; (80016bc <HAL_UART_MspInit+0x9c>)
 8001696:	f000 fd3d 	bl	8002114 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 3);
 800169a:	2203      	movs	r2, #3
 800169c:	2100      	movs	r1, #0
 800169e:	2026      	movs	r0, #38	; 0x26
 80016a0:	f000 f985 	bl	80019ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80016a4:	2026      	movs	r0, #38	; 0x26
 80016a6:	f000 f99e 	bl	80019e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80016aa:	bf00      	nop
 80016ac:	3728      	adds	r7, #40	; 0x28
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	40004400 	.word	0x40004400
 80016b8:	40023800 	.word	0x40023800
 80016bc:	40020000 	.word	0x40020000

080016c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80016c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016f8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016c4:	480d      	ldr	r0, [pc, #52]	; (80016fc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80016c6:	490e      	ldr	r1, [pc, #56]	; (8001700 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80016c8:	4a0e      	ldr	r2, [pc, #56]	; (8001704 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016cc:	e002      	b.n	80016d4 <LoopCopyDataInit>

080016ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016d2:	3304      	adds	r3, #4

080016d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016d8:	d3f9      	bcc.n	80016ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016da:	4a0b      	ldr	r2, [pc, #44]	; (8001708 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80016dc:	4c0b      	ldr	r4, [pc, #44]	; (800170c <LoopFillZerobss+0x26>)
  movs r3, #0
 80016de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016e0:	e001      	b.n	80016e6 <LoopFillZerobss>

080016e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016e4:	3204      	adds	r2, #4

080016e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016e8:	d3fb      	bcc.n	80016e2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80016ea:	f7ff fdbb 	bl	8001264 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016ee:	f003 f91d 	bl	800492c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016f2:	f7ff fb8b 	bl	8000e0c <main>
  bx  lr    
 80016f6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80016f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80016fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001700:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8001704:	08004a78 	.word	0x08004a78
  ldr r2, =_sbss
 8001708:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 800170c:	200011f8 	.word	0x200011f8

08001710 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001710:	e7fe      	b.n	8001710 <ADC_IRQHandler>
	...

08001714 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001718:	4b0e      	ldr	r3, [pc, #56]	; (8001754 <HAL_Init+0x40>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a0d      	ldr	r2, [pc, #52]	; (8001754 <HAL_Init+0x40>)
 800171e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001722:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001724:	4b0b      	ldr	r3, [pc, #44]	; (8001754 <HAL_Init+0x40>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a0a      	ldr	r2, [pc, #40]	; (8001754 <HAL_Init+0x40>)
 800172a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800172e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001730:	4b08      	ldr	r3, [pc, #32]	; (8001754 <HAL_Init+0x40>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a07      	ldr	r2, [pc, #28]	; (8001754 <HAL_Init+0x40>)
 8001736:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800173a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800173c:	2003      	movs	r0, #3
 800173e:	f000 f92b 	bl	8001998 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001742:	2000      	movs	r0, #0
 8001744:	f000 f808 	bl	8001758 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001748:	f7ff fd14 	bl	8001174 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800174c:	2300      	movs	r3, #0
}
 800174e:	4618      	mov	r0, r3
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	40023c00 	.word	0x40023c00

08001758 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001760:	4b12      	ldr	r3, [pc, #72]	; (80017ac <HAL_InitTick+0x54>)
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	4b12      	ldr	r3, [pc, #72]	; (80017b0 <HAL_InitTick+0x58>)
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	4619      	mov	r1, r3
 800176a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800176e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001772:	fbb2 f3f3 	udiv	r3, r2, r3
 8001776:	4618      	mov	r0, r3
 8001778:	f000 f943 	bl	8001a02 <HAL_SYSTICK_Config>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e00e      	b.n	80017a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2b0f      	cmp	r3, #15
 800178a:	d80a      	bhi.n	80017a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800178c:	2200      	movs	r2, #0
 800178e:	6879      	ldr	r1, [r7, #4]
 8001790:	f04f 30ff 	mov.w	r0, #4294967295
 8001794:	f000 f90b 	bl	80019ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001798:	4a06      	ldr	r2, [pc, #24]	; (80017b4 <HAL_InitTick+0x5c>)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800179e:	2300      	movs	r3, #0
 80017a0:	e000      	b.n	80017a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	3708      	adds	r7, #8
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	20000014 	.word	0x20000014
 80017b0:	2000001c 	.word	0x2000001c
 80017b4:	20000018 	.word	0x20000018

080017b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017bc:	4b06      	ldr	r3, [pc, #24]	; (80017d8 <HAL_IncTick+0x20>)
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	461a      	mov	r2, r3
 80017c2:	4b06      	ldr	r3, [pc, #24]	; (80017dc <HAL_IncTick+0x24>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4413      	add	r3, r2
 80017c8:	4a04      	ldr	r2, [pc, #16]	; (80017dc <HAL_IncTick+0x24>)
 80017ca:	6013      	str	r3, [r2, #0]
}
 80017cc:	bf00      	nop
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	2000001c 	.word	0x2000001c
 80017dc:	200011f4 	.word	0x200011f4

080017e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  return uwTick;
 80017e4:	4b03      	ldr	r3, [pc, #12]	; (80017f4 <HAL_GetTick+0x14>)
 80017e6:	681b      	ldr	r3, [r3, #0]
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	200011f4 	.word	0x200011f4

080017f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b085      	sub	sp, #20
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	f003 0307 	and.w	r3, r3, #7
 8001806:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001808:	4b0c      	ldr	r3, [pc, #48]	; (800183c <__NVIC_SetPriorityGrouping+0x44>)
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800180e:	68ba      	ldr	r2, [r7, #8]
 8001810:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001814:	4013      	ands	r3, r2
 8001816:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001820:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001824:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001828:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800182a:	4a04      	ldr	r2, [pc, #16]	; (800183c <__NVIC_SetPriorityGrouping+0x44>)
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	60d3      	str	r3, [r2, #12]
}
 8001830:	bf00      	nop
 8001832:	3714      	adds	r7, #20
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr
 800183c:	e000ed00 	.word	0xe000ed00

08001840 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001844:	4b04      	ldr	r3, [pc, #16]	; (8001858 <__NVIC_GetPriorityGrouping+0x18>)
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	0a1b      	lsrs	r3, r3, #8
 800184a:	f003 0307 	and.w	r3, r3, #7
}
 800184e:	4618      	mov	r0, r3
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr
 8001858:	e000ed00 	.word	0xe000ed00

0800185c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	4603      	mov	r3, r0
 8001864:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186a:	2b00      	cmp	r3, #0
 800186c:	db0b      	blt.n	8001886 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800186e:	79fb      	ldrb	r3, [r7, #7]
 8001870:	f003 021f 	and.w	r2, r3, #31
 8001874:	4907      	ldr	r1, [pc, #28]	; (8001894 <__NVIC_EnableIRQ+0x38>)
 8001876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800187a:	095b      	lsrs	r3, r3, #5
 800187c:	2001      	movs	r0, #1
 800187e:	fa00 f202 	lsl.w	r2, r0, r2
 8001882:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001886:	bf00      	nop
 8001888:	370c      	adds	r7, #12
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	e000e100 	.word	0xe000e100

08001898 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	4603      	mov	r3, r0
 80018a0:	6039      	str	r1, [r7, #0]
 80018a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	db0a      	blt.n	80018c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	b2da      	uxtb	r2, r3
 80018b0:	490c      	ldr	r1, [pc, #48]	; (80018e4 <__NVIC_SetPriority+0x4c>)
 80018b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b6:	0112      	lsls	r2, r2, #4
 80018b8:	b2d2      	uxtb	r2, r2
 80018ba:	440b      	add	r3, r1
 80018bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018c0:	e00a      	b.n	80018d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	b2da      	uxtb	r2, r3
 80018c6:	4908      	ldr	r1, [pc, #32]	; (80018e8 <__NVIC_SetPriority+0x50>)
 80018c8:	79fb      	ldrb	r3, [r7, #7]
 80018ca:	f003 030f 	and.w	r3, r3, #15
 80018ce:	3b04      	subs	r3, #4
 80018d0:	0112      	lsls	r2, r2, #4
 80018d2:	b2d2      	uxtb	r2, r2
 80018d4:	440b      	add	r3, r1
 80018d6:	761a      	strb	r2, [r3, #24]
}
 80018d8:	bf00      	nop
 80018da:	370c      	adds	r7, #12
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr
 80018e4:	e000e100 	.word	0xe000e100
 80018e8:	e000ed00 	.word	0xe000ed00

080018ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b089      	sub	sp, #36	; 0x24
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	60f8      	str	r0, [r7, #12]
 80018f4:	60b9      	str	r1, [r7, #8]
 80018f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	f003 0307 	and.w	r3, r3, #7
 80018fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	f1c3 0307 	rsb	r3, r3, #7
 8001906:	2b04      	cmp	r3, #4
 8001908:	bf28      	it	cs
 800190a:	2304      	movcs	r3, #4
 800190c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	3304      	adds	r3, #4
 8001912:	2b06      	cmp	r3, #6
 8001914:	d902      	bls.n	800191c <NVIC_EncodePriority+0x30>
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	3b03      	subs	r3, #3
 800191a:	e000      	b.n	800191e <NVIC_EncodePriority+0x32>
 800191c:	2300      	movs	r3, #0
 800191e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001920:	f04f 32ff 	mov.w	r2, #4294967295
 8001924:	69bb      	ldr	r3, [r7, #24]
 8001926:	fa02 f303 	lsl.w	r3, r2, r3
 800192a:	43da      	mvns	r2, r3
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	401a      	ands	r2, r3
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001934:	f04f 31ff 	mov.w	r1, #4294967295
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	fa01 f303 	lsl.w	r3, r1, r3
 800193e:	43d9      	mvns	r1, r3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001944:	4313      	orrs	r3, r2
         );
}
 8001946:	4618      	mov	r0, r3
 8001948:	3724      	adds	r7, #36	; 0x24
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
	...

08001954 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	3b01      	subs	r3, #1
 8001960:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001964:	d301      	bcc.n	800196a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001966:	2301      	movs	r3, #1
 8001968:	e00f      	b.n	800198a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800196a:	4a0a      	ldr	r2, [pc, #40]	; (8001994 <SysTick_Config+0x40>)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	3b01      	subs	r3, #1
 8001970:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001972:	210f      	movs	r1, #15
 8001974:	f04f 30ff 	mov.w	r0, #4294967295
 8001978:	f7ff ff8e 	bl	8001898 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800197c:	4b05      	ldr	r3, [pc, #20]	; (8001994 <SysTick_Config+0x40>)
 800197e:	2200      	movs	r2, #0
 8001980:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001982:	4b04      	ldr	r3, [pc, #16]	; (8001994 <SysTick_Config+0x40>)
 8001984:	2207      	movs	r2, #7
 8001986:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001988:	2300      	movs	r3, #0
}
 800198a:	4618      	mov	r0, r3
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	e000e010 	.word	0xe000e010

08001998 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019a0:	6878      	ldr	r0, [r7, #4]
 80019a2:	f7ff ff29 	bl	80017f8 <__NVIC_SetPriorityGrouping>
}
 80019a6:	bf00      	nop
 80019a8:	3708      	adds	r7, #8
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}

080019ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019ae:	b580      	push	{r7, lr}
 80019b0:	b086      	sub	sp, #24
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	4603      	mov	r3, r0
 80019b6:	60b9      	str	r1, [r7, #8]
 80019b8:	607a      	str	r2, [r7, #4]
 80019ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019bc:	2300      	movs	r3, #0
 80019be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019c0:	f7ff ff3e 	bl	8001840 <__NVIC_GetPriorityGrouping>
 80019c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019c6:	687a      	ldr	r2, [r7, #4]
 80019c8:	68b9      	ldr	r1, [r7, #8]
 80019ca:	6978      	ldr	r0, [r7, #20]
 80019cc:	f7ff ff8e 	bl	80018ec <NVIC_EncodePriority>
 80019d0:	4602      	mov	r2, r0
 80019d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019d6:	4611      	mov	r1, r2
 80019d8:	4618      	mov	r0, r3
 80019da:	f7ff ff5d 	bl	8001898 <__NVIC_SetPriority>
}
 80019de:	bf00      	nop
 80019e0:	3718      	adds	r7, #24
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}

080019e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019e6:	b580      	push	{r7, lr}
 80019e8:	b082      	sub	sp, #8
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	4603      	mov	r3, r0
 80019ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7ff ff31 	bl	800185c <__NVIC_EnableIRQ>
}
 80019fa:	bf00      	nop
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}

08001a02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a02:	b580      	push	{r7, lr}
 8001a04:	b082      	sub	sp, #8
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f7ff ffa2 	bl	8001954 <SysTick_Config>
 8001a10:	4603      	mov	r3, r0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3708      	adds	r7, #8
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
	...

08001a1c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b086      	sub	sp, #24
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001a24:	2300      	movs	r3, #0
 8001a26:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001a28:	f7ff feda 	bl	80017e0 <HAL_GetTick>
 8001a2c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d101      	bne.n	8001a38 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	e099      	b.n	8001b6c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2202      	movs	r2, #2
 8001a3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2200      	movs	r2, #0
 8001a44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f022 0201 	bic.w	r2, r2, #1
 8001a56:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a58:	e00f      	b.n	8001a7a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a5a:	f7ff fec1 	bl	80017e0 <HAL_GetTick>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	1ad3      	subs	r3, r2, r3
 8001a64:	2b05      	cmp	r3, #5
 8001a66:	d908      	bls.n	8001a7a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2220      	movs	r2, #32
 8001a6c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2203      	movs	r2, #3
 8001a72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e078      	b.n	8001b6c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f003 0301 	and.w	r3, r3, #1
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d1e8      	bne.n	8001a5a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001a90:	697a      	ldr	r2, [r7, #20]
 8001a92:	4b38      	ldr	r3, [pc, #224]	; (8001b74 <HAL_DMA_Init+0x158>)
 8001a94:	4013      	ands	r3, r2
 8001a96:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	685a      	ldr	r2, [r3, #4]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001aa6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	691b      	ldr	r3, [r3, #16]
 8001aac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ab2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	699b      	ldr	r3, [r3, #24]
 8001ab8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001abe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6a1b      	ldr	r3, [r3, #32]
 8001ac4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ac6:	697a      	ldr	r2, [r7, #20]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad0:	2b04      	cmp	r3, #4
 8001ad2:	d107      	bne.n	8001ae4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001adc:	4313      	orrs	r3, r2
 8001ade:	697a      	ldr	r2, [r7, #20]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	697a      	ldr	r2, [r7, #20]
 8001aea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	695b      	ldr	r3, [r3, #20]
 8001af2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	f023 0307 	bic.w	r3, r3, #7
 8001afa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b00:	697a      	ldr	r2, [r7, #20]
 8001b02:	4313      	orrs	r3, r2
 8001b04:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b0a:	2b04      	cmp	r3, #4
 8001b0c:	d117      	bne.n	8001b3e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b12:	697a      	ldr	r2, [r7, #20]
 8001b14:	4313      	orrs	r3, r2
 8001b16:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d00e      	beq.n	8001b3e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f000 fa7b 	bl	800201c <DMA_CheckFifoParam>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d008      	beq.n	8001b3e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2240      	movs	r2, #64	; 0x40
 8001b30:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2201      	movs	r2, #1
 8001b36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e016      	b.n	8001b6c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	697a      	ldr	r2, [r7, #20]
 8001b44:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f000 fa32 	bl	8001fb0 <DMA_CalcBaseAndBitshift>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b54:	223f      	movs	r2, #63	; 0x3f
 8001b56:	409a      	lsls	r2, r3
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2201      	movs	r2, #1
 8001b66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001b6a:	2300      	movs	r3, #0
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3718      	adds	r7, #24
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	f010803f 	.word	0xf010803f

08001b78 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b84:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001b86:	f7ff fe2b 	bl	80017e0 <HAL_GetTick>
 8001b8a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	2b02      	cmp	r3, #2
 8001b96:	d008      	beq.n	8001baa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2280      	movs	r2, #128	; 0x80
 8001b9c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e052      	b.n	8001c50 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f022 0216 	bic.w	r2, r2, #22
 8001bb8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	695a      	ldr	r2, [r3, #20]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001bc8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d103      	bne.n	8001bda <HAL_DMA_Abort+0x62>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d007      	beq.n	8001bea <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f022 0208 	bic.w	r2, r2, #8
 8001be8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f022 0201 	bic.w	r2, r2, #1
 8001bf8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bfa:	e013      	b.n	8001c24 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001bfc:	f7ff fdf0 	bl	80017e0 <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	2b05      	cmp	r3, #5
 8001c08:	d90c      	bls.n	8001c24 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2220      	movs	r2, #32
 8001c0e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2203      	movs	r2, #3
 8001c14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001c20:	2303      	movs	r3, #3
 8001c22:	e015      	b.n	8001c50 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 0301 	and.w	r3, r3, #1
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d1e4      	bne.n	8001bfc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c36:	223f      	movs	r2, #63	; 0x3f
 8001c38:	409a      	lsls	r2, r3
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2201      	movs	r2, #1
 8001c42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001c4e:	2300      	movs	r3, #0
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3710      	adds	r7, #16
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	2b02      	cmp	r3, #2
 8001c6a:	d004      	beq.n	8001c76 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2280      	movs	r2, #128	; 0x80
 8001c70:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e00c      	b.n	8001c90 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2205      	movs	r2, #5
 8001c7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f022 0201 	bic.w	r2, r2, #1
 8001c8c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001c8e:	2300      	movs	r3, #0
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b086      	sub	sp, #24
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001ca8:	4b92      	ldr	r3, [pc, #584]	; (8001ef4 <HAL_DMA_IRQHandler+0x258>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a92      	ldr	r2, [pc, #584]	; (8001ef8 <HAL_DMA_IRQHandler+0x25c>)
 8001cae:	fba2 2303 	umull	r2, r3, r2, r3
 8001cb2:	0a9b      	lsrs	r3, r3, #10
 8001cb4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cba:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cc6:	2208      	movs	r2, #8
 8001cc8:	409a      	lsls	r2, r3
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	4013      	ands	r3, r2
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d01a      	beq.n	8001d08 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 0304 	and.w	r3, r3, #4
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d013      	beq.n	8001d08 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f022 0204 	bic.w	r2, r2, #4
 8001cee:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cf4:	2208      	movs	r2, #8
 8001cf6:	409a      	lsls	r2, r3
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d00:	f043 0201 	orr.w	r2, r3, #1
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	409a      	lsls	r2, r3
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	4013      	ands	r3, r2
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d012      	beq.n	8001d3e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	695b      	ldr	r3, [r3, #20]
 8001d1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d00b      	beq.n	8001d3e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	409a      	lsls	r2, r3
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d36:	f043 0202 	orr.w	r2, r3, #2
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d42:	2204      	movs	r2, #4
 8001d44:	409a      	lsls	r2, r3
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	4013      	ands	r3, r2
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d012      	beq.n	8001d74 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0302 	and.w	r3, r3, #2
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d00b      	beq.n	8001d74 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d60:	2204      	movs	r2, #4
 8001d62:	409a      	lsls	r2, r3
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d6c:	f043 0204 	orr.w	r2, r3, #4
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d78:	2210      	movs	r2, #16
 8001d7a:	409a      	lsls	r2, r3
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	4013      	ands	r3, r2
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d043      	beq.n	8001e0c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 0308 	and.w	r3, r3, #8
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d03c      	beq.n	8001e0c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d96:	2210      	movs	r2, #16
 8001d98:	409a      	lsls	r2, r3
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d018      	beq.n	8001dde <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d108      	bne.n	8001dcc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d024      	beq.n	8001e0c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	4798      	blx	r3
 8001dca:	e01f      	b.n	8001e0c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d01b      	beq.n	8001e0c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	4798      	blx	r3
 8001ddc:	e016      	b.n	8001e0c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d107      	bne.n	8001dfc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f022 0208 	bic.w	r2, r2, #8
 8001dfa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d003      	beq.n	8001e0c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e08:	6878      	ldr	r0, [r7, #4]
 8001e0a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e10:	2220      	movs	r2, #32
 8001e12:	409a      	lsls	r2, r3
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	4013      	ands	r3, r2
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	f000 808e 	beq.w	8001f3a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0310 	and.w	r3, r3, #16
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	f000 8086 	beq.w	8001f3a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e32:	2220      	movs	r2, #32
 8001e34:	409a      	lsls	r2, r3
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	2b05      	cmp	r3, #5
 8001e44:	d136      	bne.n	8001eb4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f022 0216 	bic.w	r2, r2, #22
 8001e54:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	695a      	ldr	r2, [r3, #20]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e64:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d103      	bne.n	8001e76 <HAL_DMA_IRQHandler+0x1da>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d007      	beq.n	8001e86 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f022 0208 	bic.w	r2, r2, #8
 8001e84:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e8a:	223f      	movs	r2, #63	; 0x3f
 8001e8c:	409a      	lsls	r2, r3
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2201      	movs	r2, #1
 8001e96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d07d      	beq.n	8001fa6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	4798      	blx	r3
        }
        return;
 8001eb2:	e078      	b.n	8001fa6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d01c      	beq.n	8001efc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d108      	bne.n	8001ee2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d030      	beq.n	8001f3a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	4798      	blx	r3
 8001ee0:	e02b      	b.n	8001f3a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d027      	beq.n	8001f3a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	4798      	blx	r3
 8001ef2:	e022      	b.n	8001f3a <HAL_DMA_IRQHandler+0x29e>
 8001ef4:	20000014 	.word	0x20000014
 8001ef8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d10f      	bne.n	8001f2a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f022 0210 	bic.w	r2, r2, #16
 8001f18:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2200      	movs	r2, #0
 8001f26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d003      	beq.n	8001f3a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d032      	beq.n	8001fa8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f46:	f003 0301 	and.w	r3, r3, #1
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d022      	beq.n	8001f94 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2205      	movs	r2, #5
 8001f52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f022 0201 	bic.w	r2, r2, #1
 8001f64:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	3301      	adds	r3, #1
 8001f6a:	60bb      	str	r3, [r7, #8]
 8001f6c:	697a      	ldr	r2, [r7, #20]
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d307      	bcc.n	8001f82 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 0301 	and.w	r3, r3, #1
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d1f2      	bne.n	8001f66 <HAL_DMA_IRQHandler+0x2ca>
 8001f80:	e000      	b.n	8001f84 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001f82:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2201      	movs	r2, #1
 8001f88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d005      	beq.n	8001fa8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	4798      	blx	r3
 8001fa4:	e000      	b.n	8001fa8 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001fa6:	bf00      	nop
    }
  }
}
 8001fa8:	3718      	adds	r7, #24
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop

08001fb0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b085      	sub	sp, #20
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	3b10      	subs	r3, #16
 8001fc0:	4a14      	ldr	r2, [pc, #80]	; (8002014 <DMA_CalcBaseAndBitshift+0x64>)
 8001fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8001fc6:	091b      	lsrs	r3, r3, #4
 8001fc8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001fca:	4a13      	ldr	r2, [pc, #76]	; (8002018 <DMA_CalcBaseAndBitshift+0x68>)
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	4413      	add	r3, r2
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	2b03      	cmp	r3, #3
 8001fdc:	d909      	bls.n	8001ff2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001fe6:	f023 0303 	bic.w	r3, r3, #3
 8001fea:	1d1a      	adds	r2, r3, #4
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	659a      	str	r2, [r3, #88]	; 0x58
 8001ff0:	e007      	b.n	8002002 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001ffa:	f023 0303 	bic.w	r3, r3, #3
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002006:	4618      	mov	r0, r3
 8002008:	3714      	adds	r7, #20
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	aaaaaaab 	.word	0xaaaaaaab
 8002018:	08004a60 	.word	0x08004a60

0800201c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800201c:	b480      	push	{r7}
 800201e:	b085      	sub	sp, #20
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002024:	2300      	movs	r3, #0
 8002026:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800202c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	699b      	ldr	r3, [r3, #24]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d11f      	bne.n	8002076 <DMA_CheckFifoParam+0x5a>
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	2b03      	cmp	r3, #3
 800203a:	d856      	bhi.n	80020ea <DMA_CheckFifoParam+0xce>
 800203c:	a201      	add	r2, pc, #4	; (adr r2, 8002044 <DMA_CheckFifoParam+0x28>)
 800203e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002042:	bf00      	nop
 8002044:	08002055 	.word	0x08002055
 8002048:	08002067 	.word	0x08002067
 800204c:	08002055 	.word	0x08002055
 8002050:	080020eb 	.word	0x080020eb
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002058:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800205c:	2b00      	cmp	r3, #0
 800205e:	d046      	beq.n	80020ee <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002064:	e043      	b.n	80020ee <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800206a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800206e:	d140      	bne.n	80020f2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002074:	e03d      	b.n	80020f2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	699b      	ldr	r3, [r3, #24]
 800207a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800207e:	d121      	bne.n	80020c4 <DMA_CheckFifoParam+0xa8>
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	2b03      	cmp	r3, #3
 8002084:	d837      	bhi.n	80020f6 <DMA_CheckFifoParam+0xda>
 8002086:	a201      	add	r2, pc, #4	; (adr r2, 800208c <DMA_CheckFifoParam+0x70>)
 8002088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800208c:	0800209d 	.word	0x0800209d
 8002090:	080020a3 	.word	0x080020a3
 8002094:	0800209d 	.word	0x0800209d
 8002098:	080020b5 	.word	0x080020b5
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	73fb      	strb	r3, [r7, #15]
      break;
 80020a0:	e030      	b.n	8002104 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d025      	beq.n	80020fa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020b2:	e022      	b.n	80020fa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020b8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80020bc:	d11f      	bne.n	80020fe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80020c2:	e01c      	b.n	80020fe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	2b02      	cmp	r3, #2
 80020c8:	d903      	bls.n	80020d2 <DMA_CheckFifoParam+0xb6>
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	2b03      	cmp	r3, #3
 80020ce:	d003      	beq.n	80020d8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80020d0:	e018      	b.n	8002104 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	73fb      	strb	r3, [r7, #15]
      break;
 80020d6:	e015      	b.n	8002104 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d00e      	beq.n	8002102 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	73fb      	strb	r3, [r7, #15]
      break;
 80020e8:	e00b      	b.n	8002102 <DMA_CheckFifoParam+0xe6>
      break;
 80020ea:	bf00      	nop
 80020ec:	e00a      	b.n	8002104 <DMA_CheckFifoParam+0xe8>
      break;
 80020ee:	bf00      	nop
 80020f0:	e008      	b.n	8002104 <DMA_CheckFifoParam+0xe8>
      break;
 80020f2:	bf00      	nop
 80020f4:	e006      	b.n	8002104 <DMA_CheckFifoParam+0xe8>
      break;
 80020f6:	bf00      	nop
 80020f8:	e004      	b.n	8002104 <DMA_CheckFifoParam+0xe8>
      break;
 80020fa:	bf00      	nop
 80020fc:	e002      	b.n	8002104 <DMA_CheckFifoParam+0xe8>
      break;   
 80020fe:	bf00      	nop
 8002100:	e000      	b.n	8002104 <DMA_CheckFifoParam+0xe8>
      break;
 8002102:	bf00      	nop
    }
  } 
  
  return status; 
 8002104:	7bfb      	ldrb	r3, [r7, #15]
}
 8002106:	4618      	mov	r0, r3
 8002108:	3714      	adds	r7, #20
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop

08002114 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002114:	b480      	push	{r7}
 8002116:	b089      	sub	sp, #36	; 0x24
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800211e:	2300      	movs	r3, #0
 8002120:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002122:	2300      	movs	r3, #0
 8002124:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002126:	2300      	movs	r3, #0
 8002128:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800212a:	2300      	movs	r3, #0
 800212c:	61fb      	str	r3, [r7, #28]
 800212e:	e159      	b.n	80023e4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002130:	2201      	movs	r2, #1
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	fa02 f303 	lsl.w	r3, r2, r3
 8002138:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	697a      	ldr	r2, [r7, #20]
 8002140:	4013      	ands	r3, r2
 8002142:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002144:	693a      	ldr	r2, [r7, #16]
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	429a      	cmp	r2, r3
 800214a:	f040 8148 	bne.w	80023de <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f003 0303 	and.w	r3, r3, #3
 8002156:	2b01      	cmp	r3, #1
 8002158:	d005      	beq.n	8002166 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002162:	2b02      	cmp	r3, #2
 8002164:	d130      	bne.n	80021c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	005b      	lsls	r3, r3, #1
 8002170:	2203      	movs	r2, #3
 8002172:	fa02 f303 	lsl.w	r3, r2, r3
 8002176:	43db      	mvns	r3, r3
 8002178:	69ba      	ldr	r2, [r7, #24]
 800217a:	4013      	ands	r3, r2
 800217c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	68da      	ldr	r2, [r3, #12]
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	005b      	lsls	r3, r3, #1
 8002186:	fa02 f303 	lsl.w	r3, r2, r3
 800218a:	69ba      	ldr	r2, [r7, #24]
 800218c:	4313      	orrs	r3, r2
 800218e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	69ba      	ldr	r2, [r7, #24]
 8002194:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800219c:	2201      	movs	r2, #1
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	fa02 f303 	lsl.w	r3, r2, r3
 80021a4:	43db      	mvns	r3, r3
 80021a6:	69ba      	ldr	r2, [r7, #24]
 80021a8:	4013      	ands	r3, r2
 80021aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	091b      	lsrs	r3, r3, #4
 80021b2:	f003 0201 	and.w	r2, r3, #1
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	fa02 f303 	lsl.w	r3, r2, r3
 80021bc:	69ba      	ldr	r2, [r7, #24]
 80021be:	4313      	orrs	r3, r2
 80021c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	69ba      	ldr	r2, [r7, #24]
 80021c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f003 0303 	and.w	r3, r3, #3
 80021d0:	2b03      	cmp	r3, #3
 80021d2:	d017      	beq.n	8002204 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	005b      	lsls	r3, r3, #1
 80021de:	2203      	movs	r2, #3
 80021e0:	fa02 f303 	lsl.w	r3, r2, r3
 80021e4:	43db      	mvns	r3, r3
 80021e6:	69ba      	ldr	r2, [r7, #24]
 80021e8:	4013      	ands	r3, r2
 80021ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	689a      	ldr	r2, [r3, #8]
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	005b      	lsls	r3, r3, #1
 80021f4:	fa02 f303 	lsl.w	r3, r2, r3
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	69ba      	ldr	r2, [r7, #24]
 8002202:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f003 0303 	and.w	r3, r3, #3
 800220c:	2b02      	cmp	r3, #2
 800220e:	d123      	bne.n	8002258 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	08da      	lsrs	r2, r3, #3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	3208      	adds	r2, #8
 8002218:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800221c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	f003 0307 	and.w	r3, r3, #7
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	220f      	movs	r2, #15
 8002228:	fa02 f303 	lsl.w	r3, r2, r3
 800222c:	43db      	mvns	r3, r3
 800222e:	69ba      	ldr	r2, [r7, #24]
 8002230:	4013      	ands	r3, r2
 8002232:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	691a      	ldr	r2, [r3, #16]
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	f003 0307 	and.w	r3, r3, #7
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	fa02 f303 	lsl.w	r3, r2, r3
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	4313      	orrs	r3, r2
 8002248:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	08da      	lsrs	r2, r3, #3
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	3208      	adds	r2, #8
 8002252:	69b9      	ldr	r1, [r7, #24]
 8002254:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	005b      	lsls	r3, r3, #1
 8002262:	2203      	movs	r2, #3
 8002264:	fa02 f303 	lsl.w	r3, r2, r3
 8002268:	43db      	mvns	r3, r3
 800226a:	69ba      	ldr	r2, [r7, #24]
 800226c:	4013      	ands	r3, r2
 800226e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f003 0203 	and.w	r2, r3, #3
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	005b      	lsls	r3, r3, #1
 800227c:	fa02 f303 	lsl.w	r3, r2, r3
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	4313      	orrs	r3, r2
 8002284:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	69ba      	ldr	r2, [r7, #24]
 800228a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002294:	2b00      	cmp	r3, #0
 8002296:	f000 80a2 	beq.w	80023de <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800229a:	2300      	movs	r3, #0
 800229c:	60fb      	str	r3, [r7, #12]
 800229e:	4b57      	ldr	r3, [pc, #348]	; (80023fc <HAL_GPIO_Init+0x2e8>)
 80022a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a2:	4a56      	ldr	r2, [pc, #344]	; (80023fc <HAL_GPIO_Init+0x2e8>)
 80022a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022a8:	6453      	str	r3, [r2, #68]	; 0x44
 80022aa:	4b54      	ldr	r3, [pc, #336]	; (80023fc <HAL_GPIO_Init+0x2e8>)
 80022ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022b2:	60fb      	str	r3, [r7, #12]
 80022b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022b6:	4a52      	ldr	r2, [pc, #328]	; (8002400 <HAL_GPIO_Init+0x2ec>)
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	089b      	lsrs	r3, r3, #2
 80022bc:	3302      	adds	r3, #2
 80022be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80022c4:	69fb      	ldr	r3, [r7, #28]
 80022c6:	f003 0303 	and.w	r3, r3, #3
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	220f      	movs	r2, #15
 80022ce:	fa02 f303 	lsl.w	r3, r2, r3
 80022d2:	43db      	mvns	r3, r3
 80022d4:	69ba      	ldr	r2, [r7, #24]
 80022d6:	4013      	ands	r3, r2
 80022d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a49      	ldr	r2, [pc, #292]	; (8002404 <HAL_GPIO_Init+0x2f0>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d019      	beq.n	8002316 <HAL_GPIO_Init+0x202>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4a48      	ldr	r2, [pc, #288]	; (8002408 <HAL_GPIO_Init+0x2f4>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d013      	beq.n	8002312 <HAL_GPIO_Init+0x1fe>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4a47      	ldr	r2, [pc, #284]	; (800240c <HAL_GPIO_Init+0x2f8>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d00d      	beq.n	800230e <HAL_GPIO_Init+0x1fa>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4a46      	ldr	r2, [pc, #280]	; (8002410 <HAL_GPIO_Init+0x2fc>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d007      	beq.n	800230a <HAL_GPIO_Init+0x1f6>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4a45      	ldr	r2, [pc, #276]	; (8002414 <HAL_GPIO_Init+0x300>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d101      	bne.n	8002306 <HAL_GPIO_Init+0x1f2>
 8002302:	2304      	movs	r3, #4
 8002304:	e008      	b.n	8002318 <HAL_GPIO_Init+0x204>
 8002306:	2307      	movs	r3, #7
 8002308:	e006      	b.n	8002318 <HAL_GPIO_Init+0x204>
 800230a:	2303      	movs	r3, #3
 800230c:	e004      	b.n	8002318 <HAL_GPIO_Init+0x204>
 800230e:	2302      	movs	r3, #2
 8002310:	e002      	b.n	8002318 <HAL_GPIO_Init+0x204>
 8002312:	2301      	movs	r3, #1
 8002314:	e000      	b.n	8002318 <HAL_GPIO_Init+0x204>
 8002316:	2300      	movs	r3, #0
 8002318:	69fa      	ldr	r2, [r7, #28]
 800231a:	f002 0203 	and.w	r2, r2, #3
 800231e:	0092      	lsls	r2, r2, #2
 8002320:	4093      	lsls	r3, r2
 8002322:	69ba      	ldr	r2, [r7, #24]
 8002324:	4313      	orrs	r3, r2
 8002326:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002328:	4935      	ldr	r1, [pc, #212]	; (8002400 <HAL_GPIO_Init+0x2ec>)
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	089b      	lsrs	r3, r3, #2
 800232e:	3302      	adds	r3, #2
 8002330:	69ba      	ldr	r2, [r7, #24]
 8002332:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002336:	4b38      	ldr	r3, [pc, #224]	; (8002418 <HAL_GPIO_Init+0x304>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	43db      	mvns	r3, r3
 8002340:	69ba      	ldr	r2, [r7, #24]
 8002342:	4013      	ands	r3, r2
 8002344:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d003      	beq.n	800235a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002352:	69ba      	ldr	r2, [r7, #24]
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	4313      	orrs	r3, r2
 8002358:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800235a:	4a2f      	ldr	r2, [pc, #188]	; (8002418 <HAL_GPIO_Init+0x304>)
 800235c:	69bb      	ldr	r3, [r7, #24]
 800235e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002360:	4b2d      	ldr	r3, [pc, #180]	; (8002418 <HAL_GPIO_Init+0x304>)
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	43db      	mvns	r3, r3
 800236a:	69ba      	ldr	r2, [r7, #24]
 800236c:	4013      	ands	r3, r2
 800236e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002378:	2b00      	cmp	r3, #0
 800237a:	d003      	beq.n	8002384 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800237c:	69ba      	ldr	r2, [r7, #24]
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	4313      	orrs	r3, r2
 8002382:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002384:	4a24      	ldr	r2, [pc, #144]	; (8002418 <HAL_GPIO_Init+0x304>)
 8002386:	69bb      	ldr	r3, [r7, #24]
 8002388:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800238a:	4b23      	ldr	r3, [pc, #140]	; (8002418 <HAL_GPIO_Init+0x304>)
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	43db      	mvns	r3, r3
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	4013      	ands	r3, r2
 8002398:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d003      	beq.n	80023ae <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80023a6:	69ba      	ldr	r2, [r7, #24]
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	4313      	orrs	r3, r2
 80023ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023ae:	4a1a      	ldr	r2, [pc, #104]	; (8002418 <HAL_GPIO_Init+0x304>)
 80023b0:	69bb      	ldr	r3, [r7, #24]
 80023b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023b4:	4b18      	ldr	r3, [pc, #96]	; (8002418 <HAL_GPIO_Init+0x304>)
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	43db      	mvns	r3, r3
 80023be:	69ba      	ldr	r2, [r7, #24]
 80023c0:	4013      	ands	r3, r2
 80023c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d003      	beq.n	80023d8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80023d0:	69ba      	ldr	r2, [r7, #24]
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023d8:	4a0f      	ldr	r2, [pc, #60]	; (8002418 <HAL_GPIO_Init+0x304>)
 80023da:	69bb      	ldr	r3, [r7, #24]
 80023dc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	3301      	adds	r3, #1
 80023e2:	61fb      	str	r3, [r7, #28]
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	2b0f      	cmp	r3, #15
 80023e8:	f67f aea2 	bls.w	8002130 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80023ec:	bf00      	nop
 80023ee:	bf00      	nop
 80023f0:	3724      	adds	r7, #36	; 0x24
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr
 80023fa:	bf00      	nop
 80023fc:	40023800 	.word	0x40023800
 8002400:	40013800 	.word	0x40013800
 8002404:	40020000 	.word	0x40020000
 8002408:	40020400 	.word	0x40020400
 800240c:	40020800 	.word	0x40020800
 8002410:	40020c00 	.word	0x40020c00
 8002414:	40021000 	.word	0x40021000
 8002418:	40013c00 	.word	0x40013c00

0800241c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800241c:	b480      	push	{r7}
 800241e:	b085      	sub	sp, #20
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	460b      	mov	r3, r1
 8002426:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	691a      	ldr	r2, [r3, #16]
 800242c:	887b      	ldrh	r3, [r7, #2]
 800242e:	4013      	ands	r3, r2
 8002430:	2b00      	cmp	r3, #0
 8002432:	d002      	beq.n	800243a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002434:	2301      	movs	r3, #1
 8002436:	73fb      	strb	r3, [r7, #15]
 8002438:	e001      	b.n	800243e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800243a:	2300      	movs	r3, #0
 800243c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800243e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002440:	4618      	mov	r0, r3
 8002442:	3714      	adds	r7, #20
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr

0800244c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	460b      	mov	r3, r1
 8002456:	807b      	strh	r3, [r7, #2]
 8002458:	4613      	mov	r3, r2
 800245a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800245c:	787b      	ldrb	r3, [r7, #1]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d003      	beq.n	800246a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002462:	887a      	ldrh	r2, [r7, #2]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002468:	e003      	b.n	8002472 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800246a:	887b      	ldrh	r3, [r7, #2]
 800246c:	041a      	lsls	r2, r3, #16
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	619a      	str	r2, [r3, #24]
}
 8002472:	bf00      	nop
 8002474:	370c      	adds	r7, #12
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr

0800247e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800247e:	b480      	push	{r7}
 8002480:	b085      	sub	sp, #20
 8002482:	af00      	add	r7, sp, #0
 8002484:	6078      	str	r0, [r7, #4]
 8002486:	460b      	mov	r3, r1
 8002488:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	695b      	ldr	r3, [r3, #20]
 800248e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002490:	887a      	ldrh	r2, [r7, #2]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	4013      	ands	r3, r2
 8002496:	041a      	lsls	r2, r3, #16
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	43d9      	mvns	r1, r3
 800249c:	887b      	ldrh	r3, [r7, #2]
 800249e:	400b      	ands	r3, r1
 80024a0:	431a      	orrs	r2, r3
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	619a      	str	r2, [r3, #24]
}
 80024a6:	bf00      	nop
 80024a8:	3714      	adds	r7, #20
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr
	...

080024b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	4603      	mov	r3, r0
 80024bc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80024be:	4b08      	ldr	r3, [pc, #32]	; (80024e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024c0:	695a      	ldr	r2, [r3, #20]
 80024c2:	88fb      	ldrh	r3, [r7, #6]
 80024c4:	4013      	ands	r3, r2
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d006      	beq.n	80024d8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80024ca:	4a05      	ldr	r2, [pc, #20]	; (80024e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024cc:	88fb      	ldrh	r3, [r7, #6]
 80024ce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80024d0:	88fb      	ldrh	r3, [r7, #6]
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7fe fdfc 	bl	80010d0 <HAL_GPIO_EXTI_Callback>
  }
}
 80024d8:	bf00      	nop
 80024da:	3708      	adds	r7, #8
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	40013c00 	.word	0x40013c00

080024e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b086      	sub	sp, #24
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d101      	bne.n	80024f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e264      	b.n	80029c0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0301 	and.w	r3, r3, #1
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d075      	beq.n	80025ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002502:	4ba3      	ldr	r3, [pc, #652]	; (8002790 <HAL_RCC_OscConfig+0x2ac>)
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	f003 030c 	and.w	r3, r3, #12
 800250a:	2b04      	cmp	r3, #4
 800250c:	d00c      	beq.n	8002528 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800250e:	4ba0      	ldr	r3, [pc, #640]	; (8002790 <HAL_RCC_OscConfig+0x2ac>)
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002516:	2b08      	cmp	r3, #8
 8002518:	d112      	bne.n	8002540 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800251a:	4b9d      	ldr	r3, [pc, #628]	; (8002790 <HAL_RCC_OscConfig+0x2ac>)
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002522:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002526:	d10b      	bne.n	8002540 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002528:	4b99      	ldr	r3, [pc, #612]	; (8002790 <HAL_RCC_OscConfig+0x2ac>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002530:	2b00      	cmp	r3, #0
 8002532:	d05b      	beq.n	80025ec <HAL_RCC_OscConfig+0x108>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d157      	bne.n	80025ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e23f      	b.n	80029c0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002548:	d106      	bne.n	8002558 <HAL_RCC_OscConfig+0x74>
 800254a:	4b91      	ldr	r3, [pc, #580]	; (8002790 <HAL_RCC_OscConfig+0x2ac>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a90      	ldr	r2, [pc, #576]	; (8002790 <HAL_RCC_OscConfig+0x2ac>)
 8002550:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002554:	6013      	str	r3, [r2, #0]
 8002556:	e01d      	b.n	8002594 <HAL_RCC_OscConfig+0xb0>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002560:	d10c      	bne.n	800257c <HAL_RCC_OscConfig+0x98>
 8002562:	4b8b      	ldr	r3, [pc, #556]	; (8002790 <HAL_RCC_OscConfig+0x2ac>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a8a      	ldr	r2, [pc, #552]	; (8002790 <HAL_RCC_OscConfig+0x2ac>)
 8002568:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800256c:	6013      	str	r3, [r2, #0]
 800256e:	4b88      	ldr	r3, [pc, #544]	; (8002790 <HAL_RCC_OscConfig+0x2ac>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a87      	ldr	r2, [pc, #540]	; (8002790 <HAL_RCC_OscConfig+0x2ac>)
 8002574:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002578:	6013      	str	r3, [r2, #0]
 800257a:	e00b      	b.n	8002594 <HAL_RCC_OscConfig+0xb0>
 800257c:	4b84      	ldr	r3, [pc, #528]	; (8002790 <HAL_RCC_OscConfig+0x2ac>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a83      	ldr	r2, [pc, #524]	; (8002790 <HAL_RCC_OscConfig+0x2ac>)
 8002582:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002586:	6013      	str	r3, [r2, #0]
 8002588:	4b81      	ldr	r3, [pc, #516]	; (8002790 <HAL_RCC_OscConfig+0x2ac>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a80      	ldr	r2, [pc, #512]	; (8002790 <HAL_RCC_OscConfig+0x2ac>)
 800258e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002592:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d013      	beq.n	80025c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800259c:	f7ff f920 	bl	80017e0 <HAL_GetTick>
 80025a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025a2:	e008      	b.n	80025b6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025a4:	f7ff f91c 	bl	80017e0 <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	2b64      	cmp	r3, #100	; 0x64
 80025b0:	d901      	bls.n	80025b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e204      	b.n	80029c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025b6:	4b76      	ldr	r3, [pc, #472]	; (8002790 <HAL_RCC_OscConfig+0x2ac>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d0f0      	beq.n	80025a4 <HAL_RCC_OscConfig+0xc0>
 80025c2:	e014      	b.n	80025ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025c4:	f7ff f90c 	bl	80017e0 <HAL_GetTick>
 80025c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025ca:	e008      	b.n	80025de <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025cc:	f7ff f908 	bl	80017e0 <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	2b64      	cmp	r3, #100	; 0x64
 80025d8:	d901      	bls.n	80025de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80025da:	2303      	movs	r3, #3
 80025dc:	e1f0      	b.n	80029c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025de:	4b6c      	ldr	r3, [pc, #432]	; (8002790 <HAL_RCC_OscConfig+0x2ac>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d1f0      	bne.n	80025cc <HAL_RCC_OscConfig+0xe8>
 80025ea:	e000      	b.n	80025ee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0302 	and.w	r3, r3, #2
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d063      	beq.n	80026c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025fa:	4b65      	ldr	r3, [pc, #404]	; (8002790 <HAL_RCC_OscConfig+0x2ac>)
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	f003 030c 	and.w	r3, r3, #12
 8002602:	2b00      	cmp	r3, #0
 8002604:	d00b      	beq.n	800261e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002606:	4b62      	ldr	r3, [pc, #392]	; (8002790 <HAL_RCC_OscConfig+0x2ac>)
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800260e:	2b08      	cmp	r3, #8
 8002610:	d11c      	bne.n	800264c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002612:	4b5f      	ldr	r3, [pc, #380]	; (8002790 <HAL_RCC_OscConfig+0x2ac>)
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d116      	bne.n	800264c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800261e:	4b5c      	ldr	r3, [pc, #368]	; (8002790 <HAL_RCC_OscConfig+0x2ac>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0302 	and.w	r3, r3, #2
 8002626:	2b00      	cmp	r3, #0
 8002628:	d005      	beq.n	8002636 <HAL_RCC_OscConfig+0x152>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	68db      	ldr	r3, [r3, #12]
 800262e:	2b01      	cmp	r3, #1
 8002630:	d001      	beq.n	8002636 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e1c4      	b.n	80029c0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002636:	4b56      	ldr	r3, [pc, #344]	; (8002790 <HAL_RCC_OscConfig+0x2ac>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	691b      	ldr	r3, [r3, #16]
 8002642:	00db      	lsls	r3, r3, #3
 8002644:	4952      	ldr	r1, [pc, #328]	; (8002790 <HAL_RCC_OscConfig+0x2ac>)
 8002646:	4313      	orrs	r3, r2
 8002648:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800264a:	e03a      	b.n	80026c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d020      	beq.n	8002696 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002654:	4b4f      	ldr	r3, [pc, #316]	; (8002794 <HAL_RCC_OscConfig+0x2b0>)
 8002656:	2201      	movs	r2, #1
 8002658:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800265a:	f7ff f8c1 	bl	80017e0 <HAL_GetTick>
 800265e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002660:	e008      	b.n	8002674 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002662:	f7ff f8bd 	bl	80017e0 <HAL_GetTick>
 8002666:	4602      	mov	r2, r0
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	2b02      	cmp	r3, #2
 800266e:	d901      	bls.n	8002674 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002670:	2303      	movs	r3, #3
 8002672:	e1a5      	b.n	80029c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002674:	4b46      	ldr	r3, [pc, #280]	; (8002790 <HAL_RCC_OscConfig+0x2ac>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0302 	and.w	r3, r3, #2
 800267c:	2b00      	cmp	r3, #0
 800267e:	d0f0      	beq.n	8002662 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002680:	4b43      	ldr	r3, [pc, #268]	; (8002790 <HAL_RCC_OscConfig+0x2ac>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	691b      	ldr	r3, [r3, #16]
 800268c:	00db      	lsls	r3, r3, #3
 800268e:	4940      	ldr	r1, [pc, #256]	; (8002790 <HAL_RCC_OscConfig+0x2ac>)
 8002690:	4313      	orrs	r3, r2
 8002692:	600b      	str	r3, [r1, #0]
 8002694:	e015      	b.n	80026c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002696:	4b3f      	ldr	r3, [pc, #252]	; (8002794 <HAL_RCC_OscConfig+0x2b0>)
 8002698:	2200      	movs	r2, #0
 800269a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800269c:	f7ff f8a0 	bl	80017e0 <HAL_GetTick>
 80026a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026a2:	e008      	b.n	80026b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026a4:	f7ff f89c 	bl	80017e0 <HAL_GetTick>
 80026a8:	4602      	mov	r2, r0
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d901      	bls.n	80026b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e184      	b.n	80029c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026b6:	4b36      	ldr	r3, [pc, #216]	; (8002790 <HAL_RCC_OscConfig+0x2ac>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 0302 	and.w	r3, r3, #2
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d1f0      	bne.n	80026a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 0308 	and.w	r3, r3, #8
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d030      	beq.n	8002730 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	695b      	ldr	r3, [r3, #20]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d016      	beq.n	8002704 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026d6:	4b30      	ldr	r3, [pc, #192]	; (8002798 <HAL_RCC_OscConfig+0x2b4>)
 80026d8:	2201      	movs	r2, #1
 80026da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026dc:	f7ff f880 	bl	80017e0 <HAL_GetTick>
 80026e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026e2:	e008      	b.n	80026f6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026e4:	f7ff f87c 	bl	80017e0 <HAL_GetTick>
 80026e8:	4602      	mov	r2, r0
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	2b02      	cmp	r3, #2
 80026f0:	d901      	bls.n	80026f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	e164      	b.n	80029c0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026f6:	4b26      	ldr	r3, [pc, #152]	; (8002790 <HAL_RCC_OscConfig+0x2ac>)
 80026f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026fa:	f003 0302 	and.w	r3, r3, #2
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d0f0      	beq.n	80026e4 <HAL_RCC_OscConfig+0x200>
 8002702:	e015      	b.n	8002730 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002704:	4b24      	ldr	r3, [pc, #144]	; (8002798 <HAL_RCC_OscConfig+0x2b4>)
 8002706:	2200      	movs	r2, #0
 8002708:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800270a:	f7ff f869 	bl	80017e0 <HAL_GetTick>
 800270e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002710:	e008      	b.n	8002724 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002712:	f7ff f865 	bl	80017e0 <HAL_GetTick>
 8002716:	4602      	mov	r2, r0
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	2b02      	cmp	r3, #2
 800271e:	d901      	bls.n	8002724 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002720:	2303      	movs	r3, #3
 8002722:	e14d      	b.n	80029c0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002724:	4b1a      	ldr	r3, [pc, #104]	; (8002790 <HAL_RCC_OscConfig+0x2ac>)
 8002726:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002728:	f003 0302 	and.w	r3, r3, #2
 800272c:	2b00      	cmp	r3, #0
 800272e:	d1f0      	bne.n	8002712 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 0304 	and.w	r3, r3, #4
 8002738:	2b00      	cmp	r3, #0
 800273a:	f000 80a0 	beq.w	800287e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800273e:	2300      	movs	r3, #0
 8002740:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002742:	4b13      	ldr	r3, [pc, #76]	; (8002790 <HAL_RCC_OscConfig+0x2ac>)
 8002744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d10f      	bne.n	800276e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800274e:	2300      	movs	r3, #0
 8002750:	60bb      	str	r3, [r7, #8]
 8002752:	4b0f      	ldr	r3, [pc, #60]	; (8002790 <HAL_RCC_OscConfig+0x2ac>)
 8002754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002756:	4a0e      	ldr	r2, [pc, #56]	; (8002790 <HAL_RCC_OscConfig+0x2ac>)
 8002758:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800275c:	6413      	str	r3, [r2, #64]	; 0x40
 800275e:	4b0c      	ldr	r3, [pc, #48]	; (8002790 <HAL_RCC_OscConfig+0x2ac>)
 8002760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002766:	60bb      	str	r3, [r7, #8]
 8002768:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800276a:	2301      	movs	r3, #1
 800276c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800276e:	4b0b      	ldr	r3, [pc, #44]	; (800279c <HAL_RCC_OscConfig+0x2b8>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002776:	2b00      	cmp	r3, #0
 8002778:	d121      	bne.n	80027be <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800277a:	4b08      	ldr	r3, [pc, #32]	; (800279c <HAL_RCC_OscConfig+0x2b8>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a07      	ldr	r2, [pc, #28]	; (800279c <HAL_RCC_OscConfig+0x2b8>)
 8002780:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002784:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002786:	f7ff f82b 	bl	80017e0 <HAL_GetTick>
 800278a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800278c:	e011      	b.n	80027b2 <HAL_RCC_OscConfig+0x2ce>
 800278e:	bf00      	nop
 8002790:	40023800 	.word	0x40023800
 8002794:	42470000 	.word	0x42470000
 8002798:	42470e80 	.word	0x42470e80
 800279c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027a0:	f7ff f81e 	bl	80017e0 <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d901      	bls.n	80027b2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e106      	b.n	80029c0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027b2:	4b85      	ldr	r3, [pc, #532]	; (80029c8 <HAL_RCC_OscConfig+0x4e4>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d0f0      	beq.n	80027a0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d106      	bne.n	80027d4 <HAL_RCC_OscConfig+0x2f0>
 80027c6:	4b81      	ldr	r3, [pc, #516]	; (80029cc <HAL_RCC_OscConfig+0x4e8>)
 80027c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ca:	4a80      	ldr	r2, [pc, #512]	; (80029cc <HAL_RCC_OscConfig+0x4e8>)
 80027cc:	f043 0301 	orr.w	r3, r3, #1
 80027d0:	6713      	str	r3, [r2, #112]	; 0x70
 80027d2:	e01c      	b.n	800280e <HAL_RCC_OscConfig+0x32a>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	2b05      	cmp	r3, #5
 80027da:	d10c      	bne.n	80027f6 <HAL_RCC_OscConfig+0x312>
 80027dc:	4b7b      	ldr	r3, [pc, #492]	; (80029cc <HAL_RCC_OscConfig+0x4e8>)
 80027de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027e0:	4a7a      	ldr	r2, [pc, #488]	; (80029cc <HAL_RCC_OscConfig+0x4e8>)
 80027e2:	f043 0304 	orr.w	r3, r3, #4
 80027e6:	6713      	str	r3, [r2, #112]	; 0x70
 80027e8:	4b78      	ldr	r3, [pc, #480]	; (80029cc <HAL_RCC_OscConfig+0x4e8>)
 80027ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ec:	4a77      	ldr	r2, [pc, #476]	; (80029cc <HAL_RCC_OscConfig+0x4e8>)
 80027ee:	f043 0301 	orr.w	r3, r3, #1
 80027f2:	6713      	str	r3, [r2, #112]	; 0x70
 80027f4:	e00b      	b.n	800280e <HAL_RCC_OscConfig+0x32a>
 80027f6:	4b75      	ldr	r3, [pc, #468]	; (80029cc <HAL_RCC_OscConfig+0x4e8>)
 80027f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027fa:	4a74      	ldr	r2, [pc, #464]	; (80029cc <HAL_RCC_OscConfig+0x4e8>)
 80027fc:	f023 0301 	bic.w	r3, r3, #1
 8002800:	6713      	str	r3, [r2, #112]	; 0x70
 8002802:	4b72      	ldr	r3, [pc, #456]	; (80029cc <HAL_RCC_OscConfig+0x4e8>)
 8002804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002806:	4a71      	ldr	r2, [pc, #452]	; (80029cc <HAL_RCC_OscConfig+0x4e8>)
 8002808:	f023 0304 	bic.w	r3, r3, #4
 800280c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d015      	beq.n	8002842 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002816:	f7fe ffe3 	bl	80017e0 <HAL_GetTick>
 800281a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800281c:	e00a      	b.n	8002834 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800281e:	f7fe ffdf 	bl	80017e0 <HAL_GetTick>
 8002822:	4602      	mov	r2, r0
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	f241 3288 	movw	r2, #5000	; 0x1388
 800282c:	4293      	cmp	r3, r2
 800282e:	d901      	bls.n	8002834 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002830:	2303      	movs	r3, #3
 8002832:	e0c5      	b.n	80029c0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002834:	4b65      	ldr	r3, [pc, #404]	; (80029cc <HAL_RCC_OscConfig+0x4e8>)
 8002836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002838:	f003 0302 	and.w	r3, r3, #2
 800283c:	2b00      	cmp	r3, #0
 800283e:	d0ee      	beq.n	800281e <HAL_RCC_OscConfig+0x33a>
 8002840:	e014      	b.n	800286c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002842:	f7fe ffcd 	bl	80017e0 <HAL_GetTick>
 8002846:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002848:	e00a      	b.n	8002860 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800284a:	f7fe ffc9 	bl	80017e0 <HAL_GetTick>
 800284e:	4602      	mov	r2, r0
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	1ad3      	subs	r3, r2, r3
 8002854:	f241 3288 	movw	r2, #5000	; 0x1388
 8002858:	4293      	cmp	r3, r2
 800285a:	d901      	bls.n	8002860 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800285c:	2303      	movs	r3, #3
 800285e:	e0af      	b.n	80029c0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002860:	4b5a      	ldr	r3, [pc, #360]	; (80029cc <HAL_RCC_OscConfig+0x4e8>)
 8002862:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002864:	f003 0302 	and.w	r3, r3, #2
 8002868:	2b00      	cmp	r3, #0
 800286a:	d1ee      	bne.n	800284a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800286c:	7dfb      	ldrb	r3, [r7, #23]
 800286e:	2b01      	cmp	r3, #1
 8002870:	d105      	bne.n	800287e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002872:	4b56      	ldr	r3, [pc, #344]	; (80029cc <HAL_RCC_OscConfig+0x4e8>)
 8002874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002876:	4a55      	ldr	r2, [pc, #340]	; (80029cc <HAL_RCC_OscConfig+0x4e8>)
 8002878:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800287c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	699b      	ldr	r3, [r3, #24]
 8002882:	2b00      	cmp	r3, #0
 8002884:	f000 809b 	beq.w	80029be <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002888:	4b50      	ldr	r3, [pc, #320]	; (80029cc <HAL_RCC_OscConfig+0x4e8>)
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	f003 030c 	and.w	r3, r3, #12
 8002890:	2b08      	cmp	r3, #8
 8002892:	d05c      	beq.n	800294e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	699b      	ldr	r3, [r3, #24]
 8002898:	2b02      	cmp	r3, #2
 800289a:	d141      	bne.n	8002920 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800289c:	4b4c      	ldr	r3, [pc, #304]	; (80029d0 <HAL_RCC_OscConfig+0x4ec>)
 800289e:	2200      	movs	r2, #0
 80028a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028a2:	f7fe ff9d 	bl	80017e0 <HAL_GetTick>
 80028a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028a8:	e008      	b.n	80028bc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028aa:	f7fe ff99 	bl	80017e0 <HAL_GetTick>
 80028ae:	4602      	mov	r2, r0
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	1ad3      	subs	r3, r2, r3
 80028b4:	2b02      	cmp	r3, #2
 80028b6:	d901      	bls.n	80028bc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80028b8:	2303      	movs	r3, #3
 80028ba:	e081      	b.n	80029c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028bc:	4b43      	ldr	r3, [pc, #268]	; (80029cc <HAL_RCC_OscConfig+0x4e8>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d1f0      	bne.n	80028aa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	69da      	ldr	r2, [r3, #28]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6a1b      	ldr	r3, [r3, #32]
 80028d0:	431a      	orrs	r2, r3
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d6:	019b      	lsls	r3, r3, #6
 80028d8:	431a      	orrs	r2, r3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028de:	085b      	lsrs	r3, r3, #1
 80028e0:	3b01      	subs	r3, #1
 80028e2:	041b      	lsls	r3, r3, #16
 80028e4:	431a      	orrs	r2, r3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ea:	061b      	lsls	r3, r3, #24
 80028ec:	4937      	ldr	r1, [pc, #220]	; (80029cc <HAL_RCC_OscConfig+0x4e8>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028f2:	4b37      	ldr	r3, [pc, #220]	; (80029d0 <HAL_RCC_OscConfig+0x4ec>)
 80028f4:	2201      	movs	r2, #1
 80028f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028f8:	f7fe ff72 	bl	80017e0 <HAL_GetTick>
 80028fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028fe:	e008      	b.n	8002912 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002900:	f7fe ff6e 	bl	80017e0 <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	2b02      	cmp	r3, #2
 800290c:	d901      	bls.n	8002912 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e056      	b.n	80029c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002912:	4b2e      	ldr	r3, [pc, #184]	; (80029cc <HAL_RCC_OscConfig+0x4e8>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d0f0      	beq.n	8002900 <HAL_RCC_OscConfig+0x41c>
 800291e:	e04e      	b.n	80029be <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002920:	4b2b      	ldr	r3, [pc, #172]	; (80029d0 <HAL_RCC_OscConfig+0x4ec>)
 8002922:	2200      	movs	r2, #0
 8002924:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002926:	f7fe ff5b 	bl	80017e0 <HAL_GetTick>
 800292a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800292c:	e008      	b.n	8002940 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800292e:	f7fe ff57 	bl	80017e0 <HAL_GetTick>
 8002932:	4602      	mov	r2, r0
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	1ad3      	subs	r3, r2, r3
 8002938:	2b02      	cmp	r3, #2
 800293a:	d901      	bls.n	8002940 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800293c:	2303      	movs	r3, #3
 800293e:	e03f      	b.n	80029c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002940:	4b22      	ldr	r3, [pc, #136]	; (80029cc <HAL_RCC_OscConfig+0x4e8>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002948:	2b00      	cmp	r3, #0
 800294a:	d1f0      	bne.n	800292e <HAL_RCC_OscConfig+0x44a>
 800294c:	e037      	b.n	80029be <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	699b      	ldr	r3, [r3, #24]
 8002952:	2b01      	cmp	r3, #1
 8002954:	d101      	bne.n	800295a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e032      	b.n	80029c0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800295a:	4b1c      	ldr	r3, [pc, #112]	; (80029cc <HAL_RCC_OscConfig+0x4e8>)
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	699b      	ldr	r3, [r3, #24]
 8002964:	2b01      	cmp	r3, #1
 8002966:	d028      	beq.n	80029ba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002972:	429a      	cmp	r2, r3
 8002974:	d121      	bne.n	80029ba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002980:	429a      	cmp	r2, r3
 8002982:	d11a      	bne.n	80029ba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002984:	68fa      	ldr	r2, [r7, #12]
 8002986:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800298a:	4013      	ands	r3, r2
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002990:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002992:	4293      	cmp	r3, r2
 8002994:	d111      	bne.n	80029ba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a0:	085b      	lsrs	r3, r3, #1
 80029a2:	3b01      	subs	r3, #1
 80029a4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d107      	bne.n	80029ba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d001      	beq.n	80029be <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e000      	b.n	80029c0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80029be:	2300      	movs	r3, #0
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3718      	adds	r7, #24
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	40007000 	.word	0x40007000
 80029cc:	40023800 	.word	0x40023800
 80029d0:	42470060 	.word	0x42470060

080029d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b084      	sub	sp, #16
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d101      	bne.n	80029e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e0cc      	b.n	8002b82 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029e8:	4b68      	ldr	r3, [pc, #416]	; (8002b8c <HAL_RCC_ClockConfig+0x1b8>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0307 	and.w	r3, r3, #7
 80029f0:	683a      	ldr	r2, [r7, #0]
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d90c      	bls.n	8002a10 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029f6:	4b65      	ldr	r3, [pc, #404]	; (8002b8c <HAL_RCC_ClockConfig+0x1b8>)
 80029f8:	683a      	ldr	r2, [r7, #0]
 80029fa:	b2d2      	uxtb	r2, r2
 80029fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029fe:	4b63      	ldr	r3, [pc, #396]	; (8002b8c <HAL_RCC_ClockConfig+0x1b8>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0307 	and.w	r3, r3, #7
 8002a06:	683a      	ldr	r2, [r7, #0]
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d001      	beq.n	8002a10 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e0b8      	b.n	8002b82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0302 	and.w	r3, r3, #2
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d020      	beq.n	8002a5e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0304 	and.w	r3, r3, #4
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d005      	beq.n	8002a34 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a28:	4b59      	ldr	r3, [pc, #356]	; (8002b90 <HAL_RCC_ClockConfig+0x1bc>)
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	4a58      	ldr	r2, [pc, #352]	; (8002b90 <HAL_RCC_ClockConfig+0x1bc>)
 8002a2e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a32:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0308 	and.w	r3, r3, #8
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d005      	beq.n	8002a4c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a40:	4b53      	ldr	r3, [pc, #332]	; (8002b90 <HAL_RCC_ClockConfig+0x1bc>)
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	4a52      	ldr	r2, [pc, #328]	; (8002b90 <HAL_RCC_ClockConfig+0x1bc>)
 8002a46:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a4a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a4c:	4b50      	ldr	r3, [pc, #320]	; (8002b90 <HAL_RCC_ClockConfig+0x1bc>)
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	494d      	ldr	r1, [pc, #308]	; (8002b90 <HAL_RCC_ClockConfig+0x1bc>)
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0301 	and.w	r3, r3, #1
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d044      	beq.n	8002af4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d107      	bne.n	8002a82 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a72:	4b47      	ldr	r3, [pc, #284]	; (8002b90 <HAL_RCC_ClockConfig+0x1bc>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d119      	bne.n	8002ab2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e07f      	b.n	8002b82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d003      	beq.n	8002a92 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a8e:	2b03      	cmp	r3, #3
 8002a90:	d107      	bne.n	8002aa2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a92:	4b3f      	ldr	r3, [pc, #252]	; (8002b90 <HAL_RCC_ClockConfig+0x1bc>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d109      	bne.n	8002ab2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e06f      	b.n	8002b82 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aa2:	4b3b      	ldr	r3, [pc, #236]	; (8002b90 <HAL_RCC_ClockConfig+0x1bc>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0302 	and.w	r3, r3, #2
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d101      	bne.n	8002ab2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e067      	b.n	8002b82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ab2:	4b37      	ldr	r3, [pc, #220]	; (8002b90 <HAL_RCC_ClockConfig+0x1bc>)
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	f023 0203 	bic.w	r2, r3, #3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	4934      	ldr	r1, [pc, #208]	; (8002b90 <HAL_RCC_ClockConfig+0x1bc>)
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ac4:	f7fe fe8c 	bl	80017e0 <HAL_GetTick>
 8002ac8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aca:	e00a      	b.n	8002ae2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002acc:	f7fe fe88 	bl	80017e0 <HAL_GetTick>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d901      	bls.n	8002ae2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e04f      	b.n	8002b82 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ae2:	4b2b      	ldr	r3, [pc, #172]	; (8002b90 <HAL_RCC_ClockConfig+0x1bc>)
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	f003 020c 	and.w	r2, r3, #12
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d1eb      	bne.n	8002acc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002af4:	4b25      	ldr	r3, [pc, #148]	; (8002b8c <HAL_RCC_ClockConfig+0x1b8>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 0307 	and.w	r3, r3, #7
 8002afc:	683a      	ldr	r2, [r7, #0]
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d20c      	bcs.n	8002b1c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b02:	4b22      	ldr	r3, [pc, #136]	; (8002b8c <HAL_RCC_ClockConfig+0x1b8>)
 8002b04:	683a      	ldr	r2, [r7, #0]
 8002b06:	b2d2      	uxtb	r2, r2
 8002b08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b0a:	4b20      	ldr	r3, [pc, #128]	; (8002b8c <HAL_RCC_ClockConfig+0x1b8>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0307 	and.w	r3, r3, #7
 8002b12:	683a      	ldr	r2, [r7, #0]
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d001      	beq.n	8002b1c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e032      	b.n	8002b82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0304 	and.w	r3, r3, #4
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d008      	beq.n	8002b3a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b28:	4b19      	ldr	r3, [pc, #100]	; (8002b90 <HAL_RCC_ClockConfig+0x1bc>)
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	4916      	ldr	r1, [pc, #88]	; (8002b90 <HAL_RCC_ClockConfig+0x1bc>)
 8002b36:	4313      	orrs	r3, r2
 8002b38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0308 	and.w	r3, r3, #8
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d009      	beq.n	8002b5a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b46:	4b12      	ldr	r3, [pc, #72]	; (8002b90 <HAL_RCC_ClockConfig+0x1bc>)
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	691b      	ldr	r3, [r3, #16]
 8002b52:	00db      	lsls	r3, r3, #3
 8002b54:	490e      	ldr	r1, [pc, #56]	; (8002b90 <HAL_RCC_ClockConfig+0x1bc>)
 8002b56:	4313      	orrs	r3, r2
 8002b58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b5a:	f000 f821 	bl	8002ba0 <HAL_RCC_GetSysClockFreq>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	4b0b      	ldr	r3, [pc, #44]	; (8002b90 <HAL_RCC_ClockConfig+0x1bc>)
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	091b      	lsrs	r3, r3, #4
 8002b66:	f003 030f 	and.w	r3, r3, #15
 8002b6a:	490a      	ldr	r1, [pc, #40]	; (8002b94 <HAL_RCC_ClockConfig+0x1c0>)
 8002b6c:	5ccb      	ldrb	r3, [r1, r3]
 8002b6e:	fa22 f303 	lsr.w	r3, r2, r3
 8002b72:	4a09      	ldr	r2, [pc, #36]	; (8002b98 <HAL_RCC_ClockConfig+0x1c4>)
 8002b74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b76:	4b09      	ldr	r3, [pc, #36]	; (8002b9c <HAL_RCC_ClockConfig+0x1c8>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f7fe fdec 	bl	8001758 <HAL_InitTick>

  return HAL_OK;
 8002b80:	2300      	movs	r3, #0
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3710      	adds	r7, #16
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	40023c00 	.word	0x40023c00
 8002b90:	40023800 	.word	0x40023800
 8002b94:	08004a48 	.word	0x08004a48
 8002b98:	20000014 	.word	0x20000014
 8002b9c:	20000018 	.word	0x20000018

08002ba0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ba0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002ba4:	b084      	sub	sp, #16
 8002ba6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	607b      	str	r3, [r7, #4]
 8002bac:	2300      	movs	r3, #0
 8002bae:	60fb      	str	r3, [r7, #12]
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002bb8:	4b67      	ldr	r3, [pc, #412]	; (8002d58 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	f003 030c 	and.w	r3, r3, #12
 8002bc0:	2b08      	cmp	r3, #8
 8002bc2:	d00d      	beq.n	8002be0 <HAL_RCC_GetSysClockFreq+0x40>
 8002bc4:	2b08      	cmp	r3, #8
 8002bc6:	f200 80bd 	bhi.w	8002d44 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d002      	beq.n	8002bd4 <HAL_RCC_GetSysClockFreq+0x34>
 8002bce:	2b04      	cmp	r3, #4
 8002bd0:	d003      	beq.n	8002bda <HAL_RCC_GetSysClockFreq+0x3a>
 8002bd2:	e0b7      	b.n	8002d44 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002bd4:	4b61      	ldr	r3, [pc, #388]	; (8002d5c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002bd6:	60bb      	str	r3, [r7, #8]
       break;
 8002bd8:	e0b7      	b.n	8002d4a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002bda:	4b61      	ldr	r3, [pc, #388]	; (8002d60 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002bdc:	60bb      	str	r3, [r7, #8]
      break;
 8002bde:	e0b4      	b.n	8002d4a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002be0:	4b5d      	ldr	r3, [pc, #372]	; (8002d58 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002be8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002bea:	4b5b      	ldr	r3, [pc, #364]	; (8002d58 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d04d      	beq.n	8002c92 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bf6:	4b58      	ldr	r3, [pc, #352]	; (8002d58 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	099b      	lsrs	r3, r3, #6
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	f04f 0300 	mov.w	r3, #0
 8002c02:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002c06:	f04f 0100 	mov.w	r1, #0
 8002c0a:	ea02 0800 	and.w	r8, r2, r0
 8002c0e:	ea03 0901 	and.w	r9, r3, r1
 8002c12:	4640      	mov	r0, r8
 8002c14:	4649      	mov	r1, r9
 8002c16:	f04f 0200 	mov.w	r2, #0
 8002c1a:	f04f 0300 	mov.w	r3, #0
 8002c1e:	014b      	lsls	r3, r1, #5
 8002c20:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002c24:	0142      	lsls	r2, r0, #5
 8002c26:	4610      	mov	r0, r2
 8002c28:	4619      	mov	r1, r3
 8002c2a:	ebb0 0008 	subs.w	r0, r0, r8
 8002c2e:	eb61 0109 	sbc.w	r1, r1, r9
 8002c32:	f04f 0200 	mov.w	r2, #0
 8002c36:	f04f 0300 	mov.w	r3, #0
 8002c3a:	018b      	lsls	r3, r1, #6
 8002c3c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002c40:	0182      	lsls	r2, r0, #6
 8002c42:	1a12      	subs	r2, r2, r0
 8002c44:	eb63 0301 	sbc.w	r3, r3, r1
 8002c48:	f04f 0000 	mov.w	r0, #0
 8002c4c:	f04f 0100 	mov.w	r1, #0
 8002c50:	00d9      	lsls	r1, r3, #3
 8002c52:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002c56:	00d0      	lsls	r0, r2, #3
 8002c58:	4602      	mov	r2, r0
 8002c5a:	460b      	mov	r3, r1
 8002c5c:	eb12 0208 	adds.w	r2, r2, r8
 8002c60:	eb43 0309 	adc.w	r3, r3, r9
 8002c64:	f04f 0000 	mov.w	r0, #0
 8002c68:	f04f 0100 	mov.w	r1, #0
 8002c6c:	0259      	lsls	r1, r3, #9
 8002c6e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002c72:	0250      	lsls	r0, r2, #9
 8002c74:	4602      	mov	r2, r0
 8002c76:	460b      	mov	r3, r1
 8002c78:	4610      	mov	r0, r2
 8002c7a:	4619      	mov	r1, r3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	461a      	mov	r2, r3
 8002c80:	f04f 0300 	mov.w	r3, #0
 8002c84:	f7fd fab0 	bl	80001e8 <__aeabi_uldivmod>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	460b      	mov	r3, r1
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	60fb      	str	r3, [r7, #12]
 8002c90:	e04a      	b.n	8002d28 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c92:	4b31      	ldr	r3, [pc, #196]	; (8002d58 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	099b      	lsrs	r3, r3, #6
 8002c98:	461a      	mov	r2, r3
 8002c9a:	f04f 0300 	mov.w	r3, #0
 8002c9e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002ca2:	f04f 0100 	mov.w	r1, #0
 8002ca6:	ea02 0400 	and.w	r4, r2, r0
 8002caa:	ea03 0501 	and.w	r5, r3, r1
 8002cae:	4620      	mov	r0, r4
 8002cb0:	4629      	mov	r1, r5
 8002cb2:	f04f 0200 	mov.w	r2, #0
 8002cb6:	f04f 0300 	mov.w	r3, #0
 8002cba:	014b      	lsls	r3, r1, #5
 8002cbc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002cc0:	0142      	lsls	r2, r0, #5
 8002cc2:	4610      	mov	r0, r2
 8002cc4:	4619      	mov	r1, r3
 8002cc6:	1b00      	subs	r0, r0, r4
 8002cc8:	eb61 0105 	sbc.w	r1, r1, r5
 8002ccc:	f04f 0200 	mov.w	r2, #0
 8002cd0:	f04f 0300 	mov.w	r3, #0
 8002cd4:	018b      	lsls	r3, r1, #6
 8002cd6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002cda:	0182      	lsls	r2, r0, #6
 8002cdc:	1a12      	subs	r2, r2, r0
 8002cde:	eb63 0301 	sbc.w	r3, r3, r1
 8002ce2:	f04f 0000 	mov.w	r0, #0
 8002ce6:	f04f 0100 	mov.w	r1, #0
 8002cea:	00d9      	lsls	r1, r3, #3
 8002cec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002cf0:	00d0      	lsls	r0, r2, #3
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	460b      	mov	r3, r1
 8002cf6:	1912      	adds	r2, r2, r4
 8002cf8:	eb45 0303 	adc.w	r3, r5, r3
 8002cfc:	f04f 0000 	mov.w	r0, #0
 8002d00:	f04f 0100 	mov.w	r1, #0
 8002d04:	0299      	lsls	r1, r3, #10
 8002d06:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002d0a:	0290      	lsls	r0, r2, #10
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	460b      	mov	r3, r1
 8002d10:	4610      	mov	r0, r2
 8002d12:	4619      	mov	r1, r3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	461a      	mov	r2, r3
 8002d18:	f04f 0300 	mov.w	r3, #0
 8002d1c:	f7fd fa64 	bl	80001e8 <__aeabi_uldivmod>
 8002d20:	4602      	mov	r2, r0
 8002d22:	460b      	mov	r3, r1
 8002d24:	4613      	mov	r3, r2
 8002d26:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002d28:	4b0b      	ldr	r3, [pc, #44]	; (8002d58 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	0c1b      	lsrs	r3, r3, #16
 8002d2e:	f003 0303 	and.w	r3, r3, #3
 8002d32:	3301      	adds	r3, #1
 8002d34:	005b      	lsls	r3, r3, #1
 8002d36:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002d38:	68fa      	ldr	r2, [r7, #12]
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d40:	60bb      	str	r3, [r7, #8]
      break;
 8002d42:	e002      	b.n	8002d4a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d44:	4b05      	ldr	r3, [pc, #20]	; (8002d5c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002d46:	60bb      	str	r3, [r7, #8]
      break;
 8002d48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d4a:	68bb      	ldr	r3, [r7, #8]
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3710      	adds	r7, #16
 8002d50:	46bd      	mov	sp, r7
 8002d52:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002d56:	bf00      	nop
 8002d58:	40023800 	.word	0x40023800
 8002d5c:	00f42400 	.word	0x00f42400
 8002d60:	007a1200 	.word	0x007a1200

08002d64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d64:	b480      	push	{r7}
 8002d66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d68:	4b03      	ldr	r3, [pc, #12]	; (8002d78 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	20000014 	.word	0x20000014

08002d7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002d80:	f7ff fff0 	bl	8002d64 <HAL_RCC_GetHCLKFreq>
 8002d84:	4602      	mov	r2, r0
 8002d86:	4b05      	ldr	r3, [pc, #20]	; (8002d9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	0a9b      	lsrs	r3, r3, #10
 8002d8c:	f003 0307 	and.w	r3, r3, #7
 8002d90:	4903      	ldr	r1, [pc, #12]	; (8002da0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d92:	5ccb      	ldrb	r3, [r1, r3]
 8002d94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	40023800 	.word	0x40023800
 8002da0:	08004a58 	.word	0x08004a58

08002da4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002da8:	f7ff ffdc 	bl	8002d64 <HAL_RCC_GetHCLKFreq>
 8002dac:	4602      	mov	r2, r0
 8002dae:	4b05      	ldr	r3, [pc, #20]	; (8002dc4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	0b5b      	lsrs	r3, r3, #13
 8002db4:	f003 0307 	and.w	r3, r3, #7
 8002db8:	4903      	ldr	r1, [pc, #12]	; (8002dc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002dba:	5ccb      	ldrb	r3, [r1, r3]
 8002dbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	40023800 	.word	0x40023800
 8002dc8:	08004a58 	.word	0x08004a58

08002dcc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d101      	bne.n	8002dde <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e041      	b.n	8002e62 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d106      	bne.n	8002df8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2200      	movs	r2, #0
 8002dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f7fe fb0a 	bl	800140c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2202      	movs	r2, #2
 8002dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	3304      	adds	r3, #4
 8002e08:	4619      	mov	r1, r3
 8002e0a:	4610      	mov	r0, r2
 8002e0c:	f000 fa10 	bl	8003230 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2201      	movs	r2, #1
 8002e14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2201      	movs	r2, #1
 8002e24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2201      	movs	r2, #1
 8002e44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2201      	movs	r2, #1
 8002e54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e60:	2300      	movs	r3, #0
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3708      	adds	r7, #8
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}

08002e6a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002e6a:	b580      	push	{r7, lr}
 8002e6c:	b082      	sub	sp, #8
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d101      	bne.n	8002e7c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e041      	b.n	8002f00 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d106      	bne.n	8002e96 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f000 f839 	bl	8002f08 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2202      	movs	r2, #2
 8002e9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	3304      	adds	r3, #4
 8002ea6:	4619      	mov	r1, r3
 8002ea8:	4610      	mov	r0, r2
 8002eaa:	f000 f9c1 	bl	8003230 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2201      	movs	r2, #1
 8002eba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2201      	movs	r2, #1
 8002eca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2201      	movs	r2, #1
 8002eda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2201      	movs	r2, #1
 8002eea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2201      	movs	r2, #1
 8002efa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002efe:	2300      	movs	r3, #0
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3708      	adds	r7, #8
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002f10:	bf00      	nop
 8002f12:	370c      	adds	r7, #12
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr

08002f1c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b086      	sub	sp, #24
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	60f8      	str	r0, [r7, #12]
 8002f24:	60b9      	str	r1, [r7, #8]
 8002f26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d101      	bne.n	8002f3a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002f36:	2302      	movs	r3, #2
 8002f38:	e0ae      	b.n	8003098 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2b0c      	cmp	r3, #12
 8002f46:	f200 809f 	bhi.w	8003088 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002f4a:	a201      	add	r2, pc, #4	; (adr r2, 8002f50 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f50:	08002f85 	.word	0x08002f85
 8002f54:	08003089 	.word	0x08003089
 8002f58:	08003089 	.word	0x08003089
 8002f5c:	08003089 	.word	0x08003089
 8002f60:	08002fc5 	.word	0x08002fc5
 8002f64:	08003089 	.word	0x08003089
 8002f68:	08003089 	.word	0x08003089
 8002f6c:	08003089 	.word	0x08003089
 8002f70:	08003007 	.word	0x08003007
 8002f74:	08003089 	.word	0x08003089
 8002f78:	08003089 	.word	0x08003089
 8002f7c:	08003089 	.word	0x08003089
 8002f80:	08003047 	.word	0x08003047
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	68b9      	ldr	r1, [r7, #8]
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f000 f9d0 	bl	8003330 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	699a      	ldr	r2, [r3, #24]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f042 0208 	orr.w	r2, r2, #8
 8002f9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	699a      	ldr	r2, [r3, #24]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f022 0204 	bic.w	r2, r2, #4
 8002fae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	6999      	ldr	r1, [r3, #24]
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	691a      	ldr	r2, [r3, #16]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	430a      	orrs	r2, r1
 8002fc0:	619a      	str	r2, [r3, #24]
      break;
 8002fc2:	e064      	b.n	800308e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	68b9      	ldr	r1, [r7, #8]
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f000 fa16 	bl	80033fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	699a      	ldr	r2, [r3, #24]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002fde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	699a      	ldr	r2, [r3, #24]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	6999      	ldr	r1, [r3, #24]
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	691b      	ldr	r3, [r3, #16]
 8002ffa:	021a      	lsls	r2, r3, #8
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	430a      	orrs	r2, r1
 8003002:	619a      	str	r2, [r3, #24]
      break;
 8003004:	e043      	b.n	800308e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	68b9      	ldr	r1, [r7, #8]
 800300c:	4618      	mov	r0, r3
 800300e:	f000 fa61 	bl	80034d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	69da      	ldr	r2, [r3, #28]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f042 0208 	orr.w	r2, r2, #8
 8003020:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	69da      	ldr	r2, [r3, #28]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f022 0204 	bic.w	r2, r2, #4
 8003030:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	69d9      	ldr	r1, [r3, #28]
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	691a      	ldr	r2, [r3, #16]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	430a      	orrs	r2, r1
 8003042:	61da      	str	r2, [r3, #28]
      break;
 8003044:	e023      	b.n	800308e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	68b9      	ldr	r1, [r7, #8]
 800304c:	4618      	mov	r0, r3
 800304e:	f000 faab 	bl	80035a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	69da      	ldr	r2, [r3, #28]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003060:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	69da      	ldr	r2, [r3, #28]
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003070:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	69d9      	ldr	r1, [r3, #28]
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	691b      	ldr	r3, [r3, #16]
 800307c:	021a      	lsls	r2, r3, #8
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	430a      	orrs	r2, r1
 8003084:	61da      	str	r2, [r3, #28]
      break;
 8003086:	e002      	b.n	800308e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	75fb      	strb	r3, [r7, #23]
      break;
 800308c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2200      	movs	r2, #0
 8003092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003096:	7dfb      	ldrb	r3, [r7, #23]
}
 8003098:	4618      	mov	r0, r3
 800309a:	3718      	adds	r7, #24
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}

080030a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b084      	sub	sp, #16
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030aa:	2300      	movs	r3, #0
 80030ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d101      	bne.n	80030bc <HAL_TIM_ConfigClockSource+0x1c>
 80030b8:	2302      	movs	r3, #2
 80030ba:	e0b4      	b.n	8003226 <HAL_TIM_ConfigClockSource+0x186>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2201      	movs	r2, #1
 80030c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2202      	movs	r2, #2
 80030c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80030da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	68ba      	ldr	r2, [r7, #8]
 80030ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030f4:	d03e      	beq.n	8003174 <HAL_TIM_ConfigClockSource+0xd4>
 80030f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030fa:	f200 8087 	bhi.w	800320c <HAL_TIM_ConfigClockSource+0x16c>
 80030fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003102:	f000 8086 	beq.w	8003212 <HAL_TIM_ConfigClockSource+0x172>
 8003106:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800310a:	d87f      	bhi.n	800320c <HAL_TIM_ConfigClockSource+0x16c>
 800310c:	2b70      	cmp	r3, #112	; 0x70
 800310e:	d01a      	beq.n	8003146 <HAL_TIM_ConfigClockSource+0xa6>
 8003110:	2b70      	cmp	r3, #112	; 0x70
 8003112:	d87b      	bhi.n	800320c <HAL_TIM_ConfigClockSource+0x16c>
 8003114:	2b60      	cmp	r3, #96	; 0x60
 8003116:	d050      	beq.n	80031ba <HAL_TIM_ConfigClockSource+0x11a>
 8003118:	2b60      	cmp	r3, #96	; 0x60
 800311a:	d877      	bhi.n	800320c <HAL_TIM_ConfigClockSource+0x16c>
 800311c:	2b50      	cmp	r3, #80	; 0x50
 800311e:	d03c      	beq.n	800319a <HAL_TIM_ConfigClockSource+0xfa>
 8003120:	2b50      	cmp	r3, #80	; 0x50
 8003122:	d873      	bhi.n	800320c <HAL_TIM_ConfigClockSource+0x16c>
 8003124:	2b40      	cmp	r3, #64	; 0x40
 8003126:	d058      	beq.n	80031da <HAL_TIM_ConfigClockSource+0x13a>
 8003128:	2b40      	cmp	r3, #64	; 0x40
 800312a:	d86f      	bhi.n	800320c <HAL_TIM_ConfigClockSource+0x16c>
 800312c:	2b30      	cmp	r3, #48	; 0x30
 800312e:	d064      	beq.n	80031fa <HAL_TIM_ConfigClockSource+0x15a>
 8003130:	2b30      	cmp	r3, #48	; 0x30
 8003132:	d86b      	bhi.n	800320c <HAL_TIM_ConfigClockSource+0x16c>
 8003134:	2b20      	cmp	r3, #32
 8003136:	d060      	beq.n	80031fa <HAL_TIM_ConfigClockSource+0x15a>
 8003138:	2b20      	cmp	r3, #32
 800313a:	d867      	bhi.n	800320c <HAL_TIM_ConfigClockSource+0x16c>
 800313c:	2b00      	cmp	r3, #0
 800313e:	d05c      	beq.n	80031fa <HAL_TIM_ConfigClockSource+0x15a>
 8003140:	2b10      	cmp	r3, #16
 8003142:	d05a      	beq.n	80031fa <HAL_TIM_ConfigClockSource+0x15a>
 8003144:	e062      	b.n	800320c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6818      	ldr	r0, [r3, #0]
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	6899      	ldr	r1, [r3, #8]
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	685a      	ldr	r2, [r3, #4]
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	68db      	ldr	r3, [r3, #12]
 8003156:	f000 faf1 	bl	800373c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003168:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	68ba      	ldr	r2, [r7, #8]
 8003170:	609a      	str	r2, [r3, #8]
      break;
 8003172:	e04f      	b.n	8003214 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6818      	ldr	r0, [r3, #0]
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	6899      	ldr	r1, [r3, #8]
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	685a      	ldr	r2, [r3, #4]
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	f000 fada 	bl	800373c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	689a      	ldr	r2, [r3, #8]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003196:	609a      	str	r2, [r3, #8]
      break;
 8003198:	e03c      	b.n	8003214 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6818      	ldr	r0, [r3, #0]
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	6859      	ldr	r1, [r3, #4]
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	461a      	mov	r2, r3
 80031a8:	f000 fa4e 	bl	8003648 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	2150      	movs	r1, #80	; 0x50
 80031b2:	4618      	mov	r0, r3
 80031b4:	f000 faa7 	bl	8003706 <TIM_ITRx_SetConfig>
      break;
 80031b8:	e02c      	b.n	8003214 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6818      	ldr	r0, [r3, #0]
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	6859      	ldr	r1, [r3, #4]
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	68db      	ldr	r3, [r3, #12]
 80031c6:	461a      	mov	r2, r3
 80031c8:	f000 fa6d 	bl	80036a6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	2160      	movs	r1, #96	; 0x60
 80031d2:	4618      	mov	r0, r3
 80031d4:	f000 fa97 	bl	8003706 <TIM_ITRx_SetConfig>
      break;
 80031d8:	e01c      	b.n	8003214 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6818      	ldr	r0, [r3, #0]
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	6859      	ldr	r1, [r3, #4]
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	68db      	ldr	r3, [r3, #12]
 80031e6:	461a      	mov	r2, r3
 80031e8:	f000 fa2e 	bl	8003648 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	2140      	movs	r1, #64	; 0x40
 80031f2:	4618      	mov	r0, r3
 80031f4:	f000 fa87 	bl	8003706 <TIM_ITRx_SetConfig>
      break;
 80031f8:	e00c      	b.n	8003214 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4619      	mov	r1, r3
 8003204:	4610      	mov	r0, r2
 8003206:	f000 fa7e 	bl	8003706 <TIM_ITRx_SetConfig>
      break;
 800320a:	e003      	b.n	8003214 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	73fb      	strb	r3, [r7, #15]
      break;
 8003210:	e000      	b.n	8003214 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003212:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2201      	movs	r2, #1
 8003218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2200      	movs	r2, #0
 8003220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003224:	7bfb      	ldrb	r3, [r7, #15]
}
 8003226:	4618      	mov	r0, r3
 8003228:	3710      	adds	r7, #16
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
	...

08003230 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003230:	b480      	push	{r7}
 8003232:	b085      	sub	sp, #20
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	4a34      	ldr	r2, [pc, #208]	; (8003314 <TIM_Base_SetConfig+0xe4>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d00f      	beq.n	8003268 <TIM_Base_SetConfig+0x38>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800324e:	d00b      	beq.n	8003268 <TIM_Base_SetConfig+0x38>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	4a31      	ldr	r2, [pc, #196]	; (8003318 <TIM_Base_SetConfig+0xe8>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d007      	beq.n	8003268 <TIM_Base_SetConfig+0x38>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	4a30      	ldr	r2, [pc, #192]	; (800331c <TIM_Base_SetConfig+0xec>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d003      	beq.n	8003268 <TIM_Base_SetConfig+0x38>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	4a2f      	ldr	r2, [pc, #188]	; (8003320 <TIM_Base_SetConfig+0xf0>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d108      	bne.n	800327a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800326e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	68fa      	ldr	r2, [r7, #12]
 8003276:	4313      	orrs	r3, r2
 8003278:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4a25      	ldr	r2, [pc, #148]	; (8003314 <TIM_Base_SetConfig+0xe4>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d01b      	beq.n	80032ba <TIM_Base_SetConfig+0x8a>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003288:	d017      	beq.n	80032ba <TIM_Base_SetConfig+0x8a>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4a22      	ldr	r2, [pc, #136]	; (8003318 <TIM_Base_SetConfig+0xe8>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d013      	beq.n	80032ba <TIM_Base_SetConfig+0x8a>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a21      	ldr	r2, [pc, #132]	; (800331c <TIM_Base_SetConfig+0xec>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d00f      	beq.n	80032ba <TIM_Base_SetConfig+0x8a>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a20      	ldr	r2, [pc, #128]	; (8003320 <TIM_Base_SetConfig+0xf0>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d00b      	beq.n	80032ba <TIM_Base_SetConfig+0x8a>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a1f      	ldr	r2, [pc, #124]	; (8003324 <TIM_Base_SetConfig+0xf4>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d007      	beq.n	80032ba <TIM_Base_SetConfig+0x8a>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a1e      	ldr	r2, [pc, #120]	; (8003328 <TIM_Base_SetConfig+0xf8>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d003      	beq.n	80032ba <TIM_Base_SetConfig+0x8a>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a1d      	ldr	r2, [pc, #116]	; (800332c <TIM_Base_SetConfig+0xfc>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d108      	bne.n	80032cc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	68db      	ldr	r3, [r3, #12]
 80032c6:	68fa      	ldr	r2, [r7, #12]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	695b      	ldr	r3, [r3, #20]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	68fa      	ldr	r2, [r7, #12]
 80032de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	689a      	ldr	r2, [r3, #8]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	4a08      	ldr	r2, [pc, #32]	; (8003314 <TIM_Base_SetConfig+0xe4>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d103      	bne.n	8003300 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	691a      	ldr	r2, [r3, #16]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2201      	movs	r2, #1
 8003304:	615a      	str	r2, [r3, #20]
}
 8003306:	bf00      	nop
 8003308:	3714      	adds	r7, #20
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr
 8003312:	bf00      	nop
 8003314:	40010000 	.word	0x40010000
 8003318:	40000400 	.word	0x40000400
 800331c:	40000800 	.word	0x40000800
 8003320:	40000c00 	.word	0x40000c00
 8003324:	40014000 	.word	0x40014000
 8003328:	40014400 	.word	0x40014400
 800332c:	40014800 	.word	0x40014800

08003330 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003330:	b480      	push	{r7}
 8003332:	b087      	sub	sp, #28
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6a1b      	ldr	r3, [r3, #32]
 800333e:	f023 0201 	bic.w	r2, r3, #1
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6a1b      	ldr	r3, [r3, #32]
 800334a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	699b      	ldr	r3, [r3, #24]
 8003356:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800335e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	f023 0303 	bic.w	r3, r3, #3
 8003366:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	68fa      	ldr	r2, [r7, #12]
 800336e:	4313      	orrs	r3, r2
 8003370:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	f023 0302 	bic.w	r3, r3, #2
 8003378:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	697a      	ldr	r2, [r7, #20]
 8003380:	4313      	orrs	r3, r2
 8003382:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	4a1c      	ldr	r2, [pc, #112]	; (80033f8 <TIM_OC1_SetConfig+0xc8>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d10c      	bne.n	80033a6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	f023 0308 	bic.w	r3, r3, #8
 8003392:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	697a      	ldr	r2, [r7, #20]
 800339a:	4313      	orrs	r3, r2
 800339c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	f023 0304 	bic.w	r3, r3, #4
 80033a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4a13      	ldr	r2, [pc, #76]	; (80033f8 <TIM_OC1_SetConfig+0xc8>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d111      	bne.n	80033d2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80033bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	695b      	ldr	r3, [r3, #20]
 80033c2:	693a      	ldr	r2, [r7, #16]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	699b      	ldr	r3, [r3, #24]
 80033cc:	693a      	ldr	r2, [r7, #16]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	693a      	ldr	r2, [r7, #16]
 80033d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	68fa      	ldr	r2, [r7, #12]
 80033dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	685a      	ldr	r2, [r3, #4]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	697a      	ldr	r2, [r7, #20]
 80033ea:	621a      	str	r2, [r3, #32]
}
 80033ec:	bf00      	nop
 80033ee:	371c      	adds	r7, #28
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr
 80033f8:	40010000 	.word	0x40010000

080033fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b087      	sub	sp, #28
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6a1b      	ldr	r3, [r3, #32]
 800340a:	f023 0210 	bic.w	r2, r3, #16
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6a1b      	ldr	r3, [r3, #32]
 8003416:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	699b      	ldr	r3, [r3, #24]
 8003422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800342a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003432:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	021b      	lsls	r3, r3, #8
 800343a:	68fa      	ldr	r2, [r7, #12]
 800343c:	4313      	orrs	r3, r2
 800343e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	f023 0320 	bic.w	r3, r3, #32
 8003446:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	011b      	lsls	r3, r3, #4
 800344e:	697a      	ldr	r2, [r7, #20]
 8003450:	4313      	orrs	r3, r2
 8003452:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	4a1e      	ldr	r2, [pc, #120]	; (80034d0 <TIM_OC2_SetConfig+0xd4>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d10d      	bne.n	8003478 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003462:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	011b      	lsls	r3, r3, #4
 800346a:	697a      	ldr	r2, [r7, #20]
 800346c:	4313      	orrs	r3, r2
 800346e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003476:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	4a15      	ldr	r2, [pc, #84]	; (80034d0 <TIM_OC2_SetConfig+0xd4>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d113      	bne.n	80034a8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003486:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800348e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	695b      	ldr	r3, [r3, #20]
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	693a      	ldr	r2, [r7, #16]
 8003498:	4313      	orrs	r3, r2
 800349a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	699b      	ldr	r3, [r3, #24]
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	693a      	ldr	r2, [r7, #16]
 80034a4:	4313      	orrs	r3, r2
 80034a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	693a      	ldr	r2, [r7, #16]
 80034ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	68fa      	ldr	r2, [r7, #12]
 80034b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	685a      	ldr	r2, [r3, #4]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	697a      	ldr	r2, [r7, #20]
 80034c0:	621a      	str	r2, [r3, #32]
}
 80034c2:	bf00      	nop
 80034c4:	371c      	adds	r7, #28
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr
 80034ce:	bf00      	nop
 80034d0:	40010000 	.word	0x40010000

080034d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b087      	sub	sp, #28
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6a1b      	ldr	r3, [r3, #32]
 80034e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6a1b      	ldr	r3, [r3, #32]
 80034ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	69db      	ldr	r3, [r3, #28]
 80034fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003502:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f023 0303 	bic.w	r3, r3, #3
 800350a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	68fa      	ldr	r2, [r7, #12]
 8003512:	4313      	orrs	r3, r2
 8003514:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800351c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	021b      	lsls	r3, r3, #8
 8003524:	697a      	ldr	r2, [r7, #20]
 8003526:	4313      	orrs	r3, r2
 8003528:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	4a1d      	ldr	r2, [pc, #116]	; (80035a4 <TIM_OC3_SetConfig+0xd0>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d10d      	bne.n	800354e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003538:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	68db      	ldr	r3, [r3, #12]
 800353e:	021b      	lsls	r3, r3, #8
 8003540:	697a      	ldr	r2, [r7, #20]
 8003542:	4313      	orrs	r3, r2
 8003544:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800354c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a14      	ldr	r2, [pc, #80]	; (80035a4 <TIM_OC3_SetConfig+0xd0>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d113      	bne.n	800357e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800355c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003564:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	695b      	ldr	r3, [r3, #20]
 800356a:	011b      	lsls	r3, r3, #4
 800356c:	693a      	ldr	r2, [r7, #16]
 800356e:	4313      	orrs	r3, r2
 8003570:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	699b      	ldr	r3, [r3, #24]
 8003576:	011b      	lsls	r3, r3, #4
 8003578:	693a      	ldr	r2, [r7, #16]
 800357a:	4313      	orrs	r3, r2
 800357c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	693a      	ldr	r2, [r7, #16]
 8003582:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	68fa      	ldr	r2, [r7, #12]
 8003588:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	685a      	ldr	r2, [r3, #4]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	697a      	ldr	r2, [r7, #20]
 8003596:	621a      	str	r2, [r3, #32]
}
 8003598:	bf00      	nop
 800359a:	371c      	adds	r7, #28
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr
 80035a4:	40010000 	.word	0x40010000

080035a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b087      	sub	sp, #28
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
 80035b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6a1b      	ldr	r3, [r3, #32]
 80035b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6a1b      	ldr	r3, [r3, #32]
 80035c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	69db      	ldr	r3, [r3, #28]
 80035ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	021b      	lsls	r3, r3, #8
 80035e6:	68fa      	ldr	r2, [r7, #12]
 80035e8:	4313      	orrs	r3, r2
 80035ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80035f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	031b      	lsls	r3, r3, #12
 80035fa:	693a      	ldr	r2, [r7, #16]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	4a10      	ldr	r2, [pc, #64]	; (8003644 <TIM_OC4_SetConfig+0x9c>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d109      	bne.n	800361c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800360e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	695b      	ldr	r3, [r3, #20]
 8003614:	019b      	lsls	r3, r3, #6
 8003616:	697a      	ldr	r2, [r7, #20]
 8003618:	4313      	orrs	r3, r2
 800361a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	697a      	ldr	r2, [r7, #20]
 8003620:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	68fa      	ldr	r2, [r7, #12]
 8003626:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	685a      	ldr	r2, [r3, #4]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	693a      	ldr	r2, [r7, #16]
 8003634:	621a      	str	r2, [r3, #32]
}
 8003636:	bf00      	nop
 8003638:	371c      	adds	r7, #28
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr
 8003642:	bf00      	nop
 8003644:	40010000 	.word	0x40010000

08003648 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003648:	b480      	push	{r7}
 800364a:	b087      	sub	sp, #28
 800364c:	af00      	add	r7, sp, #0
 800364e:	60f8      	str	r0, [r7, #12]
 8003650:	60b9      	str	r1, [r7, #8]
 8003652:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6a1b      	ldr	r3, [r3, #32]
 8003658:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6a1b      	ldr	r3, [r3, #32]
 800365e:	f023 0201 	bic.w	r2, r3, #1
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	699b      	ldr	r3, [r3, #24]
 800366a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003672:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	011b      	lsls	r3, r3, #4
 8003678:	693a      	ldr	r2, [r7, #16]
 800367a:	4313      	orrs	r3, r2
 800367c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	f023 030a 	bic.w	r3, r3, #10
 8003684:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003686:	697a      	ldr	r2, [r7, #20]
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	4313      	orrs	r3, r2
 800368c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	693a      	ldr	r2, [r7, #16]
 8003692:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	697a      	ldr	r2, [r7, #20]
 8003698:	621a      	str	r2, [r3, #32]
}
 800369a:	bf00      	nop
 800369c:	371c      	adds	r7, #28
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr

080036a6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036a6:	b480      	push	{r7}
 80036a8:	b087      	sub	sp, #28
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	60f8      	str	r0, [r7, #12]
 80036ae:	60b9      	str	r1, [r7, #8]
 80036b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	6a1b      	ldr	r3, [r3, #32]
 80036b6:	f023 0210 	bic.w	r2, r3, #16
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	699b      	ldr	r3, [r3, #24]
 80036c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6a1b      	ldr	r3, [r3, #32]
 80036c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80036d0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	031b      	lsls	r3, r3, #12
 80036d6:	697a      	ldr	r2, [r7, #20]
 80036d8:	4313      	orrs	r3, r2
 80036da:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80036e2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	011b      	lsls	r3, r3, #4
 80036e8:	693a      	ldr	r2, [r7, #16]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	697a      	ldr	r2, [r7, #20]
 80036f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	693a      	ldr	r2, [r7, #16]
 80036f8:	621a      	str	r2, [r3, #32]
}
 80036fa:	bf00      	nop
 80036fc:	371c      	adds	r7, #28
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr

08003706 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003706:	b480      	push	{r7}
 8003708:	b085      	sub	sp, #20
 800370a:	af00      	add	r7, sp, #0
 800370c:	6078      	str	r0, [r7, #4]
 800370e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800371c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800371e:	683a      	ldr	r2, [r7, #0]
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	4313      	orrs	r3, r2
 8003724:	f043 0307 	orr.w	r3, r3, #7
 8003728:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	68fa      	ldr	r2, [r7, #12]
 800372e:	609a      	str	r2, [r3, #8]
}
 8003730:	bf00      	nop
 8003732:	3714      	adds	r7, #20
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr

0800373c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800373c:	b480      	push	{r7}
 800373e:	b087      	sub	sp, #28
 8003740:	af00      	add	r7, sp, #0
 8003742:	60f8      	str	r0, [r7, #12]
 8003744:	60b9      	str	r1, [r7, #8]
 8003746:	607a      	str	r2, [r7, #4]
 8003748:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003756:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	021a      	lsls	r2, r3, #8
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	431a      	orrs	r2, r3
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	4313      	orrs	r3, r2
 8003764:	697a      	ldr	r2, [r7, #20]
 8003766:	4313      	orrs	r3, r2
 8003768:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	697a      	ldr	r2, [r7, #20]
 800376e:	609a      	str	r2, [r3, #8]
}
 8003770:	bf00      	nop
 8003772:	371c      	adds	r7, #28
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr

0800377c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800377c:	b480      	push	{r7}
 800377e:	b085      	sub	sp, #20
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800378c:	2b01      	cmp	r3, #1
 800378e:	d101      	bne.n	8003794 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003790:	2302      	movs	r3, #2
 8003792:	e050      	b.n	8003836 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2201      	movs	r2, #1
 8003798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2202      	movs	r2, #2
 80037a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	68fa      	ldr	r2, [r7, #12]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	68fa      	ldr	r2, [r7, #12]
 80037cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a1c      	ldr	r2, [pc, #112]	; (8003844 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d018      	beq.n	800380a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037e0:	d013      	beq.n	800380a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a18      	ldr	r2, [pc, #96]	; (8003848 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d00e      	beq.n	800380a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a16      	ldr	r2, [pc, #88]	; (800384c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d009      	beq.n	800380a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a15      	ldr	r2, [pc, #84]	; (8003850 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d004      	beq.n	800380a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a13      	ldr	r2, [pc, #76]	; (8003854 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d10c      	bne.n	8003824 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003810:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	68ba      	ldr	r2, [r7, #8]
 8003818:	4313      	orrs	r3, r2
 800381a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	68ba      	ldr	r2, [r7, #8]
 8003822:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2201      	movs	r2, #1
 8003828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2200      	movs	r2, #0
 8003830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003834:	2300      	movs	r3, #0
}
 8003836:	4618      	mov	r0, r3
 8003838:	3714      	adds	r7, #20
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
 8003842:	bf00      	nop
 8003844:	40010000 	.word	0x40010000
 8003848:	40000400 	.word	0x40000400
 800384c:	40000800 	.word	0x40000800
 8003850:	40000c00 	.word	0x40000c00
 8003854:	40014000 	.word	0x40014000

08003858 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b082      	sub	sp, #8
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d101      	bne.n	800386a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e03f      	b.n	80038ea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003870:	b2db      	uxtb	r3, r3
 8003872:	2b00      	cmp	r3, #0
 8003874:	d106      	bne.n	8003884 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f7fd fece 	bl	8001620 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2224      	movs	r2, #36	; 0x24
 8003888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	68da      	ldr	r2, [r3, #12]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800389a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f000 fe7d 	bl	800459c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	691a      	ldr	r2, [r3, #16]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80038b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	695a      	ldr	r2, [r3, #20]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80038c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	68da      	ldr	r2, [r3, #12]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2220      	movs	r2, #32
 80038dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2220      	movs	r2, #32
 80038e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80038e8:	2300      	movs	r3, #0
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3708      	adds	r7, #8
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}

080038f2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038f2:	b580      	push	{r7, lr}
 80038f4:	b08a      	sub	sp, #40	; 0x28
 80038f6:	af02      	add	r7, sp, #8
 80038f8:	60f8      	str	r0, [r7, #12]
 80038fa:	60b9      	str	r1, [r7, #8]
 80038fc:	603b      	str	r3, [r7, #0]
 80038fe:	4613      	mov	r3, r2
 8003900:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003902:	2300      	movs	r3, #0
 8003904:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800390c:	b2db      	uxtb	r3, r3
 800390e:	2b20      	cmp	r3, #32
 8003910:	d17c      	bne.n	8003a0c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d002      	beq.n	800391e <HAL_UART_Transmit+0x2c>
 8003918:	88fb      	ldrh	r3, [r7, #6]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d101      	bne.n	8003922 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e075      	b.n	8003a0e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003928:	2b01      	cmp	r3, #1
 800392a:	d101      	bne.n	8003930 <HAL_UART_Transmit+0x3e>
 800392c:	2302      	movs	r3, #2
 800392e:	e06e      	b.n	8003a0e <HAL_UART_Transmit+0x11c>
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2201      	movs	r2, #1
 8003934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2200      	movs	r2, #0
 800393c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2221      	movs	r2, #33	; 0x21
 8003942:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003946:	f7fd ff4b 	bl	80017e0 <HAL_GetTick>
 800394a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	88fa      	ldrh	r2, [r7, #6]
 8003950:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	88fa      	ldrh	r2, [r7, #6]
 8003956:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003960:	d108      	bne.n	8003974 <HAL_UART_Transmit+0x82>
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	691b      	ldr	r3, [r3, #16]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d104      	bne.n	8003974 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800396a:	2300      	movs	r3, #0
 800396c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	61bb      	str	r3, [r7, #24]
 8003972:	e003      	b.n	800397c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003978:	2300      	movs	r3, #0
 800397a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2200      	movs	r2, #0
 8003980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003984:	e02a      	b.n	80039dc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	9300      	str	r3, [sp, #0]
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	2200      	movs	r2, #0
 800398e:	2180      	movs	r1, #128	; 0x80
 8003990:	68f8      	ldr	r0, [r7, #12]
 8003992:	f000 fbc1 	bl	8004118 <UART_WaitOnFlagUntilTimeout>
 8003996:	4603      	mov	r3, r0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d001      	beq.n	80039a0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800399c:	2303      	movs	r3, #3
 800399e:	e036      	b.n	8003a0e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d10b      	bne.n	80039be <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80039a6:	69bb      	ldr	r3, [r7, #24]
 80039a8:	881b      	ldrh	r3, [r3, #0]
 80039aa:	461a      	mov	r2, r3
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039b4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80039b6:	69bb      	ldr	r3, [r7, #24]
 80039b8:	3302      	adds	r3, #2
 80039ba:	61bb      	str	r3, [r7, #24]
 80039bc:	e007      	b.n	80039ce <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	781a      	ldrb	r2, [r3, #0]
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80039c8:	69fb      	ldr	r3, [r7, #28]
 80039ca:	3301      	adds	r3, #1
 80039cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	3b01      	subs	r3, #1
 80039d6:	b29a      	uxth	r2, r3
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d1cf      	bne.n	8003986 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	9300      	str	r3, [sp, #0]
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	2200      	movs	r2, #0
 80039ee:	2140      	movs	r1, #64	; 0x40
 80039f0:	68f8      	ldr	r0, [r7, #12]
 80039f2:	f000 fb91 	bl	8004118 <UART_WaitOnFlagUntilTimeout>
 80039f6:	4603      	mov	r3, r0
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d001      	beq.n	8003a00 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80039fc:	2303      	movs	r3, #3
 80039fe:	e006      	b.n	8003a0e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2220      	movs	r2, #32
 8003a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	e000      	b.n	8003a0e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003a0c:	2302      	movs	r3, #2
  }
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3720      	adds	r7, #32
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}

08003a16 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a16:	b580      	push	{r7, lr}
 8003a18:	b08a      	sub	sp, #40	; 0x28
 8003a1a:	af02      	add	r7, sp, #8
 8003a1c:	60f8      	str	r0, [r7, #12]
 8003a1e:	60b9      	str	r1, [r7, #8]
 8003a20:	603b      	str	r3, [r7, #0]
 8003a22:	4613      	mov	r3, r2
 8003a24:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003a26:	2300      	movs	r3, #0
 8003a28:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	2b20      	cmp	r3, #32
 8003a34:	f040 808c 	bne.w	8003b50 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d002      	beq.n	8003a44 <HAL_UART_Receive+0x2e>
 8003a3e:	88fb      	ldrh	r3, [r7, #6]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d101      	bne.n	8003a48 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	e084      	b.n	8003b52 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d101      	bne.n	8003a56 <HAL_UART_Receive+0x40>
 8003a52:	2302      	movs	r3, #2
 8003a54:	e07d      	b.n	8003b52 <HAL_UART_Receive+0x13c>
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2201      	movs	r2, #1
 8003a5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2200      	movs	r2, #0
 8003a62:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2222      	movs	r2, #34	; 0x22
 8003a68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a72:	f7fd feb5 	bl	80017e0 <HAL_GetTick>
 8003a76:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	88fa      	ldrh	r2, [r7, #6]
 8003a7c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	88fa      	ldrh	r2, [r7, #6]
 8003a82:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a8c:	d108      	bne.n	8003aa0 <HAL_UART_Receive+0x8a>
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	691b      	ldr	r3, [r3, #16]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d104      	bne.n	8003aa0 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8003a96:	2300      	movs	r3, #0
 8003a98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	61bb      	str	r3, [r7, #24]
 8003a9e:	e003      	b.n	8003aa8 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003ab0:	e043      	b.n	8003b3a <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	9300      	str	r3, [sp, #0]
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	2120      	movs	r1, #32
 8003abc:	68f8      	ldr	r0, [r7, #12]
 8003abe:	f000 fb2b 	bl	8004118 <UART_WaitOnFlagUntilTimeout>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d001      	beq.n	8003acc <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8003ac8:	2303      	movs	r3, #3
 8003aca:	e042      	b.n	8003b52 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8003acc:	69fb      	ldr	r3, [r7, #28]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d10c      	bne.n	8003aec <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	b29b      	uxth	r3, r3
 8003ada:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ade:	b29a      	uxth	r2, r3
 8003ae0:	69bb      	ldr	r3, [r7, #24]
 8003ae2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003ae4:	69bb      	ldr	r3, [r7, #24]
 8003ae6:	3302      	adds	r3, #2
 8003ae8:	61bb      	str	r3, [r7, #24]
 8003aea:	e01f      	b.n	8003b2c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003af4:	d007      	beq.n	8003b06 <HAL_UART_Receive+0xf0>
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d10a      	bne.n	8003b14 <HAL_UART_Receive+0xfe>
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	691b      	ldr	r3, [r3, #16]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d106      	bne.n	8003b14 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	b2da      	uxtb	r2, r3
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	701a      	strb	r2, [r3, #0]
 8003b12:	e008      	b.n	8003b26 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b20:	b2da      	uxtb	r2, r3
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003b26:	69fb      	ldr	r3, [r7, #28]
 8003b28:	3301      	adds	r3, #1
 8003b2a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b30:	b29b      	uxth	r3, r3
 8003b32:	3b01      	subs	r3, #1
 8003b34:	b29a      	uxth	r2, r3
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b3e:	b29b      	uxth	r3, r3
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d1b6      	bne.n	8003ab2 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2220      	movs	r2, #32
 8003b48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	e000      	b.n	8003b52 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8003b50:	2302      	movs	r3, #2
  }
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3720      	adds	r7, #32
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}

08003b5a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b5a:	b580      	push	{r7, lr}
 8003b5c:	b084      	sub	sp, #16
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	60f8      	str	r0, [r7, #12]
 8003b62:	60b9      	str	r1, [r7, #8]
 8003b64:	4613      	mov	r3, r2
 8003b66:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b6e:	b2db      	uxtb	r3, r3
 8003b70:	2b20      	cmp	r3, #32
 8003b72:	d11d      	bne.n	8003bb0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d002      	beq.n	8003b80 <HAL_UART_Receive_IT+0x26>
 8003b7a:	88fb      	ldrh	r3, [r7, #6]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d101      	bne.n	8003b84 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e016      	b.n	8003bb2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d101      	bne.n	8003b92 <HAL_UART_Receive_IT+0x38>
 8003b8e:	2302      	movs	r3, #2
 8003b90:	e00f      	b.n	8003bb2 <HAL_UART_Receive_IT+0x58>
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2201      	movs	r2, #1
 8003b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003ba0:	88fb      	ldrh	r3, [r7, #6]
 8003ba2:	461a      	mov	r2, r3
 8003ba4:	68b9      	ldr	r1, [r7, #8]
 8003ba6:	68f8      	ldr	r0, [r7, #12]
 8003ba8:	f000 fb24 	bl	80041f4 <UART_Start_Receive_IT>
 8003bac:	4603      	mov	r3, r0
 8003bae:	e000      	b.n	8003bb2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003bb0:	2302      	movs	r3, #2
  }
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3710      	adds	r7, #16
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}
	...

08003bbc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b0ba      	sub	sp, #232	; 0xe8
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	695b      	ldr	r3, [r3, #20]
 8003bde:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003be2:	2300      	movs	r3, #0
 8003be4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003be8:	2300      	movs	r3, #0
 8003bea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003bee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bf2:	f003 030f 	and.w	r3, r3, #15
 8003bf6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003bfa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d10f      	bne.n	8003c22 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c06:	f003 0320 	and.w	r3, r3, #32
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d009      	beq.n	8003c22 <HAL_UART_IRQHandler+0x66>
 8003c0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c12:	f003 0320 	and.w	r3, r3, #32
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d003      	beq.n	8003c22 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f000 fc03 	bl	8004426 <UART_Receive_IT>
      return;
 8003c20:	e256      	b.n	80040d0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003c22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	f000 80de 	beq.w	8003de8 <HAL_UART_IRQHandler+0x22c>
 8003c2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c30:	f003 0301 	and.w	r3, r3, #1
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d106      	bne.n	8003c46 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003c38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c3c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	f000 80d1 	beq.w	8003de8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003c46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c4a:	f003 0301 	and.w	r3, r3, #1
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d00b      	beq.n	8003c6a <HAL_UART_IRQHandler+0xae>
 8003c52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d005      	beq.n	8003c6a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c62:	f043 0201 	orr.w	r2, r3, #1
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c6e:	f003 0304 	and.w	r3, r3, #4
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d00b      	beq.n	8003c8e <HAL_UART_IRQHandler+0xd2>
 8003c76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c7a:	f003 0301 	and.w	r3, r3, #1
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d005      	beq.n	8003c8e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c86:	f043 0202 	orr.w	r2, r3, #2
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c92:	f003 0302 	and.w	r3, r3, #2
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d00b      	beq.n	8003cb2 <HAL_UART_IRQHandler+0xf6>
 8003c9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c9e:	f003 0301 	and.w	r3, r3, #1
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d005      	beq.n	8003cb2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003caa:	f043 0204 	orr.w	r2, r3, #4
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003cb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cb6:	f003 0308 	and.w	r3, r3, #8
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d011      	beq.n	8003ce2 <HAL_UART_IRQHandler+0x126>
 8003cbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cc2:	f003 0320 	and.w	r3, r3, #32
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d105      	bne.n	8003cd6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003cca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003cce:	f003 0301 	and.w	r3, r3, #1
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d005      	beq.n	8003ce2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cda:	f043 0208 	orr.w	r2, r3, #8
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	f000 81ed 	beq.w	80040c6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003cec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cf0:	f003 0320 	and.w	r3, r3, #32
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d008      	beq.n	8003d0a <HAL_UART_IRQHandler+0x14e>
 8003cf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cfc:	f003 0320 	and.w	r3, r3, #32
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d002      	beq.n	8003d0a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	f000 fb8e 	bl	8004426 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	695b      	ldr	r3, [r3, #20]
 8003d10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d14:	2b40      	cmp	r3, #64	; 0x40
 8003d16:	bf0c      	ite	eq
 8003d18:	2301      	moveq	r3, #1
 8003d1a:	2300      	movne	r3, #0
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d26:	f003 0308 	and.w	r3, r3, #8
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d103      	bne.n	8003d36 <HAL_UART_IRQHandler+0x17a>
 8003d2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d04f      	beq.n	8003dd6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f000 fa96 	bl	8004268 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	695b      	ldr	r3, [r3, #20]
 8003d42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d46:	2b40      	cmp	r3, #64	; 0x40
 8003d48:	d141      	bne.n	8003dce <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	3314      	adds	r3, #20
 8003d50:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d54:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003d58:	e853 3f00 	ldrex	r3, [r3]
 8003d5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003d60:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003d64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d68:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	3314      	adds	r3, #20
 8003d72:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003d76:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003d7a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d7e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003d82:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003d86:	e841 2300 	strex	r3, r2, [r1]
 8003d8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003d8e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d1d9      	bne.n	8003d4a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d013      	beq.n	8003dc6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003da2:	4a7d      	ldr	r2, [pc, #500]	; (8003f98 <HAL_UART_IRQHandler+0x3dc>)
 8003da4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003daa:	4618      	mov	r0, r3
 8003dac:	f7fd ff54 	bl	8001c58 <HAL_DMA_Abort_IT>
 8003db0:	4603      	mov	r3, r0
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d016      	beq.n	8003de4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dbc:	687a      	ldr	r2, [r7, #4]
 8003dbe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003dc0:	4610      	mov	r0, r2
 8003dc2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dc4:	e00e      	b.n	8003de4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f000 f990 	bl	80040ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dcc:	e00a      	b.n	8003de4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f000 f98c 	bl	80040ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dd4:	e006      	b.n	8003de4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f000 f988 	bl	80040ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003de2:	e170      	b.n	80040c6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003de4:	bf00      	nop
    return;
 8003de6:	e16e      	b.n	80040c6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	f040 814a 	bne.w	8004086 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003df2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003df6:	f003 0310 	and.w	r3, r3, #16
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	f000 8143 	beq.w	8004086 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003e00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e04:	f003 0310 	and.w	r3, r3, #16
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	f000 813c 	beq.w	8004086 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003e0e:	2300      	movs	r3, #0
 8003e10:	60bb      	str	r3, [r7, #8]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	60bb      	str	r3, [r7, #8]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	60bb      	str	r3, [r7, #8]
 8003e22:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	695b      	ldr	r3, [r3, #20]
 8003e2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e2e:	2b40      	cmp	r3, #64	; 0x40
 8003e30:	f040 80b4 	bne.w	8003f9c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003e40:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	f000 8140 	beq.w	80040ca <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003e4e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003e52:	429a      	cmp	r2, r3
 8003e54:	f080 8139 	bcs.w	80040ca <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003e5e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e64:	69db      	ldr	r3, [r3, #28]
 8003e66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e6a:	f000 8088 	beq.w	8003f7e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	330c      	adds	r3, #12
 8003e74:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e78:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003e7c:	e853 3f00 	ldrex	r3, [r3]
 8003e80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003e84:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e8c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	330c      	adds	r3, #12
 8003e96:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003e9a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003e9e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ea2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003ea6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003eaa:	e841 2300 	strex	r3, r2, [r1]
 8003eae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003eb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d1d9      	bne.n	8003e6e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	3314      	adds	r3, #20
 8003ec0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ec2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ec4:	e853 3f00 	ldrex	r3, [r3]
 8003ec8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003eca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ecc:	f023 0301 	bic.w	r3, r3, #1
 8003ed0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	3314      	adds	r3, #20
 8003eda:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003ede:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003ee2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ee4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003ee6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003eea:	e841 2300 	strex	r3, r2, [r1]
 8003eee:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003ef0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d1e1      	bne.n	8003eba <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	3314      	adds	r3, #20
 8003efc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003efe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f00:	e853 3f00 	ldrex	r3, [r3]
 8003f04:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003f06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	3314      	adds	r3, #20
 8003f16:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003f1a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003f1c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f1e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003f20:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003f22:	e841 2300 	strex	r3, r2, [r1]
 8003f26:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003f28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d1e3      	bne.n	8003ef6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2220      	movs	r2, #32
 8003f32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	330c      	adds	r3, #12
 8003f42:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f46:	e853 3f00 	ldrex	r3, [r3]
 8003f4a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003f4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f4e:	f023 0310 	bic.w	r3, r3, #16
 8003f52:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	330c      	adds	r3, #12
 8003f5c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003f60:	65ba      	str	r2, [r7, #88]	; 0x58
 8003f62:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f64:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003f66:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003f68:	e841 2300 	strex	r3, r2, [r1]
 8003f6c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003f6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d1e3      	bne.n	8003f3c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f7fd fdfd 	bl	8001b78 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f86:	b29b      	uxth	r3, r3
 8003f88:	1ad3      	subs	r3, r2, r3
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	4619      	mov	r1, r3
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f000 f8b6 	bl	8004100 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003f94:	e099      	b.n	80040ca <HAL_UART_IRQHandler+0x50e>
 8003f96:	bf00      	nop
 8003f98:	0800432f 	.word	0x0800432f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003fa4:	b29b      	uxth	r3, r3
 8003fa6:	1ad3      	subs	r3, r2, r3
 8003fa8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003fb0:	b29b      	uxth	r3, r3
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	f000 808b 	beq.w	80040ce <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003fb8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	f000 8086 	beq.w	80040ce <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	330c      	adds	r3, #12
 8003fc8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fcc:	e853 3f00 	ldrex	r3, [r3]
 8003fd0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003fd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fd4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003fd8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	330c      	adds	r3, #12
 8003fe2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003fe6:	647a      	str	r2, [r7, #68]	; 0x44
 8003fe8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003fec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003fee:	e841 2300 	strex	r3, r2, [r1]
 8003ff2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003ff4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d1e3      	bne.n	8003fc2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	3314      	adds	r3, #20
 8004000:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004004:	e853 3f00 	ldrex	r3, [r3]
 8004008:	623b      	str	r3, [r7, #32]
   return(result);
 800400a:	6a3b      	ldr	r3, [r7, #32]
 800400c:	f023 0301 	bic.w	r3, r3, #1
 8004010:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	3314      	adds	r3, #20
 800401a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800401e:	633a      	str	r2, [r7, #48]	; 0x30
 8004020:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004022:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004024:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004026:	e841 2300 	strex	r3, r2, [r1]
 800402a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800402c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800402e:	2b00      	cmp	r3, #0
 8004030:	d1e3      	bne.n	8003ffa <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2220      	movs	r2, #32
 8004036:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2200      	movs	r2, #0
 800403e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	330c      	adds	r3, #12
 8004046:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	e853 3f00 	ldrex	r3, [r3]
 800404e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f023 0310 	bic.w	r3, r3, #16
 8004056:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	330c      	adds	r3, #12
 8004060:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004064:	61fa      	str	r2, [r7, #28]
 8004066:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004068:	69b9      	ldr	r1, [r7, #24]
 800406a:	69fa      	ldr	r2, [r7, #28]
 800406c:	e841 2300 	strex	r3, r2, [r1]
 8004070:	617b      	str	r3, [r7, #20]
   return(result);
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d1e3      	bne.n	8004040 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004078:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800407c:	4619      	mov	r1, r3
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f000 f83e 	bl	8004100 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004084:	e023      	b.n	80040ce <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004086:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800408a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800408e:	2b00      	cmp	r3, #0
 8004090:	d009      	beq.n	80040a6 <HAL_UART_IRQHandler+0x4ea>
 8004092:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004096:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800409a:	2b00      	cmp	r3, #0
 800409c:	d003      	beq.n	80040a6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f000 f959 	bl	8004356 <UART_Transmit_IT>
    return;
 80040a4:	e014      	b.n	80040d0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80040a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d00e      	beq.n	80040d0 <HAL_UART_IRQHandler+0x514>
 80040b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d008      	beq.n	80040d0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f000 f999 	bl	80043f6 <UART_EndTransmit_IT>
    return;
 80040c4:	e004      	b.n	80040d0 <HAL_UART_IRQHandler+0x514>
    return;
 80040c6:	bf00      	nop
 80040c8:	e002      	b.n	80040d0 <HAL_UART_IRQHandler+0x514>
      return;
 80040ca:	bf00      	nop
 80040cc:	e000      	b.n	80040d0 <HAL_UART_IRQHandler+0x514>
      return;
 80040ce:	bf00      	nop
  }
}
 80040d0:	37e8      	adds	r7, #232	; 0xe8
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	bf00      	nop

080040d8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80040d8:	b480      	push	{r7}
 80040da:	b083      	sub	sp, #12
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80040e0:	bf00      	nop
 80040e2:	370c      	adds	r7, #12
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr

080040ec <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b083      	sub	sp, #12
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80040f4:	bf00      	nop
 80040f6:	370c      	adds	r7, #12
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr

08004100 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004100:	b480      	push	{r7}
 8004102:	b083      	sub	sp, #12
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
 8004108:	460b      	mov	r3, r1
 800410a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800410c:	bf00      	nop
 800410e:	370c      	adds	r7, #12
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr

08004118 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b090      	sub	sp, #64	; 0x40
 800411c:	af00      	add	r7, sp, #0
 800411e:	60f8      	str	r0, [r7, #12]
 8004120:	60b9      	str	r1, [r7, #8]
 8004122:	603b      	str	r3, [r7, #0]
 8004124:	4613      	mov	r3, r2
 8004126:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004128:	e050      	b.n	80041cc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800412a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800412c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004130:	d04c      	beq.n	80041cc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004132:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004134:	2b00      	cmp	r3, #0
 8004136:	d007      	beq.n	8004148 <UART_WaitOnFlagUntilTimeout+0x30>
 8004138:	f7fd fb52 	bl	80017e0 <HAL_GetTick>
 800413c:	4602      	mov	r2, r0
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	1ad3      	subs	r3, r2, r3
 8004142:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004144:	429a      	cmp	r2, r3
 8004146:	d241      	bcs.n	80041cc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	330c      	adds	r3, #12
 800414e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004152:	e853 3f00 	ldrex	r3, [r3]
 8004156:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800415a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800415e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	330c      	adds	r3, #12
 8004166:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004168:	637a      	str	r2, [r7, #52]	; 0x34
 800416a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800416c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800416e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004170:	e841 2300 	strex	r3, r2, [r1]
 8004174:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004178:	2b00      	cmp	r3, #0
 800417a:	d1e5      	bne.n	8004148 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	3314      	adds	r3, #20
 8004182:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	e853 3f00 	ldrex	r3, [r3]
 800418a:	613b      	str	r3, [r7, #16]
   return(result);
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	f023 0301 	bic.w	r3, r3, #1
 8004192:	63bb      	str	r3, [r7, #56]	; 0x38
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	3314      	adds	r3, #20
 800419a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800419c:	623a      	str	r2, [r7, #32]
 800419e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041a0:	69f9      	ldr	r1, [r7, #28]
 80041a2:	6a3a      	ldr	r2, [r7, #32]
 80041a4:	e841 2300 	strex	r3, r2, [r1]
 80041a8:	61bb      	str	r3, [r7, #24]
   return(result);
 80041aa:	69bb      	ldr	r3, [r7, #24]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d1e5      	bne.n	800417c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2220      	movs	r2, #32
 80041b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2220      	movs	r2, #32
 80041bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2200      	movs	r2, #0
 80041c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80041c8:	2303      	movs	r3, #3
 80041ca:	e00f      	b.n	80041ec <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	4013      	ands	r3, r2
 80041d6:	68ba      	ldr	r2, [r7, #8]
 80041d8:	429a      	cmp	r2, r3
 80041da:	bf0c      	ite	eq
 80041dc:	2301      	moveq	r3, #1
 80041de:	2300      	movne	r3, #0
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	461a      	mov	r2, r3
 80041e4:	79fb      	ldrb	r3, [r7, #7]
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d09f      	beq.n	800412a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80041ea:	2300      	movs	r3, #0
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3740      	adds	r7, #64	; 0x40
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}

080041f4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b085      	sub	sp, #20
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	60f8      	str	r0, [r7, #12]
 80041fc:	60b9      	str	r1, [r7, #8]
 80041fe:	4613      	mov	r3, r2
 8004200:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	68ba      	ldr	r2, [r7, #8]
 8004206:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	88fa      	ldrh	r2, [r7, #6]
 800420c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	88fa      	ldrh	r2, [r7, #6]
 8004212:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2200      	movs	r2, #0
 8004218:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2222      	movs	r2, #34	; 0x22
 800421e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2200      	movs	r2, #0
 8004226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	68da      	ldr	r2, [r3, #12]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004238:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	695a      	ldr	r2, [r3, #20]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f042 0201 	orr.w	r2, r2, #1
 8004248:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	68da      	ldr	r2, [r3, #12]
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f042 0220 	orr.w	r2, r2, #32
 8004258:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800425a:	2300      	movs	r3, #0
}
 800425c:	4618      	mov	r0, r3
 800425e:	3714      	adds	r7, #20
 8004260:	46bd      	mov	sp, r7
 8004262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004266:	4770      	bx	lr

08004268 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004268:	b480      	push	{r7}
 800426a:	b095      	sub	sp, #84	; 0x54
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	330c      	adds	r3, #12
 8004276:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004278:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800427a:	e853 3f00 	ldrex	r3, [r3]
 800427e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004282:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004286:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	330c      	adds	r3, #12
 800428e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004290:	643a      	str	r2, [r7, #64]	; 0x40
 8004292:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004294:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004296:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004298:	e841 2300 	strex	r3, r2, [r1]
 800429c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800429e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d1e5      	bne.n	8004270 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	3314      	adds	r3, #20
 80042aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ac:	6a3b      	ldr	r3, [r7, #32]
 80042ae:	e853 3f00 	ldrex	r3, [r3]
 80042b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80042b4:	69fb      	ldr	r3, [r7, #28]
 80042b6:	f023 0301 	bic.w	r3, r3, #1
 80042ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	3314      	adds	r3, #20
 80042c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80042c4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80042c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80042ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042cc:	e841 2300 	strex	r3, r2, [r1]
 80042d0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80042d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d1e5      	bne.n	80042a4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d119      	bne.n	8004314 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	330c      	adds	r3, #12
 80042e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	e853 3f00 	ldrex	r3, [r3]
 80042ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	f023 0310 	bic.w	r3, r3, #16
 80042f6:	647b      	str	r3, [r7, #68]	; 0x44
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	330c      	adds	r3, #12
 80042fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004300:	61ba      	str	r2, [r7, #24]
 8004302:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004304:	6979      	ldr	r1, [r7, #20]
 8004306:	69ba      	ldr	r2, [r7, #24]
 8004308:	e841 2300 	strex	r3, r2, [r1]
 800430c:	613b      	str	r3, [r7, #16]
   return(result);
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d1e5      	bne.n	80042e0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2220      	movs	r2, #32
 8004318:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2200      	movs	r2, #0
 8004320:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004322:	bf00      	nop
 8004324:	3754      	adds	r7, #84	; 0x54
 8004326:	46bd      	mov	sp, r7
 8004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432c:	4770      	bx	lr

0800432e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800432e:	b580      	push	{r7, lr}
 8004330:	b084      	sub	sp, #16
 8004332:	af00      	add	r7, sp, #0
 8004334:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800433a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2200      	movs	r2, #0
 8004340:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2200      	movs	r2, #0
 8004346:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004348:	68f8      	ldr	r0, [r7, #12]
 800434a:	f7ff fecf 	bl	80040ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800434e:	bf00      	nop
 8004350:	3710      	adds	r7, #16
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}

08004356 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004356:	b480      	push	{r7}
 8004358:	b085      	sub	sp, #20
 800435a:	af00      	add	r7, sp, #0
 800435c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004364:	b2db      	uxtb	r3, r3
 8004366:	2b21      	cmp	r3, #33	; 0x21
 8004368:	d13e      	bne.n	80043e8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004372:	d114      	bne.n	800439e <UART_Transmit_IT+0x48>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	691b      	ldr	r3, [r3, #16]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d110      	bne.n	800439e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6a1b      	ldr	r3, [r3, #32]
 8004380:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	881b      	ldrh	r3, [r3, #0]
 8004386:	461a      	mov	r2, r3
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004390:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6a1b      	ldr	r3, [r3, #32]
 8004396:	1c9a      	adds	r2, r3, #2
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	621a      	str	r2, [r3, #32]
 800439c:	e008      	b.n	80043b0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6a1b      	ldr	r3, [r3, #32]
 80043a2:	1c59      	adds	r1, r3, #1
 80043a4:	687a      	ldr	r2, [r7, #4]
 80043a6:	6211      	str	r1, [r2, #32]
 80043a8:	781a      	ldrb	r2, [r3, #0]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	3b01      	subs	r3, #1
 80043b8:	b29b      	uxth	r3, r3
 80043ba:	687a      	ldr	r2, [r7, #4]
 80043bc:	4619      	mov	r1, r3
 80043be:	84d1      	strh	r1, [r2, #38]	; 0x26
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d10f      	bne.n	80043e4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	68da      	ldr	r2, [r3, #12]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80043d2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	68da      	ldr	r2, [r3, #12]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043e2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80043e4:	2300      	movs	r3, #0
 80043e6:	e000      	b.n	80043ea <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80043e8:	2302      	movs	r3, #2
  }
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3714      	adds	r7, #20
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr

080043f6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80043f6:	b580      	push	{r7, lr}
 80043f8:	b082      	sub	sp, #8
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	68da      	ldr	r2, [r3, #12]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800440c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2220      	movs	r2, #32
 8004412:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f7ff fe5e 	bl	80040d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800441c:	2300      	movs	r3, #0
}
 800441e:	4618      	mov	r0, r3
 8004420:	3708      	adds	r7, #8
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}

08004426 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004426:	b580      	push	{r7, lr}
 8004428:	b08c      	sub	sp, #48	; 0x30
 800442a:	af00      	add	r7, sp, #0
 800442c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004434:	b2db      	uxtb	r3, r3
 8004436:	2b22      	cmp	r3, #34	; 0x22
 8004438:	f040 80ab 	bne.w	8004592 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004444:	d117      	bne.n	8004476 <UART_Receive_IT+0x50>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	691b      	ldr	r3, [r3, #16]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d113      	bne.n	8004476 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800444e:	2300      	movs	r3, #0
 8004450:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004456:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	b29b      	uxth	r3, r3
 8004460:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004464:	b29a      	uxth	r2, r3
 8004466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004468:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800446e:	1c9a      	adds	r2, r3, #2
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	629a      	str	r2, [r3, #40]	; 0x28
 8004474:	e026      	b.n	80044c4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800447a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800447c:	2300      	movs	r3, #0
 800447e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004488:	d007      	beq.n	800449a <UART_Receive_IT+0x74>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d10a      	bne.n	80044a8 <UART_Receive_IT+0x82>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	691b      	ldr	r3, [r3, #16]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d106      	bne.n	80044a8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	b2da      	uxtb	r2, r3
 80044a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044a4:	701a      	strb	r2, [r3, #0]
 80044a6:	e008      	b.n	80044ba <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	b2db      	uxtb	r3, r3
 80044b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044b4:	b2da      	uxtb	r2, r3
 80044b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044b8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044be:	1c5a      	adds	r2, r3, #1
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80044c8:	b29b      	uxth	r3, r3
 80044ca:	3b01      	subs	r3, #1
 80044cc:	b29b      	uxth	r3, r3
 80044ce:	687a      	ldr	r2, [r7, #4]
 80044d0:	4619      	mov	r1, r3
 80044d2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d15a      	bne.n	800458e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	68da      	ldr	r2, [r3, #12]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f022 0220 	bic.w	r2, r2, #32
 80044e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	68da      	ldr	r2, [r3, #12]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80044f6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	695a      	ldr	r2, [r3, #20]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f022 0201 	bic.w	r2, r2, #1
 8004506:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2220      	movs	r2, #32
 800450c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004514:	2b01      	cmp	r3, #1
 8004516:	d135      	bne.n	8004584 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2200      	movs	r2, #0
 800451c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	330c      	adds	r3, #12
 8004524:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	e853 3f00 	ldrex	r3, [r3]
 800452c:	613b      	str	r3, [r7, #16]
   return(result);
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	f023 0310 	bic.w	r3, r3, #16
 8004534:	627b      	str	r3, [r7, #36]	; 0x24
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	330c      	adds	r3, #12
 800453c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800453e:	623a      	str	r2, [r7, #32]
 8004540:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004542:	69f9      	ldr	r1, [r7, #28]
 8004544:	6a3a      	ldr	r2, [r7, #32]
 8004546:	e841 2300 	strex	r3, r2, [r1]
 800454a:	61bb      	str	r3, [r7, #24]
   return(result);
 800454c:	69bb      	ldr	r3, [r7, #24]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d1e5      	bne.n	800451e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f003 0310 	and.w	r3, r3, #16
 800455c:	2b10      	cmp	r3, #16
 800455e:	d10a      	bne.n	8004576 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004560:	2300      	movs	r3, #0
 8004562:	60fb      	str	r3, [r7, #12]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	60fb      	str	r3, [r7, #12]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	60fb      	str	r3, [r7, #12]
 8004574:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800457a:	4619      	mov	r1, r3
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f7ff fdbf 	bl	8004100 <HAL_UARTEx_RxEventCallback>
 8004582:	e002      	b.n	800458a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f7fc fd8d 	bl	80010a4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800458a:	2300      	movs	r3, #0
 800458c:	e002      	b.n	8004594 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800458e:	2300      	movs	r3, #0
 8004590:	e000      	b.n	8004594 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004592:	2302      	movs	r3, #2
  }
}
 8004594:	4618      	mov	r0, r3
 8004596:	3730      	adds	r7, #48	; 0x30
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}

0800459c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800459c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045a0:	b09f      	sub	sp, #124	; 0x7c
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	691b      	ldr	r3, [r3, #16]
 80045ac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80045b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045b2:	68d9      	ldr	r1, [r3, #12]
 80045b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	ea40 0301 	orr.w	r3, r0, r1
 80045bc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80045be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045c0:	689a      	ldr	r2, [r3, #8]
 80045c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045c4:	691b      	ldr	r3, [r3, #16]
 80045c6:	431a      	orrs	r2, r3
 80045c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045ca:	695b      	ldr	r3, [r3, #20]
 80045cc:	431a      	orrs	r2, r3
 80045ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045d0:	69db      	ldr	r3, [r3, #28]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80045d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80045e0:	f021 010c 	bic.w	r1, r1, #12
 80045e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80045ea:	430b      	orrs	r3, r1
 80045ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80045ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	695b      	ldr	r3, [r3, #20]
 80045f4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80045f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045fa:	6999      	ldr	r1, [r3, #24]
 80045fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	ea40 0301 	orr.w	r3, r0, r1
 8004604:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004606:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	4bc5      	ldr	r3, [pc, #788]	; (8004920 <UART_SetConfig+0x384>)
 800460c:	429a      	cmp	r2, r3
 800460e:	d004      	beq.n	800461a <UART_SetConfig+0x7e>
 8004610:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	4bc3      	ldr	r3, [pc, #780]	; (8004924 <UART_SetConfig+0x388>)
 8004616:	429a      	cmp	r2, r3
 8004618:	d103      	bne.n	8004622 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800461a:	f7fe fbc3 	bl	8002da4 <HAL_RCC_GetPCLK2Freq>
 800461e:	6778      	str	r0, [r7, #116]	; 0x74
 8004620:	e002      	b.n	8004628 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004622:	f7fe fbab 	bl	8002d7c <HAL_RCC_GetPCLK1Freq>
 8004626:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004628:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800462a:	69db      	ldr	r3, [r3, #28]
 800462c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004630:	f040 80b6 	bne.w	80047a0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004634:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004636:	461c      	mov	r4, r3
 8004638:	f04f 0500 	mov.w	r5, #0
 800463c:	4622      	mov	r2, r4
 800463e:	462b      	mov	r3, r5
 8004640:	1891      	adds	r1, r2, r2
 8004642:	6439      	str	r1, [r7, #64]	; 0x40
 8004644:	415b      	adcs	r3, r3
 8004646:	647b      	str	r3, [r7, #68]	; 0x44
 8004648:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800464c:	1912      	adds	r2, r2, r4
 800464e:	eb45 0303 	adc.w	r3, r5, r3
 8004652:	f04f 0000 	mov.w	r0, #0
 8004656:	f04f 0100 	mov.w	r1, #0
 800465a:	00d9      	lsls	r1, r3, #3
 800465c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004660:	00d0      	lsls	r0, r2, #3
 8004662:	4602      	mov	r2, r0
 8004664:	460b      	mov	r3, r1
 8004666:	1911      	adds	r1, r2, r4
 8004668:	6639      	str	r1, [r7, #96]	; 0x60
 800466a:	416b      	adcs	r3, r5
 800466c:	667b      	str	r3, [r7, #100]	; 0x64
 800466e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	461a      	mov	r2, r3
 8004674:	f04f 0300 	mov.w	r3, #0
 8004678:	1891      	adds	r1, r2, r2
 800467a:	63b9      	str	r1, [r7, #56]	; 0x38
 800467c:	415b      	adcs	r3, r3
 800467e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004680:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004684:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004688:	f7fb fdae 	bl	80001e8 <__aeabi_uldivmod>
 800468c:	4602      	mov	r2, r0
 800468e:	460b      	mov	r3, r1
 8004690:	4ba5      	ldr	r3, [pc, #660]	; (8004928 <UART_SetConfig+0x38c>)
 8004692:	fba3 2302 	umull	r2, r3, r3, r2
 8004696:	095b      	lsrs	r3, r3, #5
 8004698:	011e      	lsls	r6, r3, #4
 800469a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800469c:	461c      	mov	r4, r3
 800469e:	f04f 0500 	mov.w	r5, #0
 80046a2:	4622      	mov	r2, r4
 80046a4:	462b      	mov	r3, r5
 80046a6:	1891      	adds	r1, r2, r2
 80046a8:	6339      	str	r1, [r7, #48]	; 0x30
 80046aa:	415b      	adcs	r3, r3
 80046ac:	637b      	str	r3, [r7, #52]	; 0x34
 80046ae:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80046b2:	1912      	adds	r2, r2, r4
 80046b4:	eb45 0303 	adc.w	r3, r5, r3
 80046b8:	f04f 0000 	mov.w	r0, #0
 80046bc:	f04f 0100 	mov.w	r1, #0
 80046c0:	00d9      	lsls	r1, r3, #3
 80046c2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80046c6:	00d0      	lsls	r0, r2, #3
 80046c8:	4602      	mov	r2, r0
 80046ca:	460b      	mov	r3, r1
 80046cc:	1911      	adds	r1, r2, r4
 80046ce:	65b9      	str	r1, [r7, #88]	; 0x58
 80046d0:	416b      	adcs	r3, r5
 80046d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80046d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	461a      	mov	r2, r3
 80046da:	f04f 0300 	mov.w	r3, #0
 80046de:	1891      	adds	r1, r2, r2
 80046e0:	62b9      	str	r1, [r7, #40]	; 0x28
 80046e2:	415b      	adcs	r3, r3
 80046e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80046ea:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80046ee:	f7fb fd7b 	bl	80001e8 <__aeabi_uldivmod>
 80046f2:	4602      	mov	r2, r0
 80046f4:	460b      	mov	r3, r1
 80046f6:	4b8c      	ldr	r3, [pc, #560]	; (8004928 <UART_SetConfig+0x38c>)
 80046f8:	fba3 1302 	umull	r1, r3, r3, r2
 80046fc:	095b      	lsrs	r3, r3, #5
 80046fe:	2164      	movs	r1, #100	; 0x64
 8004700:	fb01 f303 	mul.w	r3, r1, r3
 8004704:	1ad3      	subs	r3, r2, r3
 8004706:	00db      	lsls	r3, r3, #3
 8004708:	3332      	adds	r3, #50	; 0x32
 800470a:	4a87      	ldr	r2, [pc, #540]	; (8004928 <UART_SetConfig+0x38c>)
 800470c:	fba2 2303 	umull	r2, r3, r2, r3
 8004710:	095b      	lsrs	r3, r3, #5
 8004712:	005b      	lsls	r3, r3, #1
 8004714:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004718:	441e      	add	r6, r3
 800471a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800471c:	4618      	mov	r0, r3
 800471e:	f04f 0100 	mov.w	r1, #0
 8004722:	4602      	mov	r2, r0
 8004724:	460b      	mov	r3, r1
 8004726:	1894      	adds	r4, r2, r2
 8004728:	623c      	str	r4, [r7, #32]
 800472a:	415b      	adcs	r3, r3
 800472c:	627b      	str	r3, [r7, #36]	; 0x24
 800472e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004732:	1812      	adds	r2, r2, r0
 8004734:	eb41 0303 	adc.w	r3, r1, r3
 8004738:	f04f 0400 	mov.w	r4, #0
 800473c:	f04f 0500 	mov.w	r5, #0
 8004740:	00dd      	lsls	r5, r3, #3
 8004742:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004746:	00d4      	lsls	r4, r2, #3
 8004748:	4622      	mov	r2, r4
 800474a:	462b      	mov	r3, r5
 800474c:	1814      	adds	r4, r2, r0
 800474e:	653c      	str	r4, [r7, #80]	; 0x50
 8004750:	414b      	adcs	r3, r1
 8004752:	657b      	str	r3, [r7, #84]	; 0x54
 8004754:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	461a      	mov	r2, r3
 800475a:	f04f 0300 	mov.w	r3, #0
 800475e:	1891      	adds	r1, r2, r2
 8004760:	61b9      	str	r1, [r7, #24]
 8004762:	415b      	adcs	r3, r3
 8004764:	61fb      	str	r3, [r7, #28]
 8004766:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800476a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800476e:	f7fb fd3b 	bl	80001e8 <__aeabi_uldivmod>
 8004772:	4602      	mov	r2, r0
 8004774:	460b      	mov	r3, r1
 8004776:	4b6c      	ldr	r3, [pc, #432]	; (8004928 <UART_SetConfig+0x38c>)
 8004778:	fba3 1302 	umull	r1, r3, r3, r2
 800477c:	095b      	lsrs	r3, r3, #5
 800477e:	2164      	movs	r1, #100	; 0x64
 8004780:	fb01 f303 	mul.w	r3, r1, r3
 8004784:	1ad3      	subs	r3, r2, r3
 8004786:	00db      	lsls	r3, r3, #3
 8004788:	3332      	adds	r3, #50	; 0x32
 800478a:	4a67      	ldr	r2, [pc, #412]	; (8004928 <UART_SetConfig+0x38c>)
 800478c:	fba2 2303 	umull	r2, r3, r2, r3
 8004790:	095b      	lsrs	r3, r3, #5
 8004792:	f003 0207 	and.w	r2, r3, #7
 8004796:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4432      	add	r2, r6
 800479c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800479e:	e0b9      	b.n	8004914 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80047a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80047a2:	461c      	mov	r4, r3
 80047a4:	f04f 0500 	mov.w	r5, #0
 80047a8:	4622      	mov	r2, r4
 80047aa:	462b      	mov	r3, r5
 80047ac:	1891      	adds	r1, r2, r2
 80047ae:	6139      	str	r1, [r7, #16]
 80047b0:	415b      	adcs	r3, r3
 80047b2:	617b      	str	r3, [r7, #20]
 80047b4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80047b8:	1912      	adds	r2, r2, r4
 80047ba:	eb45 0303 	adc.w	r3, r5, r3
 80047be:	f04f 0000 	mov.w	r0, #0
 80047c2:	f04f 0100 	mov.w	r1, #0
 80047c6:	00d9      	lsls	r1, r3, #3
 80047c8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80047cc:	00d0      	lsls	r0, r2, #3
 80047ce:	4602      	mov	r2, r0
 80047d0:	460b      	mov	r3, r1
 80047d2:	eb12 0804 	adds.w	r8, r2, r4
 80047d6:	eb43 0905 	adc.w	r9, r3, r5
 80047da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	4618      	mov	r0, r3
 80047e0:	f04f 0100 	mov.w	r1, #0
 80047e4:	f04f 0200 	mov.w	r2, #0
 80047e8:	f04f 0300 	mov.w	r3, #0
 80047ec:	008b      	lsls	r3, r1, #2
 80047ee:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80047f2:	0082      	lsls	r2, r0, #2
 80047f4:	4640      	mov	r0, r8
 80047f6:	4649      	mov	r1, r9
 80047f8:	f7fb fcf6 	bl	80001e8 <__aeabi_uldivmod>
 80047fc:	4602      	mov	r2, r0
 80047fe:	460b      	mov	r3, r1
 8004800:	4b49      	ldr	r3, [pc, #292]	; (8004928 <UART_SetConfig+0x38c>)
 8004802:	fba3 2302 	umull	r2, r3, r3, r2
 8004806:	095b      	lsrs	r3, r3, #5
 8004808:	011e      	lsls	r6, r3, #4
 800480a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800480c:	4618      	mov	r0, r3
 800480e:	f04f 0100 	mov.w	r1, #0
 8004812:	4602      	mov	r2, r0
 8004814:	460b      	mov	r3, r1
 8004816:	1894      	adds	r4, r2, r2
 8004818:	60bc      	str	r4, [r7, #8]
 800481a:	415b      	adcs	r3, r3
 800481c:	60fb      	str	r3, [r7, #12]
 800481e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004822:	1812      	adds	r2, r2, r0
 8004824:	eb41 0303 	adc.w	r3, r1, r3
 8004828:	f04f 0400 	mov.w	r4, #0
 800482c:	f04f 0500 	mov.w	r5, #0
 8004830:	00dd      	lsls	r5, r3, #3
 8004832:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004836:	00d4      	lsls	r4, r2, #3
 8004838:	4622      	mov	r2, r4
 800483a:	462b      	mov	r3, r5
 800483c:	1814      	adds	r4, r2, r0
 800483e:	64bc      	str	r4, [r7, #72]	; 0x48
 8004840:	414b      	adcs	r3, r1
 8004842:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004844:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	4618      	mov	r0, r3
 800484a:	f04f 0100 	mov.w	r1, #0
 800484e:	f04f 0200 	mov.w	r2, #0
 8004852:	f04f 0300 	mov.w	r3, #0
 8004856:	008b      	lsls	r3, r1, #2
 8004858:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800485c:	0082      	lsls	r2, r0, #2
 800485e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004862:	f7fb fcc1 	bl	80001e8 <__aeabi_uldivmod>
 8004866:	4602      	mov	r2, r0
 8004868:	460b      	mov	r3, r1
 800486a:	4b2f      	ldr	r3, [pc, #188]	; (8004928 <UART_SetConfig+0x38c>)
 800486c:	fba3 1302 	umull	r1, r3, r3, r2
 8004870:	095b      	lsrs	r3, r3, #5
 8004872:	2164      	movs	r1, #100	; 0x64
 8004874:	fb01 f303 	mul.w	r3, r1, r3
 8004878:	1ad3      	subs	r3, r2, r3
 800487a:	011b      	lsls	r3, r3, #4
 800487c:	3332      	adds	r3, #50	; 0x32
 800487e:	4a2a      	ldr	r2, [pc, #168]	; (8004928 <UART_SetConfig+0x38c>)
 8004880:	fba2 2303 	umull	r2, r3, r2, r3
 8004884:	095b      	lsrs	r3, r3, #5
 8004886:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800488a:	441e      	add	r6, r3
 800488c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800488e:	4618      	mov	r0, r3
 8004890:	f04f 0100 	mov.w	r1, #0
 8004894:	4602      	mov	r2, r0
 8004896:	460b      	mov	r3, r1
 8004898:	1894      	adds	r4, r2, r2
 800489a:	603c      	str	r4, [r7, #0]
 800489c:	415b      	adcs	r3, r3
 800489e:	607b      	str	r3, [r7, #4]
 80048a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80048a4:	1812      	adds	r2, r2, r0
 80048a6:	eb41 0303 	adc.w	r3, r1, r3
 80048aa:	f04f 0400 	mov.w	r4, #0
 80048ae:	f04f 0500 	mov.w	r5, #0
 80048b2:	00dd      	lsls	r5, r3, #3
 80048b4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80048b8:	00d4      	lsls	r4, r2, #3
 80048ba:	4622      	mov	r2, r4
 80048bc:	462b      	mov	r3, r5
 80048be:	eb12 0a00 	adds.w	sl, r2, r0
 80048c2:	eb43 0b01 	adc.w	fp, r3, r1
 80048c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	4618      	mov	r0, r3
 80048cc:	f04f 0100 	mov.w	r1, #0
 80048d0:	f04f 0200 	mov.w	r2, #0
 80048d4:	f04f 0300 	mov.w	r3, #0
 80048d8:	008b      	lsls	r3, r1, #2
 80048da:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80048de:	0082      	lsls	r2, r0, #2
 80048e0:	4650      	mov	r0, sl
 80048e2:	4659      	mov	r1, fp
 80048e4:	f7fb fc80 	bl	80001e8 <__aeabi_uldivmod>
 80048e8:	4602      	mov	r2, r0
 80048ea:	460b      	mov	r3, r1
 80048ec:	4b0e      	ldr	r3, [pc, #56]	; (8004928 <UART_SetConfig+0x38c>)
 80048ee:	fba3 1302 	umull	r1, r3, r3, r2
 80048f2:	095b      	lsrs	r3, r3, #5
 80048f4:	2164      	movs	r1, #100	; 0x64
 80048f6:	fb01 f303 	mul.w	r3, r1, r3
 80048fa:	1ad3      	subs	r3, r2, r3
 80048fc:	011b      	lsls	r3, r3, #4
 80048fe:	3332      	adds	r3, #50	; 0x32
 8004900:	4a09      	ldr	r2, [pc, #36]	; (8004928 <UART_SetConfig+0x38c>)
 8004902:	fba2 2303 	umull	r2, r3, r2, r3
 8004906:	095b      	lsrs	r3, r3, #5
 8004908:	f003 020f 	and.w	r2, r3, #15
 800490c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4432      	add	r2, r6
 8004912:	609a      	str	r2, [r3, #8]
}
 8004914:	bf00      	nop
 8004916:	377c      	adds	r7, #124	; 0x7c
 8004918:	46bd      	mov	sp, r7
 800491a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800491e:	bf00      	nop
 8004920:	40011000 	.word	0x40011000
 8004924:	40011400 	.word	0x40011400
 8004928:	51eb851f 	.word	0x51eb851f

0800492c <__libc_init_array>:
 800492c:	b570      	push	{r4, r5, r6, lr}
 800492e:	4d0d      	ldr	r5, [pc, #52]	; (8004964 <__libc_init_array+0x38>)
 8004930:	4c0d      	ldr	r4, [pc, #52]	; (8004968 <__libc_init_array+0x3c>)
 8004932:	1b64      	subs	r4, r4, r5
 8004934:	10a4      	asrs	r4, r4, #2
 8004936:	2600      	movs	r6, #0
 8004938:	42a6      	cmp	r6, r4
 800493a:	d109      	bne.n	8004950 <__libc_init_array+0x24>
 800493c:	4d0b      	ldr	r5, [pc, #44]	; (800496c <__libc_init_array+0x40>)
 800493e:	4c0c      	ldr	r4, [pc, #48]	; (8004970 <__libc_init_array+0x44>)
 8004940:	f000 f82e 	bl	80049a0 <_init>
 8004944:	1b64      	subs	r4, r4, r5
 8004946:	10a4      	asrs	r4, r4, #2
 8004948:	2600      	movs	r6, #0
 800494a:	42a6      	cmp	r6, r4
 800494c:	d105      	bne.n	800495a <__libc_init_array+0x2e>
 800494e:	bd70      	pop	{r4, r5, r6, pc}
 8004950:	f855 3b04 	ldr.w	r3, [r5], #4
 8004954:	4798      	blx	r3
 8004956:	3601      	adds	r6, #1
 8004958:	e7ee      	b.n	8004938 <__libc_init_array+0xc>
 800495a:	f855 3b04 	ldr.w	r3, [r5], #4
 800495e:	4798      	blx	r3
 8004960:	3601      	adds	r6, #1
 8004962:	e7f2      	b.n	800494a <__libc_init_array+0x1e>
 8004964:	08004a70 	.word	0x08004a70
 8004968:	08004a70 	.word	0x08004a70
 800496c:	08004a70 	.word	0x08004a70
 8004970:	08004a74 	.word	0x08004a74

08004974 <memcpy>:
 8004974:	440a      	add	r2, r1
 8004976:	4291      	cmp	r1, r2
 8004978:	f100 33ff 	add.w	r3, r0, #4294967295
 800497c:	d100      	bne.n	8004980 <memcpy+0xc>
 800497e:	4770      	bx	lr
 8004980:	b510      	push	{r4, lr}
 8004982:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004986:	f803 4f01 	strb.w	r4, [r3, #1]!
 800498a:	4291      	cmp	r1, r2
 800498c:	d1f9      	bne.n	8004982 <memcpy+0xe>
 800498e:	bd10      	pop	{r4, pc}

08004990 <memset>:
 8004990:	4402      	add	r2, r0
 8004992:	4603      	mov	r3, r0
 8004994:	4293      	cmp	r3, r2
 8004996:	d100      	bne.n	800499a <memset+0xa>
 8004998:	4770      	bx	lr
 800499a:	f803 1b01 	strb.w	r1, [r3], #1
 800499e:	e7f9      	b.n	8004994 <memset+0x4>

080049a0 <_init>:
 80049a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049a2:	bf00      	nop
 80049a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049a6:	bc08      	pop	{r3}
 80049a8:	469e      	mov	lr, r3
 80049aa:	4770      	bx	lr

080049ac <_fini>:
 80049ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049ae:	bf00      	nop
 80049b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049b2:	bc08      	pop	{r3}
 80049b4:	469e      	mov	lr, r3
 80049b6:	4770      	bx	lr
